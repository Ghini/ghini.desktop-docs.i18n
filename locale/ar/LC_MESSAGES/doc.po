# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2012, Brett Adams; 2012-2015, Mario Frasca
# This file is distributed under the same license as the Ghini package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2018-03-26 08:26-0500\n"
"PO-Revision-Date: 2017-07-02 20:20+0000\n"
"Last-Translator: Mario Frasca <mariotomo@gmail.com>\n"
"Language: ar\n"
"Language-Team: Arabic "
"<https://hosted.weblate.org/projects/ghini/documentation-10/ar/>\n"
"Plural-Forms: nplurals=6; plural=n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : "
"n%100>=3 && n%100<=10 ? 3 : n%100>=11 ? 4 : 5\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../administration.rst:2
msgid "Database Administration"
msgstr "إدارة قاعدة البيانات"

#: ../../administration.rst:4
msgid ""
"If you are using a real DBMS to hold your botanic data, then you need do "
"something about database administration. While database administration is"
" far beyond the scope of this document, we make our users aware of it."
msgstr ""

#: ../../administration.rst:11
msgid ""
"SQLite is not what one would consider a real DBMS: each SQLite database "
"is just in one file. Make safety copies and you will be fine. If you "
"don't know where to look for your database files, consider that, per "
"default, bauble puts its data in the ``~/.bauble/`` directory."
msgstr ""

#: ../../administration.rst:16
msgid ""
"In Windows it is somewhere in your ``AppData`` directory, most likely in "
"``AppData\\Roaming\\Bauble``. Do keep in mind that Windows does its best "
"to hide the ``AppData`` directory structure to normal users."
msgstr ""

#: ../../administration.rst:20
msgid ""
"The fastest way to open it is with the file explorer: type ``%APPDATA%`` "
"and hit enter."
msgstr ""

#: ../../administration.rst:26
msgid ""
"Please refer to the `official documentation <https://mariadb.com/kb/en"
"/the-mariadb-library/documentation/>`_."
msgstr ""

#: ../../administration.rst:28
msgid ""
"Backing up and restoring databases is described in breadth and depth "
"starting at `this page <https://mariadb.com/kb/en/the-mariadb-library"
"/backing-up-and-restoring-databases/>`_."
msgstr ""

#: ../../administration.rst:35
msgid ""
"Please refer to the official documentation. A very thorough discussion of"
" your backup options starts at `chapter 24 "
"<http://www.postgresql.org/docs/9.1/static/backup.html>`_."
msgstr ""

#: ../../administration.rst:39
msgid "Ghini Configuration"
msgstr ""

#: ../../administration.rst:41
msgid ""
"Ghini uses a configuration file to store values across invocations. This "
"file is associated to a user account and every user will have their own "
"configuration file."
msgstr ""

#: ../../administration.rst:45
msgid ""
"To review the content of the Ghini configuration file, type ``:prefs`` in"
" the text entry area where you normally type your searches, then hit "
"enter."
msgstr ""

#: ../../administration.rst:48
msgid ""
"You normally do not need tweaking the configuration file, but you can do "
"so with a normal text editor program. Ghini configuration file is at the "
"default location for SQLite databases."
msgstr ""

#: ../../administration.rst:53
msgid "Reporting Errors"
msgstr ""

#: ../../administration.rst:55
msgid ""
"Should you notice anything unexpected in Ghini's behaviour, please "
"consider filing an issue on the Ghini development site."
msgstr ""

#: ../../administration.rst:58
msgid "Ghini development site can be accessed via the Help menu."
msgstr ""

#: ../../building.rst:2
msgid "Developer's Manual"
msgstr ""

#: ../../building.rst:5
msgid "Helping Ghini development"
msgstr ""

#: ../../building.rst:7
msgid ""
"Installing Ghini always includes downloading the sources, connected to "
"the github repository. This is so because in our eyes, every user is "
"always potentially also a developer."
msgstr ""

#: ../../building.rst:11
msgid ""
"If you want to contribute to Ghini, you can do so in quite a few "
"different ways:"
msgstr ""

#: ../../building.rst:13
msgid ""
"Use the software, note the things you don't like, `open an issue "
"<http://github.com/Ghini/ghini.desktop/issues/new>`_ for each of them. A "
"developer will react sooner than you can imagine."
msgstr ""

#: ../../building.rst:16
msgid ""
"If you have an idea of what you miss in the software but can't quite "
"formalize it into separate issues, you could consider hiring a "
"professional. This is the best way to make sure that something happens "
"quickly on Ghini. Do make sure the developer opens issues and publishes "
"their contribution on github."
msgstr ""

#: ../../building.rst:21
msgid ""
"Translate! Any help with translations will be welcome, so please do! you "
"can do this without installing anything on your computer, just using the "
"on-line translation service offered by http://hosted.weblate.org/"
msgstr ""

#: ../../building.rst:24
msgid ""
"fork the respository, choose an issue, solve it, open a pull request. See"
" the `bug solving workflow`_ below."
msgstr ""

#: ../../building.rst:27
msgid ""
"If you haven't yet installed Ghini, and want to have a look at its code "
"history, you can open our `github project page "
"<http://github.com/Ghini/ghini.desktop>`_ and see all that has been going"
" on around Ghini since its inception as Bauble, back in the year 2004."
msgstr ""

#: ../../building.rst:33
msgid "Software source, versions, branches"
msgstr ""

#: ../../building.rst:35
msgid ""
"If you want a particular version of Ghini, we release and maintain "
"versions as branches. You should ``git checkout`` the branch "
"corresponding to the version of your choice."
msgstr ""

#: ../../building.rst:40
msgid "production line"
msgstr ""

#: ../../building.rst:42
msgid ""
"Branch names for Ghini stable (production) versions are of the form "
"``ghini-x.y`` (eg: ghini-1.0); branch names where Ghini testing versions "
"are published are of the form ``ghini-x.y-dev`` (eg: ghini-1.0-dev)."
msgstr ""

#: ../../building.rst:47
msgid "Development Workflow"
msgstr ""

#: ../../building.rst:49
msgid ""
"Our workflow is to continuously commit to the testing branch, to often "
"push them to github, to let travis-ci and coveralls.io check the quality "
"of the pushed testing branches, finally, from time to time, to merge the "
"testing branch into the corresponding release."
msgstr ""

#: ../../building.rst:54
msgid ""
"When working at larger issues, which seem to take longer than a couple of"
" days, I might open a branch associated to the issue. I don't do this "
"very often."
msgstr ""

#: ../../building.rst:59
msgid "larger issues"
msgstr ""

#: ../../building.rst:61
msgid ""
"When facing a single larger issue, create a branch tag at the tip of a "
"main development line (e.g.: ``ghini-1.0-dev``), and follow the workflow "
"described at"
msgstr ""

#: ../../building.rst:67
msgid "in short::"
msgstr ""

#: ../../building.rst:73
msgid ""
"Work on the new temporary branch. When ready, go to github, merge the "
"branch with the main development line from which you branched, solve "
"conflicts where necessary, delete the temporary branch."
msgstr ""

#: ../../building.rst:77
msgid ""
"When ready for publication, merge the development line into the "
"corresponding production line."
msgstr ""

#: ../../building.rst:81
msgid "Updating the set of translatable strings"
msgstr ""

#: ../../building.rst:83
msgid ""
"From time to time, during the process of updating the software, you will "
"be adding or modifying strings in the python sources, in the "
"documentation, in the glade sources. Most of our strings are "
"translatable, and are offered to weblate for people to contribute, in the"
" form of several ``.po`` files."
msgstr ""

#: ../../building.rst:88
msgid ""
"A ``po`` is mostly composed of pairs of text portions, original and "
"translation, and is specific to a target language. When a translator adds"
" a translation on weblate, this reaches our repository on github. When a "
"programmer adds a string to the software, this reaches weblate as \"to be"
" translated\"."
msgstr ""

#: ../../building.rst:94
msgid ""
"Weblate hosts the `Ghini <https://hosted.weblate.org/projects/ghini/>`_ "
"project. Within this project we have components, each of which "
"corresponds to a branch of a repository on github. Each component accepts"
" translations in several languages."
msgstr ""

#: ../../building.rst:100
msgid "component"
msgstr ""

#: ../../building.rst:100
msgid "repository"
msgstr ""

#: ../../building.rst:100
msgid "branch"
msgstr ""

#: ../../building.rst:107
msgid "Pocket"
msgstr ""

#: ../../building.rst:107 ../../ghini-family.rst:15
msgid "ghini.pocket"
msgstr ""

#: ../../building.rst:110
msgid ""
"To update the ``po`` files relative to the *software*, you set the "
"working directory to the root of your checkout of *ghini.desktop*, and "
"you run the script::"
msgstr ""

#: ../../building.rst:116
msgid ""
"To update the ``po`` files relative to the *documentation*, you set the "
"working directory to the root of your checkout of *ghini.desktop-"
"docs.i18n*, and you run the script::"
msgstr ""

#: ../../building.rst:122
msgid ""
"When you run either of the above mentioned scripts, chances are you need "
"to commit *all* ``po`` files in the project. You may want to review the "
"changes before committing them to the respository. This is most important"
" when you perform a marginal correction to a string, like removing a "
"typo."
msgstr ""

#: ../../building.rst:127
msgid ""
"Something that happens: running into a conflict. Solving conflicts is not"
" difficult once you know how to do that. First of all, add weblate as "
"remote::"
msgstr ""

#: ../../building.rst:132
msgid ""
"Then make sure we are in the correct repository, on the correct branch, "
"update the remote, merge with it::"
msgstr ""

#: ../../building.rst:139
msgid ""
"`Our documentation <https://readthedocs.org/projects/ghini/>`_ on "
"readthedocs has an original English version, and several translations. We"
" just follow the `description of localisation "
"<http://docs.readthedocs.io/en/latest/localization.html>`_, there's "
"nothing that we invented ourselves here."
msgstr ""

#: ../../building.rst:145
msgid ""
"Readthedocs checks the project's *Language* setting, and invokes "
"``sphinx-intl`` to produce the formatted documentation in the target "
"language. With the default configuration —which we did not alter— "
"``sphinx-intl`` expects one ``po`` file per source document, named as the"
" source document, and that they all reside in the directory "
"``local/$(LANG)/LC_MESSAGES/``."
msgstr ""

#: ../../building.rst:152
msgid ""
"On the other hand, Weblate (and ourselves) prefers a single ``po`` file "
"per language, and keeps them all in the same ``/po`` directory, just as "
"we do for the software project: ``/po/$(LANG).po``."
msgstr ""

#: ../../building.rst:156
msgid ""
"In order not to repeat information, and to let both systems work their "
"natural way, we have two sets of symbolic links (git honors them)."
msgstr ""

#: ../../building.rst:159
msgid ""
"To summarise: when a file in the documentation is updated, the "
"``runme.sh`` script will:"
msgstr ""

#: ../../building.rst:162
msgid "copy the ``rst`` files from the software to the documentation;"
msgstr ""

#: ../../building.rst:163
msgid "create a new ``pot`` file for each of the documentation files;"
msgstr ""

#: ../../building.rst:164
msgid "merge all ``pot`` files into one ``doc.pot``;"
msgstr ""

#: ../../building.rst:165
msgid ""
"use the updated ``doc.pot`` to update all ``doc.po`` files (one per "
"language);"
msgstr ""

#: ../../building.rst:166
msgid "create all symbolic links:"
msgstr ""

#: ../../building.rst:168
msgid "those expected by ``sphinx-intl`` in ``/local/$(LANG)/LC_MESSAGES/``"
msgstr ""

#: ../../building.rst:169
msgid "those used by weblate in ``/po/$(LANG).po``"
msgstr ""

#: ../../building.rst:171
msgid ""
"We could definitely write the above in a Makefile, or even better include"
" it in ``/doc/Makefile``. Who knows, maybe we will do that."
msgstr ""

#: ../../building.rst:175
msgid "Which way do the translated strings reach our users?"
msgstr ""

#: ../../building.rst:177
msgid ""
"A new translator asked the question, adding: »Is this an automated "
"process from Weblate --> GIT --> Ghini Desktop installed on users "
"computers, or does this require manual steps?"
msgstr ""

#: ../../building.rst:181
msgid ""
"The aswer is that the whole interaction is quite complex, and it depends "
"on the component."
msgstr ""

#: ../../building.rst:184
msgid ""
"When it comes to ``ghini.desktop``, when you do a global installation, "
"you don't know which language your users will set up their environment, "
"and a user can change the language configuration any time.  So what we do"
" is to install the software in English together with a translation table "
"from English to whatever else, in particular Italian or Hungarian. Then "
"the GUI libraries (Android or GTK) know where to look for the translation"
" strings. These translation tables are generated during the installation "
"or upgrade process, based on the strings you see on Weblate."
msgstr ""

#: ../../building.rst:193
msgid ""
"Before any of the above gets activated, the path followed by your "
"translations is as you describe: Weblate pushes the strings to github, "
"directly into the development line `ghini-1.0-dev`; I see them, if I "
"understand at least the structure of that language I review them, maybe I"
" look them up in wikipedia or get them translated back to Italian, "
"Spanish or English by some automatic translation service; sometimes I "
"need to solve conflicts arising because of changed context, not too often"
" fortunately; from time to time I publish the development line "
"`ghini-1.0-dev` to the production line `ghini-1.0`, and this is the "
"moment when the new translations finally make it to the distributed "
"software."
msgstr ""

#: ../../building.rst:204
msgid ""
"users will notice a `new version available` warning and can decide to "
"ignore it, or to update."
msgstr ""

#: ../../building.rst:207
msgid ""
"For ``ghini.pocket``, there is no notification to end users, since we're "
"not yet using the google app store."
msgstr ""

#: ../../building.rst:210
msgid "For ``ghini.web``, we haven't yet defined how to distribute it."
msgstr ""

#: ../../building.rst:212
msgid ""
"For ghini's documentation, it's completely automatic, and all is handled "
"by readthedocs.org."
msgstr ""

#: ../../building.rst:217
msgid "Adding missing unit tests"
msgstr ""

#: ../../building.rst:219
msgid ""
"If you are interested contributing to development of Ghini, a good way to"
" do so would be by helping us finding and writing the missing unit tests."
msgstr ""

#: ../../building.rst:222
msgid ""
"A well tested function is one whose behaviour you cannot change without "
"breaking at least one unit test."
msgstr ""

#: ../../building.rst:225
msgid ""
"We all agree that in theory theory and practice match perfectly and that "
"one first writes the tests, then implements the function. In practice, "
"however, practice does not match theory and we have been writing tests "
"after writing and even publishing the functions."
msgstr ""

#: ../../building.rst:230
msgid ""
"This section describes the process of adding unit tests for "
"``bauble.plugins.plants.family.remove_callback``."
msgstr ""

#: ../../building.rst:234
msgid "What to test"
msgstr ""

#: ../../building.rst:236
msgid ""
"First of all, open the coverage report index, and choose a file with low "
"coverage."
msgstr ""

#: ../../building.rst:239
msgid ""
"For this example, run in October 2015, we landed on "
"``bauble.plugins.plants.family``, at 33%."
msgstr ""

#: ../../building.rst:244
msgid ""
"The first two functions which need tests, ``edit_callback`` and "
"``add_genera_callback``, include creation and activation of an object "
"relying on a custom dialog box. We should really first write unit tests "
"for that class, then come back here."
msgstr ""

#: ../../building.rst:249
msgid ""
"The next function, ``remove_callback``, also activates a couple of dialog"
" and message boxes, but in the form of invoking a function requesting "
"user input via yes-no-ok boxes. These functions we can easily replace "
"with a function mocking the behaviour."
msgstr ""

#: ../../building.rst:255
msgid "how to test"
msgstr ""

#: ../../building.rst:257
msgid ""
"So, having decided what to describe in unit test, we look at the code and"
" we see it needs discriminate a couple of cases:"
msgstr ""

#: ../../building.rst:263
msgid "**parameter correctness**"
msgstr ""

#: ../../building.rst:261
msgid "the list of families has no elements."
msgstr ""

#: ../../building.rst:262
msgid "the list of families has more than one element."
msgstr ""

#: ../../building.rst:263
msgid "the list of families has exactly one element."
msgstr ""

#: ../../building.rst:267
msgid "**cascade**"
msgstr ""

#: ../../building.rst:266
msgid "the family has no genera"
msgstr ""

#: ../../building.rst:267
msgid "the family has one or more genera"
msgstr ""

#: ../../building.rst:271
msgid "**confirm**"
msgstr ""

#: ../../building.rst:270
msgid "the user confirms deletion"
msgstr ""

#: ../../building.rst:271
msgid "the user does not confirm deletion"
msgstr ""

#: ../../building.rst:275
msgid "**deleting**"
msgstr ""

#: ../../building.rst:274
msgid "all goes well when deleting the family"
msgstr ""

#: ../../building.rst:275
msgid "there is some error while deleting the family"
msgstr ""

#: ../../building.rst:277
msgid ""
"I decide I will only focus on the **cascade** and the **confirm** "
"aspects. Two binary questions: 4 cases."
msgstr ""

#: ../../building.rst:281
msgid "where to put the tests"
msgstr ""

#: ../../building.rst:283
msgid ""
"Locate the test script and choose the class where to put the extra unit "
"tests."
msgstr ""

#: ../../building.rst:287
msgid "what about skipped tests"
msgstr ""

#: ../../building.rst:290
msgid ""
"The ``FamilyTests`` class contains a skipped test, implementing it will "
"be quite a bit of work because we need rewrite the FamilyEditorPresenter,"
" separate it from the FamilyEditorView and reconsider what to do with the"
" FamilyEditor class, which I think should be removed and replaced with a "
"single function."
msgstr ""

#: ../../building.rst:297
msgid "writing the tests"
msgstr ""

#: ../../building.rst:299
msgid ""
"After the last test in the FamilyTests class, I add the four cases I want"
" to describe, and I make sure they fail, and since I'm lazy, I write the "
"most compact code I know for generating an error::"
msgstr ""

#: ../../building.rst:316
msgid "One test, step by step"
msgstr ""

#: ../../building.rst:318
msgid "Let's start with the first test case."
msgstr ""

#: ../../building.rst:320
msgid "When writing tests, I generally follow the pattern:"
msgstr ""

#: ../../building.rst:322
msgid "T₀ (initial condition),"
msgstr ""

#: ../../building.rst:323
msgid "action,"
msgstr ""

#: ../../building.rst:324
msgid "T₁ (testing the result of the action given the initial conditions)"
msgstr ""

#: ../../building.rst:326
msgid "what's in a name — unit tests"
msgstr ""

#: ../../building.rst:329
msgid ""
"There's a reason why unit tests are called unit tests. Please never test "
"two actions in one test."
msgstr ""

#: ../../building.rst:332
msgid ""
"So let's describe T₀ for the first test, a database holding a family "
"without genera::"
msgstr ""

#: ../../building.rst:340
msgid ""
"We do not want the function being tested to invoke the interactive "
"``utils.yes_no_dialog`` function, we want ``remove_callback`` to invoke a"
" non-interactive replacement function. We achieve this simply by making "
"``utils.yes_no_dialog`` point to a ``lambda`` expression which, like the "
"original interactive function, accepts one parameter and returns a "
"boolean. In this case: ``False``::"
msgstr ""

#: ../../building.rst:358
msgid "Next we test the result."
msgstr ""

#: ../../building.rst:360
msgid ""
"Well, we don't just want to test whether or not the object Arecaceae was "
"deleted, we also should test the value returned by ``remove_callback``, "
"and whether ``yes_no_dialog`` and ``message_details_dialog`` were invoked"
" or not."
msgstr ""

#: ../../building.rst:365
msgid ""
"A ``lambda`` expression is not enough for this. We do something "
"apparently more complex, which will make life a lot easier."
msgstr ""

#: ../../building.rst:368
msgid "Let's first define a rather generic function::"
msgstr ""

#: ../../building.rst:374
msgid ""
"and we grab ``partial`` from the ``functools`` standard module, to "
"partially apply the above ``mockfunc``, leaving only ``msg`` unspecified,"
" and use this partial application, which is a function accepting one "
"parameter and returning a value, to replace the two functions in "
"``utils``. The test function now looks like this::"
msgstr ""

#: ../../building.rst:396
msgid ""
"The test section checks that ``message_details_dialog`` was not invoked, "
"that ``yes_no_dialog`` was invoked, with the correct message parameter, "
"that Arecaceae is still there::"
msgstr ""

#: ../../building.rst:412
msgid "And so on"
msgstr ""

#: ../../building.rst:414
msgid ""
"`there are two kinds of people, those who complete what they start, and "
"so on`"
msgstr ""

#: ../../building.rst:417
msgid ""
"Next test is almost the same, with the difference that the "
"``utils.yes_no_dialog`` should return ``True`` (this we achieve by "
"specifying ``result=True`` in the partial application of the generic "
"``mockfunc``)."
msgstr ""

#: ../../building.rst:422
msgid ""
"With this action, the value returned by ``remove_callback`` should be "
"``True``, and there should be no Arecaceae Family in the database any "
"more::"
msgstr ""

#: ../../building.rst:452
msgid ""
"have a look at commit 734f5bb9feffc2f4bd22578fcee1802c8682ca83 for the "
"other two test functions."
msgstr ""

#: ../../building.rst:456
msgid "Testing logging"
msgstr ""

#: ../../building.rst:458
msgid ""
"Our ``bauble.test.BaubleTestCase`` objects use handlers of the class "
"``bauble.test.MockLoggingHandler``.  Every time an individual unit test "
"is started, the ``setUp`` method will create a new ``handler`` and "
"associate it to the root logger.  The ``tearDown`` method takes care of "
"removing it."
msgstr ""

#: ../../building.rst:463
#, python-format
msgid ""
"You can check for presence of specific logging messages in "
"``self.handler.messages``. ``messages`` is a dictionary, initially empty,"
" with two levels of indexation. First the name of the logger issuing the "
"logging record, then the name of the level of the logging record. Keys "
"are created when needed. Values hold lists of messages, formatted "
"according to whatever formatter you associate to the handler, defaulting "
"to ``logging.Formatter(\"%(message)s\")``."
msgstr ""

#: ../../building.rst:471
msgid ""
"You can explicitly empty the collected messages by invoking "
"``self.handler.clear()``."
msgstr ""

#: ../../building.rst:476
msgid "Putting all together"
msgstr ""

#: ../../building.rst:478
msgid "From time to time you want to activate the test class you're working at::"
msgstr ""

#: ../../building.rst:482
msgid "And at the end of the process you want to update the statistics::"
msgstr ""

#: ../../building.rst:488
msgid "Structure of user interface"
msgstr ""

#: ../../building.rst:490
msgid ""
"The user interface is built according to the **Model** — **View** — "
"**Presenter** architectural pattern.  For much of the interface, "
"**Model** is a SQLAlchemy database object, but we also have interface "
"elements where there is no corresponding database model.  In general:"
msgstr ""

#: ../../building.rst:495
msgid ""
"The **View** is described as part of a **glade** file. This should "
"include the signal-callback and ListStore-TreeView associations. Just "
"reuse the base class ``GenericEditorView`` defined in ``bauble.editor``. "
"When you create your instance of this generic class, pass it the "
"**glade** file name and the root widget name, then hand this instance "
"over to the **presenter** constructor."
msgstr ""

#: ../../building.rst:502
msgid ""
"In the glade file, in the ``action-widgets`` section closing your "
"GtkDialog object description, make sure every ``action-widget`` element "
"has a valid ``response`` value.  Use `valid GtkResponseType values "
"<http://gtk.php.net/manual/en/html/gtk/gtk.enum.responsetype.html>`_, for"
" example:"
msgstr ""

#: ../../building.rst:513
msgid ""
"There is no easy way to unit test a subclassed view, so please don't "
"subclass views, there's really no need to."
msgstr ""

#: ../../building.rst:516
msgid ""
"In the glade file, every input widget should define which handler is "
"activated on which signal.  The generic Presenter class offers generic "
"callbacks which cover the most common cases."
msgstr ""

#: ../../building.rst:520
msgid ""
"GtkEntry (one-line text entry) will handle the ``changed`` signal, with "
"either ``on_text_entry_changed`` or ``on_unique_text_entry_changed``."
msgstr ""

#: ../../building.rst:522
msgid ""
"GtkTextView: associate it to a GtkTextBuffer. To handle the ``changed`` "
"signal on the GtkTextBuffer, we have to define a handler which invokes "
"the generic ``on_textbuffer_changed``, the only role for this function is"
" to pass our generic handler the name of the model attribute that "
"receives the change. This is a workaroud for an `unresolved bug in GTK "
"<http://stackoverflow.com/questions/32106765/>`_."
msgstr ""

#: ../../building.rst:528
msgid ""
"GtkComboBox with translated texts can't be easily handled from the glade "
"file, so we don't even try.  Use the ``init_translatable_combo`` method "
"of the generic ``GenericEditorView`` class, but please invoke it from the"
" **presenter**."
msgstr ""

#: ../../building.rst:533
msgid ""
"The **Model** is just an object with known attributes. In this "
"interaction, the **model** is just a passive data container, it does "
"nothing more than to let the **presenter** modify it."
msgstr ""

#: ../../building.rst:537
msgid "The subclassed **Presenter** defines and implements:"
msgstr ""

#: ../../building.rst:539
msgid ""
"``widget_to_field_map``, a dictionary associating widget names to name of"
" model attributes,"
msgstr ""

#: ../../building.rst:541
msgid ""
"``view_accept_buttons``, the list of widget names which, if activated by "
"the user, mean that the view should be closed,"
msgstr ""

#: ../../building.rst:543
msgid "all needed callbacks,"
msgstr ""

#: ../../building.rst:544
msgid "optionally, it plays the **model** role, too."
msgstr ""

#: ../../building.rst:546
msgid ""
"The **presenter** continuously updates the **model** according to changes"
" in the **view**. If the **model** corresponds to a database object, the "
"**presenter** commits all **model** updates to the database when the "
"**view** is closed successfully, or rolls them back if the **view** is "
"canceled. (this behaviour is influenced by the parameter ``do_commit``)"
msgstr ""

#: ../../building.rst:552
msgid ""
"If the **model** is something else, then the **presenter** will do "
"something else."
msgstr ""

#: ../../building.rst:557
msgid ""
"A well behaved **presenter** uses the **view** api to query the values "
"inserted by the user or to forcibly set widget statuses. Please do not "
"learn from the practice of our misbehaving presenters, some of which "
"directly handle fields of ``view.widgets``. By doing so, these presenters"
" prevents us from writing unit tests."
msgstr ""

#: ../../building.rst:563
msgid ""
"The base class for the presenter, ``GenericEditorPresenter`` defined in "
"``bauble.editor``, implements many useful generic callbacks.  There is a "
"``MockView`` class, that you can use when writing tests for your "
"presenters."
msgstr ""

#: ../../building.rst:568
msgid "Examples"
msgstr ""

#: ../../building.rst:570
msgid ""
"``Contact`` and ``ContactPresenter`` are implemented following the above "
"lines.  The view is defined in the ``contact.glade`` file."
msgstr ""

#: ../../building.rst:573
msgid ""
"A good example of Presenter/View pattern (no model) is given by the "
"connection manager."
msgstr ""

#: ../../building.rst:576
msgid ""
"We use the same architectural pattern for non-database interaction, by "
"setting the presenter also as model. We do this, for example, for the "
"JSON export dialog box. The following command will give you a list of "
"``GenericEditorView`` instantiations::"
msgstr ""

#: ../../building.rst:584
msgid "Extending Ghini with Plugins"
msgstr ""

#: ../../building.rst:586
msgid ""
"Nearly everything about Ghini is extensible through plugins. Plugins can "
"create tables, define custom searchs, add menu items, create custom "
"commands and more."
msgstr ""

#: ../../building.rst:590
msgid ""
"To create a new plugin you must extend the ``bauble.pluginmgr.Plugin`` "
"class."
msgstr ""

#: ../../building.rst:593
msgid ""
"The ``Tag`` plugin is a good minimal example, even if the ``TagItemGUI`` "
"falls outside the Model-View-Presenter architectural pattern."
msgstr ""

#: ../../building.rst:597
msgid "Plugins structure"
msgstr ""

#: ../../building.rst:599
msgid ""
"Ghini is a framework for handling collections, and is distributed along "
"with a set of plugins making Ghini a botanical collection manager. But "
"Ghini stays a framework and you could in theory remove all plugins we "
"distribute and write your own, or write your own plugins that extend or "
"complete the current Ghini behaviour."
msgstr ""

#: ../../building.rst:605
msgid ""
"Once you have selected and opened a database connection, you land in the "
"Search window. The Search window is an interaction between two objects: "
"SearchPresenter (SP) and SearchView (SV)."
msgstr ""

#: ../../building.rst:609
msgid ""
"SV is what you see, SP holds the program status and handles the requests "
"you express through SV. Handling these requests affect the content of SV "
"and the program status in SP."
msgstr ""

#: ../../building.rst:613
msgid ""
"The search results shown in the largest part of SV are rows, objects that"
" are instances of classes registered in a plugin."
msgstr ""

#: ../../building.rst:616
msgid ""
"Each of these classes must implement an amount of functions in order to "
"properly behave within the Ghini framework. The Ghini framework reserves "
"space to pluggable classes."
msgstr ""

#: ../../building.rst:620
msgid ""
"SP knows of all registered (plugged in) classes, they are stored in a "
"dictionary, associating a class to its plugin implementation.  SV has a "
"slot (a gtk.Box) where you can add elements. At any time, at most only "
"one element in the slot is visible."
msgstr ""

#: ../../building.rst:625
msgid ""
"A plugin defines one or more plugin classes. A plugin class plays the "
"role of a partial presenter (pP - plugin presenter) as it implement the "
"callbacks needed by the associated partial view fitting in the slot (pV -"
" plugin view), and the MVP pattern is completed by the parent presenter "
"(SP), again acting as model. To summarize and complete:"
msgstr ""

#: ../../building.rst:631
msgid "SP acts as model,"
msgstr ""

#: ../../building.rst:632
msgid "the pV partial view is defined in a glade file."
msgstr ""

#: ../../building.rst:633
msgid "the callbacks implemented by pP are referenced by the glade file."
msgstr ""

#: ../../building.rst:634
msgid "a context menu for the SP row,"
msgstr ""

#: ../../building.rst:635
msgid "a children property."
msgstr ""

#: ../../building.rst:637
msgid "when you register a plugin class, the SP:"
msgstr ""

#: ../../building.rst:639
msgid "adds the pV in the slot and makes it non-visible."
msgstr ""

#: ../../building.rst:640
msgid "adds an instance of pP in the registered plugin classes."
msgstr ""

#: ../../building.rst:641
msgid "tells the pP that the SP is the model."
msgstr ""

#: ../../building.rst:642
msgid "connects all callbacks from pV to pP."
msgstr ""

#: ../../building.rst:644
msgid ""
"when an element in pV triggers an action in pP, the pP can forward the "
"action to SP and can request SP that it updates the model and refreshes "
"the view."
msgstr ""

#: ../../building.rst:648
msgid ""
"When the user selects a row in SP, SP hides everything in the pluggable "
"slot and shows only the single pV relative to the type of the selected "
"row, and asks the pP to refresh the pV with whatever is relative to the "
"selected row."
msgstr ""

#: ../../building.rst:652
msgid ""
"Apart from setting the visibility of the various pV, nothing needs be "
"disabled nor removed: an invisible pV cannot trigger events!"
msgstr ""

#: ../../building.rst:656
msgid "bug solving workflow"
msgstr ""

#: ../../building.rst:659
msgid "normal development workflow"
msgstr ""

#: ../../building.rst:661
msgid ""
"while using the software, you notice a problem, or you get an idea of "
"something that could be better, you think about it good enough in order "
"to have a very clear idea of what it really is, that you noticed. you "
"open an issue and describe the problem. someone might react with hints."
msgstr ""

#: ../../building.rst:665
msgid "you open the issues site and choose one you want to tackle."
msgstr ""

#: ../../building.rst:666
msgid ""
"assign the issue to yourself, this way you are informing the world that "
"you have the intention to work at it. someone might react with hints."
msgstr ""

#: ../../building.rst:668
msgid ""
"optionally fork the repository in your account and preferably create a "
"branch, clearly associated to the issue."
msgstr ""

#: ../../building.rst:670
msgid ""
"write unit tests and commit them to your branch (please do not push "
"failing unit tests to github, run ``nosetests`` locally first)."
msgstr ""

#: ../../building.rst:672
msgid ""
"write more unit tests (ideally, the tests form the complete description "
"of the feature you are adding or correcting)."
msgstr ""

#: ../../building.rst:674
msgid ""
"make sure the feature you are adding or correcting is really completely "
"described by the unit tests you wrote."
msgstr ""

#: ../../building.rst:676
msgid ""
"make sure your unit tests are atomic, that is, that you test variations "
"on changes along one single variable. do not give complex input to unit "
"tests or tests that do not fit on one screen (25 lines of code)."
msgstr ""

#: ../../building.rst:679
msgid "write the code that makes your tests succeed."
msgstr ""

#: ../../building.rst:680
msgid "update the i18n files (run ``./scripts/i18n.sh``)."
msgstr ""

#: ../../building.rst:681
msgid ""
"whenever possible, translate the new strings you put in code or glade "
"files."
msgstr ""

#: ../../building.rst:683
msgid ""
"when you change strings, please make sure that old translations get re-"
"used."
msgstr ""

#: ../../building.rst:684
msgid "commit your changes."
msgstr ""

#: ../../building.rst:685
msgid "push to github."
msgstr ""

#: ../../building.rst:686
msgid "open a pull request."
msgstr ""

#: ../../building.rst:689
msgid "publishing to production"
msgstr ""

#: ../../building.rst:691
msgid ""
"open the pull request page using as base a production line ``ghini-x.y``,"
" compared to ``ghini-x.y-dev``."
msgstr ""

#: ../../building.rst:693
msgid "make sure a ``bump`` commit is included in the differences."
msgstr ""

#: ../../building.rst:694
msgid "it should be possible to automatically merge the branches."
msgstr ""

#: ../../building.rst:695
msgid "create the new pull request, call it as “publish to the production line”."
msgstr ""

#: ../../building.rst:696
msgid "you possibly need wait for travis-ci to perform the checks."
msgstr ""

#: ../../building.rst:697
msgid "merge the changes."
msgstr ""

#: ../../building.rst:698
msgid "tell the world about it: on facebook, the google group, linkedin, ..."
msgstr ""

#: ../../building.rst:701
msgid "your own fork"
msgstr ""

#: ../../building.rst:703
msgid ""
"If you want to keep your own fork of the project, keep in mind this is "
"full force work in progress, so staying up to date will require some "
"effort from your side."
msgstr ""

#: ../../building.rst:707
msgid ""
"The best way to keep your own fork is to focus on some specific issue, "
"work relatively quickly, often open pull requests for your work, make "
"sure that you get it accepted.  Just follow Ghini's coding style, write "
"unit tests, concise and abundant, and there should be no problem in "
"having your work included in Ghini's upstream."
msgstr ""

#: ../../building.rst:713
msgid ""
"If your fork got out of sync with Ghini's upstream: read, understand, "
"follow the github guides `configuring a remote for a fork "
"<https://help.github.com/articles/configuring-a-remote-for-a-fork/>`_ and"
" `syncing a fork <https://help.github.com/articles/syncing-a-fork/>`_."
msgstr ""

#: ../../building.rst:719
msgid "closing step"
msgstr ""

#: ../../building.rst:721
msgid ""
"review this workflow. consider this as a guideline, to yourself and to "
"your colleagues. please help make it better and matching the practice."
msgstr ""

#: ../../building.rst:725
msgid "distributing for windows"
msgstr ""

#: ../../building.rst:727
msgid ""
"For building a Windows installer or executable you will need an "
"installation of Windows.  The methods described here has been used "
"successfully on Windows 7, 8 and 10.  Windows Vista should also work but "
"has not been tested."
msgstr ""

#: ../../building.rst:731
msgid ""
"In the remainder of this section we assume you're using a Windows "
"workstation.  We also assume assume you do not use it as your software "
"development platform.  All steps described here are very similar to the "
"steps for a normal Windows :ref:`installation`."
msgstr ""

#: ../../building.rst:736
msgid "py2exe will not work with eggs"
msgstr ""

#: ../../building.rst:739
msgid ""
"Building a Windows executable with py2exe requires packages **not** be "
"installed as eggs.  There are several methods to accomplish this, "
"including:"
msgstr ""

#: ../../building.rst:742
msgid ""
"Using pip to install.  The easiest method is to install into a virtual "
"environment that doesn't currently have any modules installed as eggs "
"using ``pip install .`` as described below.  If you do wish to install "
"over the top of an install with eggs (e.g. the environment created by "
"``devinstall.bat``) you can try ``pip install -I .`` but your mileage may"
" vary."
msgstr ""

#: ../../building.rst:749
msgid "By adding::"
msgstr ""

#: ../../building.rst:754
msgid ""
"to setup.cfg (or similarly ``zip_safe = False`` to ``setuptools.setup()``"
" in ``setup.py``) you can use ``python setup.py install`` but you will "
"need to download and install `Microsoft Visual C++ Compiler for Python "
"2.7 <http://aka.ms/vcpython27>`_ to get any of the C extensions and will "
"need a fresh virtual environment with no dependent packages installed as "
"eggs."
msgstr ""

#: ../../building.rst:760
msgid ""
"Download and install git, Python 2.7 and PyGTK as outlined in the generic"
" :ref:`installation` instructions."
msgstr ""

#: ../../building.rst:763
msgid ""
"Additionally, download and install `NSIS v3 "
"<http://nsis.sourceforge.net/Download>`_."
msgstr ""

#: ../../building.rst:765
msgid "A **reboot** is recommended."
msgstr ""

#: ../../building.rst:767
msgid "we have a script that automates the remaining steps"
msgstr ""

#: ../../building.rst:770
msgid ""
"A batch file is available that can complete the last few steps.  To use "
"it use this command::"
msgstr ""

#: ../../building.rst:775
msgid "``build_win.bat`` accepts 2 arguments:"
msgstr ""

#: ../../building.rst:777
msgid ""
"``/e`` will produce an executable only, skipping the extra step of "
"building an installer, and will copy ``win_gtk.bat`` into place."
msgstr ""

#: ../../building.rst:780
#, python-format
msgid ""
"A path to the location for the virtual environment to use. (defaults to "
"``\"%HOMEDRIVE%%HOMEPATH%\"\\.virtualenvs\\ghi2exe``)"
msgstr ""

#: ../../building.rst:783
msgid ""
"e.g. to produce an executable only and use a virtual environment in a "
"folder beside where you have ghini.desktop you could execute "
"``scripts\\build_win.bat /e ..\\ghi2exe``"
msgstr ""

#: ../../building.rst:787
msgid ""
"Clone ghini.desktop to wherever you want to keep it (replace ``<path-to-"
"keep-ghini>`` with the path of your choice, e.g. "
"``Local\\github\\Ghini\\``) and checkout a production branch "
"(``ghini-1.0`` is recommended as used in the example).  To do this, open "
"a command prompt and type these commands::"
msgstr ""

#: ../../building.rst:798
msgid ""
"Install virtualenv, create a virtual environment and activate it.  With "
"only Python 2.7 on your system (where ``<path-to-venv>`` is the path to "
"where you wish to keep the virtual environment) use::"
msgstr ""

#: ../../building.rst:806
msgid ""
"On systems where Python 3 is also installed you may need to either call "
"pip and virtualenv with absolute paths e.g.  "
"``C:\\Python27\\Scripts\\pip`` or use the Python launcher e.g. ``py -2.7 "
"-m pip`` (run ``python --version`` first to check.  If you get anything "
"other than version 2.7 you'll need to use one of these methods.)"
msgstr ""

#: ../../building.rst:812
msgid "Install dependencies and ghini.desktop into the virtual environment::"
msgstr ""

#: ../../building.rst:817
msgid "Build the executable::"
msgstr ""

#: ../../building.rst:821
msgid ""
"The ``dist`` folder will now contain a full working copy of the software "
"in a frozen, self contained state, that can be transferred however you "
"like and will work in place.  (e.g. placed on a USB flash drive for "
"demonstration purposes or copied manually to ``C:\\Program Files`` with a"
" shortcut created on the desktop).  To start ghini.desktop double click "
"``ghini.exe`` in explorer (or create a shortcut to it). If you have "
"issues with the UI not displaying correctly you need to run the script "
"``win_gtk.bat`` from the ``dist`` folder to set up paths to the GTK "
"components correctly.  (Running ``build_win /e`` will place this script "
"in the dist folder for you or you can copy it from the ``scripts`` folder"
" yourself.)  You will only need to run this once each time the location "
"of the folder changes.  Thereafter ``ghini.exe`` will run as expected."
msgstr ""

#: ../../building.rst:834
msgid "Build the installer::"
msgstr ""

#: ../../building.rst:838
msgid ""
"This should leave a file named ``ghini.desktop-<version>-setup.exe`` in "
"the ``scripts`` folder.  This is your Windows installer."
msgstr ""

#: ../../building.rst:841
msgid "about the installer"
msgstr ""

#: ../../building.rst:844
msgid "Capable of single user or global installs."
msgstr ""

#: ../../building.rst:846
msgid ""
"At this point in time ghini.desktop installed this way will not check or "
"or notify you of any updated version.  You will need to check yourself."
msgstr ""

#: ../../building.rst:850
msgid "Capable of downloading and installing optional extra components:"
msgstr ""

#: ../../building.rst:852
msgid ""
"Apache FOP - If you want to use xslt report templates install FOP. FOP "
"requires Java Runtime. If you do not currently have it installed the "
"installer will let you know and offer to open the Oracle web site for you"
" to download and install it from."
msgstr ""

#: ../../building.rst:857
msgid ""
"MS Visual C runtime - You most likely don't need this but if you have any"
" trouble getting ghini.desktop to run try installing the MS Visual C "
"runtime (e.g. rerun the installer and select this component only)."
msgstr ""

#: ../../building.rst:861
msgid ""
"Can be run silently from the commandline (e.g. for remote deployment) "
"with the following arguments:"
msgstr ""

#: ../../building.rst:864
msgid "``/S`` for silent;"
msgstr ""

#: ../../building.rst:866
msgid "``/AllUser`` (when run as administrator) or ``/CurrentUser``"
msgstr ""

#: ../../building.rst:868
msgid "``/C=[gFC]`` to specify components where:"
msgstr ""

#: ../../building.rst:870
msgid ""
"``g`` = Deselect the main ghini.desktop component (useful for adding "
"optional component after an initial install)"
msgstr ""

#: ../../building.rst:873
msgid "``F`` = select Apache FOP"
msgstr ""

#: ../../building.rst:875
msgid "``C`` = select MS Visual C runtime"
msgstr ""

#: ../../editing.rst:4
msgid "Editing and Inserting Data"
msgstr ""

#: ../../editing.rst:6
msgid ""
"The main way that we add or change information in Ghini is by using the "
"editors.  Each basic type of data has its own editor.  For example there "
"is a Family editor, a Genus editor, an Accession editor, etc."
msgstr ""

#: ../../editing.rst:10
msgid ""
"To create a new record click on the :menuselection:`Insert` menu on the "
"menubar and then select the type of record your would like to create.  "
"This opens a new blank editor for the type."
msgstr ""

#: ../../editing.rst:14
msgid ""
"To edit an existing record in the database right click on an item in the "
"search results and select :menuselection:`Edit` from the popup menu.  "
"This opens an editor that allows you to change the values on the record "
"that you selected."
msgstr ""

#: ../../editing.rst:19
msgid ""
"Most types also have children which you can add by right clicking on the "
"parent and selecting \"Add ???...\" on the context menu.  For example, a "
"Family has Genus children: you can add a Genus to a Family by right "
"clicking on a Family and selecting \"Add genus\"."
msgstr ""

#: ../../editing.rst:26
msgid "Notes"
msgstr "ملاحظات"

#: ../../editing.rst:27
msgid ""
"Almost all of the editors in Ghini have a *Notes* tab which should work "
"the same regardless of which editor you are using."
msgstr ""

#: ../../editing.rst:30
msgid ""
"If you enter a web address in a note then the link shows up in the Links "
"box when the item your are editing is selected in the search results."
msgstr ""

#: ../../editing.rst:33
msgid ""
"You can browse the notes for an item in the database using the Notes box "
"at the bottom of the screen.  The Notes box is desensitized if the "
"selected item does not have any notes."
msgstr ""

#: ../../editing.rst:39
msgid "Family"
msgstr ""

#: ../../editing.rst:40
msgid "The Family editor allows you to add or change a botanical family."
msgstr ""

#: ../../editing.rst:42
msgid ""
"The *Family* field on the editor lets you change the epithet of the "
"family. The Family field is required."
msgstr ""

#: ../../editing.rst:45
msgid ""
"The *Qualifier* field lets you change the family qualifier.  The value "
"can either be *sensu lato*, *sensu stricto*, or nothing."
msgstr ""

#: ../../editing.rst:48
msgid ""
"*Synonyms* allow you to add other families that are synonyms with the "
"family you are currently editing.  To add a new synonyms type in a family"
" name in the entry.  You must select a family name from the list of "
"completions. Once you have selcted a family name that you want to add as "
"a synonym click on the Add button next to the synonym list and the "
"software adds the selected synonym to the list.  To remove a synonym, "
"select the synonym from the list and click on the Remove button."
msgstr ""

#: ../../editing.rst:56 ../../editing.rst:91 ../../editing.rst:115
msgid "To cancel your changes without saving then click on the *Cancel* button."
msgstr ""

#: ../../editing.rst:58
msgid "To save the family you are working on then click *OK*."
msgstr ""

#: ../../editing.rst:60
msgid ""
"To save the family you are working on and add a genus to it then click on"
" the *Add Genera* button."
msgstr ""

#: ../../editing.rst:63
msgid ""
"To add another family when you are finished editing the current one click"
" on the *Next* button on the bottom.  This saves the current family and "
"opens a new blank family editor."
msgstr ""

#: ../../editing.rst:69
msgid "Genus"
msgstr ""

#: ../../editing.rst:71
msgid "The Genus editor allows you to add or change a botanical genus."
msgstr ""

#: ../../editing.rst:73
msgid ""
"The *Family* field on the genus editor allows you to choose the family "
"for the genus.  When you begin type a family name it will show a list of "
"families to choose from.  The family name must already exist in the "
"database before you can set it as the family for the genus."
msgstr ""

#: ../../editing.rst:78
msgid "The *Genus* field allows you to set the genus for this entry."
msgstr ""

#: ../../editing.rst:80
msgid ""
"The *Author* field allows you to set the name or abbreviation of the "
"author(s) for the genus."
msgstr ""

#: ../../editing.rst:83
msgid ""
"*Synonyms* allow you to add other genera that are synonyms with the genus"
" you are currently editing.  To add a new synonyms type in a genus name "
"in the entry.  You must select a genus name from the list of completions."
"  Once you have selcted a genus name that you want to add as a synonym "
"click on the Add button next to the synonym list and it will add the "
"selected synonym to the list.  To remove a synonym select the synonym "
"from the list and click on the Remove button."
msgstr ""

#: ../../editing.rst:93
msgid "To save the genus you are working on then click *OK*."
msgstr ""

#: ../../editing.rst:95
msgid ""
"To save the genus you are working on and add a species to it then click "
"on the *Add Species* button."
msgstr ""

#: ../../editing.rst:98
msgid ""
"To add another genus when you are finished editing the current one click "
"on the *Next* button on the bottom.  This will save the current genus and"
" open a new blank genus editor."
msgstr ""

#: ../../editing.rst:104
msgid "Species/Taxon"
msgstr ""

#: ../../editing.rst:106
msgid ""
"For historical reasons called a `species`, but by this we mean a `taxon` "
"at rank `species` or lower.  It represents a unique name in the database."
"  The species editor allows you to construct the name as well as "
"associate metadata with the taxon such as its distribution, synonyms and "
"other information."
msgstr ""

#: ../../editing.rst:112
msgid ""
"The *Infraspecific parts* in the species editor allows you to specify the"
" `taxon` further than at `species` rank."
msgstr ""

#: ../../editing.rst:117
msgid "To save the species you are working on then click *OK*."
msgstr ""

#: ../../editing.rst:119
msgid ""
"To save the species you are working on and add an accession to it then "
"click on the *Add Accession* button."
msgstr ""

#: ../../editing.rst:122
msgid ""
"To add another species when you are finished editing the current one "
"click on the *Next* button on the bottom.  This will save the current "
"species and open a new blank species editor."
msgstr ""

#: ../../editing.rst:127
msgid "Accessions"
msgstr ""

#: ../../editing.rst:129
msgid ""
"The Accession editor allows us to add an accession to a species.  In "
"Ghini an accession represents a group of plants or clones that are of the"
" same taxon, are of the same propagule type (or treatment), were received"
" from the same source, were received at the same time."
msgstr ""

#: ../../editing.rst:134
msgid "Choose the Taxon name, add one if you forgot to do that in advance."
msgstr ""

#: ../../editing.rst:136
msgid ""
"You may note uncertainty in identification by adding an identification "
"qualifier, at the proper rank, so you can for example have a plant "
"initially identified as *Iris* cf. *florentina* by choosing *Iris "
"florentina* in the taxon name, identification qualifier 'cf.', qualified "
"rank 'species'."
msgstr ""

#: ../../editing.rst:141
msgid "Type the Accession ID, preferably also the Quantity received."
msgstr ""

#: ../../editing.rst:145
msgid "Accession Source"
msgstr ""

#: ../../editing.rst:147
msgid ""
"The source of the accessions lets you add more information about where "
"this accession came from.  Select a Contact from the drop-down list, or "
"choose \"Garden Propagation\", which is placed as a default first item in"
" the list of contacts."
msgstr ""

#: ../../editing.rst:152
msgid "A Garden Propagation is the result of successful Propagation."
msgstr ""

#: ../../editing.rst:154
msgid ""
"When accessing material from a Garden Propagation, you would initially "
"leave the first tab alone (General) and start from the second tab "
"(Source). Select as Contact \"Garden Propagation\", indicate which plant "
"is the parent plant and choose among the still not completely accessed "
"propagations the one you intend to add as an accession in your database."
msgstr ""

#: ../../editing.rst:160
msgid ""
"Once you select a propagation, the software will set several fields in "
"the General tab, which you can now review.  The Taxon (maybe you managed "
"to obtain something slightly different than the parent plant). The "
"Initial quantity (in case not all plants go in the same accession). The "
"Type of Material, inferred from the propagation type."
msgstr ""

#: ../../editing.rst:170 ../../use_cases-jbq.rst:669
#: ../../use_cases-jbq.rst:704
msgid "Plant"
msgstr ""

#: ../../editing.rst:172
msgid ""
"A ``Plant`` in the Ghini database describes an individual plant in your "
"collection. A plant belongs to an accession, and it has a specific "
"location."
msgstr ""

#: ../../editing.rst:176
msgid "Creating multiple plants"
msgstr ""

#: ../../editing.rst:178
msgid ""
"You can create multiple Plants by using ranges in the code entry. This is"
" only allowed when creating new plants and it is not possible when "
"editing existing Plants in the database."
msgstr ""

#: ../../editing.rst:182
msgid ""
"For example the range, 3-5 will create plant with code 3,4,5.  The range "
"1,4-7,25 will create plants with codes 1,4,5,6,7,25."
msgstr ""

#: ../../editing.rst:185
msgid ""
"When you enter the range in the plant code entry the entry will turn blue"
" to indicate that you are now creating multiple plants.  Any fields that "
"are set while in this mode will be copied to all the plants that are "
"created."
msgstr ""

#: ../../editing.rst:193
msgid "Pictures"
msgstr ""

#: ../../editing.rst:195
msgid ""
"Just as almost all objects in the Ghini database can have *Notes* "
"associated to them, Plants and Species can also have *Pictures*: next to "
"the tab for Notes, the Plant and the Species editors contain an extra tab"
" called \"Pictures\". You can associate as many pictures as you might "
"need to a plant and to a species object."
msgstr ""

#: ../../editing.rst:201
msgid ""
"When you associate a picture to an object, the file is copied in the "
"*pictures* folder, and a miniature (500x500) is generated and copied in "
"the `thumbnails` folder inside of the pictures folder."
msgstr ""

#: ../../editing.rst:205
msgid ""
"As of Ghini-1.0.62, Pictures are not kept in the database. To ensure "
"pictures are available on all terminals where you have installed and "
"configured Ghini, you can use a network drive, or a file sharing service "
"like Tresorit or Dropbox."
msgstr ""

#: ../../editing.rst:210
msgid ""
"Remember that you have configured the pictures root folder when you "
"specified the details of your database connection. Again, you should make"
" sure that the pictures root folder is shared with your file sharing "
"service of choice."
msgstr ""

#: ../../editing.rst:215
msgid ""
"When a Plant or a Species in the current selection is highlighted, its "
"pictures are displayed in the pictures pane, the pane left of the "
"information pane. When an Accession in the selection is highlighted, any "
"picture associated to the plants in the highlighted accession are "
"displayed in the pictures pane."
msgstr ""

#: ../../editing.rst:221
msgid ""
"In Ghini-1.0, pictures are special notes, with category \"<picture>\", "
"and text the path to the file, relative to the pictures root folder.  In "
"the Notes tab, Picture notes will show as normal notes, and you can edit "
"them without limitations."
msgstr ""

#: ../../editing.rst:226
msgid ""
"A Plant is a physical object, so you associate to it pictures taken of "
"that individual plant, taken at any relevant development stage of the "
"plant, possibly helping its identification."
msgstr ""

#: ../../editing.rst:230
msgid ""
"Species are abstract objects, so you would associate to it pictures "
"showing the characteristic elements of the species, so it makes sense to "
"associate a flora illustration to it. You can also do that by reference: "
"go to the Notes tab, add a note and specify as category \"<picture>\", "
"then in the text field you type the URL for the illustration of your "
"choice."
msgstr ""

#: ../../editing.rst:238
msgid "Locations"
msgstr ""

#: ../../editing.rst:240
msgid "The Location editor"
msgstr ""

#: ../../editing.rst:243
msgid "danger zone"
msgstr ""

#: ../../editing.rst:245
msgid ""
"The location editor contains an initially hidden section named *danger "
"zone*. The widgets contained in this section allow the user to merge the "
"current location into a different location, letting the user correct "
"spelling mistakes or implement policy changes."
msgstr ""

#: ../../ghini-family.rst:3
msgid "the Ghini family"
msgstr ""

#: ../../ghini-family.rst:5
msgid ""
"Let's start by recalling the composition of the Ghini family, as shown in"
" the diagram:"
msgstr ""

#: ../../ghini-family.rst:9
msgid ""
"You have learned how to use ghini.desktop, here we introduce the other "
"members of the family, and their interaction."
msgstr ""

#: ../../ghini-family.rst:20
msgid ""
"ghini.pocket is an Android app which you can install from the `play store"
" <https://play.google.com/store/apps/details?id=me.ghini.pocket>`_. "
"ghini.pocket is definitely the tool you will use most, next to "
"ghini.desktop."
msgstr ""

#: ../../ghini-family.rst:26
msgid ""
"With ghini.pocket you always have the latest snapshot of your database "
"with you."
msgstr ""

#: ../../ghini-family.rst:29
msgid "Type an accession number, or scan its barcode or QR label, and you know:"
msgstr ""

#: ../../ghini-family.rst:31
msgid "the identification of the plant,"
msgstr ""

#: ../../ghini-family.rst:32
msgid "whether it already has pictures,"
msgstr ""

#: ../../ghini-family.rst:33
msgid "when it entered the garden and"
msgstr ""

#: ../../ghini-family.rst:34
msgid "from which source."
msgstr ""

#: ../../ghini-family.rst:36
msgid "Apart as a quick data viewer, you can use ghini.pocket for..."
msgstr ""

#: ../../ghini-family.rst:38
msgid "data correction"
msgstr ""

#: ../../ghini-family.rst:41
msgid ""
"If by your judgement, some of the information is incorrect, or if the "
"plant is flowering and you want to immediately take a picture and store "
"it in the database, you do not need take notes on paper, nor follow "
"convolute procedures: ghini.pocket lets you write your corrections in a "
"log file, take pictures associated to the plant, and you will import this"
" information straight into the database, with further minimal user "
"intervention."
msgstr ""

#: ../../ghini-family.rst:49
msgid "inventory review"
msgstr ""

#: ../../ghini-family.rst:52
msgid ""
"The initial idea on which we based ghini.pocket is still one of its "
"functionalities: inventory review."
msgstr ""

#: ../../ghini-family.rst:55
msgid ""
"Using ghini.pocket, reviewing the inventory of a greenhouse, in "
"particular if you have QR codes on plant labels, goes as fast as you can "
"walk: simply enter the location code of your greenhouse, reset the log, "
"then one by one scan the plant codes of the plants in the greenhouse.  No"
" further data collection action is required."
msgstr ""

#: ../../ghini-family.rst:61
msgid ""
"When you're done, import the log in ghini.desktop.  The procedure "
"available in ghini.desktop includes adding unknown but labelled plants in"
" the database, marking as lost/dead all plants that the database reports "
"as alive and present in the inventoried location, but were not found "
"during the inventory."
msgstr ""

#: ../../ghini-family.rst:67
msgid "taxonomic support"
msgstr ""

#: ../../ghini-family.rst:70
msgid ""
"As a bonus, ghini.pocket contains a phonetic genus search, and a quite "
"complete database of botanic taxa with rank between order and genus, "
"including tribes, and synonymies."
msgstr ""

#: ../../ghini-family.rst:74 ../../ghini-family.rst:92
#: ../../ghini-family.rst:122
msgid "check further :any:`interaction among components`."
msgstr ""

#: ../../ghini-family.rst:84
msgid "ghini.web is a web server, written in nodejs."
msgstr ""

#: ../../ghini-family.rst:86
msgid ""
"Its most visible part runs at http://gardens.ghini.me and shows as a map "
"of the world, where you browse gardens and search their published "
"collection."
msgstr ""

#: ../../ghini-family.rst:90
msgid "It also serves configuration data to ghini.tour instances."
msgstr ""

#: ../../ghini-family.rst:98
msgid "ghini.tour"
msgstr ""

#: ../../ghini-family.rst:103
msgid ""
"ghini.tour is an Android app which you can install from the `play store "
"<https://play.google.com/store/apps/details?id=me.ghini.tour>`_."
msgstr ""

#: ../../ghini-family.rst:107
msgid ""
"People visiting your garden will install ghini.tour on their phone or "
"tablet, enjoy having a map of the garden, knowing where they are, and "
"will be able to listen to audio files that you have placed as virtual "
"information panels in strategic spots in your garden."
msgstr ""

#: ../../ghini-family.rst:112
msgid "world view"
msgstr ""

#: ../../ghini-family.rst:115
msgid "at startup, you see the world and gardens.  select a garden, and enter."
msgstr ""

#: ../../ghini-family.rst:117
msgid "garden view"
msgstr ""

#: ../../ghini-family.rst:120
msgid "when viewing at garden level, you see panels.  select a panel, and listen."
msgstr ""

#: ../../ghini-family.rst:128
msgid "data streams between software components"
msgstr ""

#: ../../ghini-family.rst:130
msgid ""
"This section contains technical information for database managers and "
"software developers."
msgstr ""

#: ../../ghini-family.rst:136
msgid ""
"In the diagram showing the composition of the Ghini family, the alert "
"reader noticed how different arrows representing different data flows, "
"had different colours: some are deep green, some have a lighter tint."
msgstr ""

#: ../../ghini-family.rst:142
msgid ""
"Deeper green streams are constant flows of data, representing the core "
"activity of a component, eg: the interaction between ghini.desktop and "
"its database server, or your internet browser and ghini.web."
msgstr ""

#: ../../ghini-family.rst:146
msgid ""
"Lighter green streams are import/export actions, initiated by the user at"
" the command panel of ghini.desktop, or in the ghini.tour settings page."
msgstr ""

#: ../../ghini-family.rst:149
msgid ""
"This is the same graph, in which all import data streams have been given "
"an identifier."
msgstr ""

#: ../../ghini-family.rst:154
msgid "d2p: copy a snapshot of the desktop database to ghini.pocket"
msgstr ""

#: ../../ghini-family.rst:157
msgid "export the desktop database to a pocket snapshot"
msgstr ""

#: ../../ghini-family.rst:158
msgid "copy the snapshot to the handheld device"
msgstr ""

#: ../../ghini-family.rst:160
msgid ""
"ghini.pocket integrates closely with ghini.desktop, and it's not a tool "
"for the casual nor the external user.  One task of your garden database "
"manager is to regularly copy an updated database snapshot to your Android"
" device."
msgstr ""

#: ../../ghini-family.rst:165
msgid ""
"We advise enabling USB debugging on the device.  In perspective, this "
"will allow ghini.desktop writing directily into the ghini.pocket device."
msgstr ""

#: ../../ghini-family.rst:168
msgid ""
"Export the file from ghini.desktop, call the file pocket.db, copy it to "
"the phone::"
msgstr ""

#: ../../ghini-family.rst:172
msgid ""
"The above location is valid even if your phone does not have a memory "
"card."
msgstr ""

#: ../../ghini-family.rst:174
msgid ""
"Other options include bluetooth, or whatever other way you normally use "
"to copy regular files into your Android device."
msgstr ""

#: ../../ghini-family.rst:179
msgid ""
"p2d: import from the ghini.pocket log file and pictures into the central "
"database"
msgstr ""

#: ../../ghini-family.rst:182
msgid ""
"even if we're still calling it “inventory log”, ghini.pocket's log "
"contains more than just inventory corrections."
msgstr ""

#: ../../ghini-family.rst:185
msgid "produce a log on the handheld device"
msgstr ""

#: ../../ghini-family.rst:186
msgid "import the log in the desktop database"
msgstr ""

#: ../../ghini-family.rst:188
msgid ""
"first of all, copy the collected information from ghini.pocket into your "
"computer::"
msgstr ""

#: ../../ghini-family.rst:194
msgid "then use ghini.desktop to import this information into your database."
msgstr ""

#: ../../ghini-family.rst:197
msgid "d2w: send a selection of your garden data to ghini.web"
msgstr ""

#: ../../ghini-family.rst:200
msgid ""
"Offer a selection of your garden data to a central ghini.web site, so "
"online virtual visitors can browse it.  This includes plant "
"identification and their geographic location."
msgstr ""

#: ../../ghini-family.rst:204 ../../ghini-family.rst:219
#: ../../ghini-family.rst:231
msgid "content of this flow:"
msgstr ""

#: ../../ghini-family.rst:206
msgid "garden: coords, name, zoom level (for initial view)"
msgstr ""

#: ../../ghini-family.rst:207
msgid "plants: coords, identification, zoom level (for visibility)"
msgstr ""

#: ../../ghini-family.rst:208
msgid "species: binomial, phonetic approximation"
msgstr ""

#: ../../ghini-family.rst:212
msgid "g2w: add geographic non-botanic data to ghini.web"
msgstr ""

#: ../../ghini-family.rst:215
msgid ""
"Write geographic information about non-botanic data (ie: point of "
"interest within the garden, required by ghini.tour) in the central "
"ghini.web site."
msgstr ""

#: ../../ghini-family.rst:221
msgid "virtual panels: coords, title, audio file"
msgstr ""

#: ../../ghini-family.rst:222
msgid "photos: coords, title, picture"
msgstr ""

#: ../../ghini-family.rst:224
msgid ""
"virtual panels don't necessarily have an associated photo, photos don't "
"necessarily have an associated audio file."
msgstr ""

#: ../../ghini-family.rst:228
msgid "w2t: importing locations and POIs from ghini.web to tour"
msgstr ""

#: ../../ghini-family.rst:233
msgid "Garden (coords, name, zoom level)"
msgstr ""

#: ../../ghini-family.rst:234
msgid "Points of Interest (coords, title, audio file, photo)"
msgstr ""

#: ../../goal.rst:2
msgid "Ghini's goals and highlights"
msgstr ""

#: ../../goal.rst:4
msgid ""
"Should you use this software? This question is for you to answer. We "
"trust that if you manage a botanic collection, you will find Ghini overly"
" useful and we hope that this page will convince you about it."
msgstr ""

#: ../../goal.rst:8
msgid ""
"This page shows how Ghini makes software meet the needs of a botanic "
"garden."
msgstr ""

#: ../../goal.rst:10
msgid ""
"If you already know, and all you want is to do something practical, just"
"  `install the software <installing.html>`_, then check our `user-"
"contributed recipes <use_cases.html>`_."
msgstr ""

#: ../../goal.rst:13
msgid "Botanic Garden"
msgstr ""

#: ../../goal.rst:15
msgid ""
"According to the Wikipedia, »A botanic(al) garden is a garden dedicated "
"to the collection, cultivation and display of a wide range of plants "
"labelled with their botanical names«, and still according to the "
"Wikipedia, »a garden is a planned space, usually outdoors, set aside for "
"the display, cultivation, and enjoyment of plants and other forms of "
"nature.«"
msgstr ""

#: ../../goal.rst:21
msgid ""
"So we have in a botanic garden both the physical space, the garden, as "
"its dynamic, the activities to which the garden is dedicated, activities "
"which makes us call the garden a botanic garden."
msgstr ""

#: ../../goal.rst:27
msgid "**the physical garden**"
msgstr ""

#: ../../goal.rst:31
msgid "**collection related activities in the garden**"
msgstr ""

#: ../../goal.rst:36
msgid "Botanic Garden Software"
msgstr ""

#: ../../goal.rst:38
msgid ""
"At the other end of our reasoning we have the application program Ghini, "
"and again quoting the Wikipedia, »an application program is a computer "
"program designed to perform a group of coordinated functions, tasks, or "
"activities for the benefit of the user«, or, in short, »designed to help "
"people perform an activity«."
msgstr ""

#: ../../goal.rst:44
msgid ""
"Data and algorithms within Ghini have been designed to represent the "
"physical space and the dynamic of a botanic garden."
msgstr ""

#: ../../goal.rst:49 ../../searching.rst:160
msgid "**core structure of Ghini's database**"
msgstr ""

#: ../../goal.rst:51
msgid ""
"In the above figure, a simplified view on the database, the highlighted "
"blocks are those relative to objects you definitely need insert in the "
"database."
msgstr ""

#: ../../goal.rst:55
msgid ""
"We distinguish three main sections in the database.  Start reading the "
"graph from the right hand side, with the relevant **Taxonomy** "
"information, then step to administering your **Collection**, and finally "
"consider the physical **Garden**."
msgstr ""

#: ../../goal.rst:60
msgid ""
"The central element in Ghini's point of view is the ``Accession``. "
"Following its links to other database objects lets us better understand "
"the structure:"
msgstr ""

#: ../../goal.rst:63
msgid "**Accession links Planting to Species**"
msgstr ""

#: ../../goal.rst:65
msgid ""
"An ``Accession`` represents the action of receiving this specific plant "
"material in the garden. As such, ``Accession`` is an abstract concept, it"
" links physical living ``Plantings`` —groups of plants placed each at a "
"``Location`` in the garden— to the corresponding ``Species``. It is not "
"the same as an acquisition from a source, because in a single acquisition"
" you can access material of more than one species. In other words: a "
"single aquisition can embark multiple accessions. An ``Accession`` has "
"zero or more ``Plantings`` associated to it (0..n), and it is at all "
"times connected to exactly 1 ``Species``. Each ``Planting`` belongs to "
"exactly one ``Accession``, each ``Species`` may have multiple "
"``Accessions`` relating to it."
msgstr ""

#: ../../goal.rst:74
msgid ""
"An ``Accession`` stays in the database even if all of its ``Plantings`` "
"have been removed, sold, or have died. Identifying the ``Species`` of an "
"``Accession`` consistently connects all its ``Plantings`` to the "
"``Species``."
msgstr ""

#: ../../goal.rst:79
msgid "**Accession at the base of the history of your plants**"
msgstr ""

#: ../../goal.rst:81
msgid ""
"``Propagations`` and ``Contacts`` provide plant material for the garden; "
"this information is optional and smaller collectors might prefer to leave"
" this aside. A ``Propagation`` trial may be unsuccessful, most of the "
"time it will result in exactly one accession, but it may also produce "
"slightly different taxa, so the database allows for zero  or more "
"``Accessions`` per ``Propagation`` (0..n). Also a ``Contact`` may provide"
" zero or more ``Accessions`` (0..n)."
msgstr ""

#: ../../goal.rst:88
msgid "**Accession and Verification opinions**"
msgstr ""

#: ../../goal.rst:90
msgid ""
"Specialists may formulate their opinion about the ``Species`` to which an"
" ``Accession`` belongs, by providing a ``Verification``, signing it, and "
"stating the applicable level of confidence."
msgstr ""

#: ../../goal.rst:94
msgid "**Accessing your own Propagations**"
msgstr ""

#: ../../goal.rst:96
msgid ""
"If an ``Accession`` was obtained in the garden nursery from a successful "
"``Propagation``, the ``Propagation`` links the ``Accession`` and all of "
"its ``Plantings`` to a single parent ``Planting``, the seed or the "
"vegetative parent."
msgstr ""

#: ../../goal.rst:103
msgid ""
"Even after the above explanation, new users generally still ask why they "
"need pass through an ``Accession`` screen while all they want is to "
"insert a ``Plant`` in the collection, and again: what is this "
"\"accession\" thing anyway?  Most discussions on the net don't make the "
"concept any clearer. One of our users gave an example which I'm glad to "
"include in Ghini's documentation."
msgstr ""

#: ../../goal.rst
msgid "use case"
msgstr ""

#: ../../goal.rst:110
msgid ""
"At the beginning of 2007 we got five seedlings of *Heliconia longa* (a "
"plant ``Species``) from our neighbour (the ``Contact`` source). Since it "
"was the first acquisition of the year, we named them 2007.0001 (we gave "
"them a single unique ``Accession`` code, with quantity 5) and we planted "
"them all together at one ``Location`` as a single ``Planting``, also with"
" quantity 5."
msgstr ""

#: ../../goal.rst:118
msgid ""
"At the time of writing, nine years later, ``Accession`` 2007.0001 has 6 "
"distinct ``Plantings``, each at a different ``Locations`` in our garden, "
"obtained vegetatively (asexually) from the original 5 plants. Our only "
"intervention was splitting, moving, and of course writing this "
"information in the database. Total plant quantity is above 40."
msgstr ""

#: ../../goal.rst:125
msgid ""
"New ``Plantings`` obtained by (assisted) sexual ``Propagation`` come in "
"our database under different ``Accession`` codes, where our garden is the"
" ``Contact`` source and where we know which of our ``Plantings`` is the "
"seed parent."
msgstr ""

#: ../../goal.rst:130
msgid "the above three cases translate into several short usage stories:"
msgstr ""

#: ../../goal.rst:132
msgid ""
"activate the menu Insert → Accession, verify the existence and "
"correctness of the ``Species`` *Heliconia longa*, specify the initial "
"quantity of the ``Accession``; add its ``Planting`` at the desired "
"``Location``."
msgstr ""

#: ../../goal.rst:136
msgid ""
"edit ``Planting`` to correct the amount of living plants — repeat this as"
" often as necessary."
msgstr ""

#: ../../goal.rst:138
msgid ""
"edit ``Planting`` to split it at separate ``Locations`` — this produces a"
" different ``Planting`` under the same ``Accession``."
msgstr ""

#: ../../goal.rst:140
msgid "edit ``Planting`` to add a (seed) ``Propagation``."
msgstr ""

#: ../../goal.rst:141
msgid "edit ``Planting`` to update the status of the ``Propagation``."
msgstr ""

#: ../../goal.rst:142
msgid ""
"activate the menu Insert → Accession to associate an accession to a "
"successful ``Propagation`` trial; add the ``Planting`` at the desired "
"``Location``."
msgstr ""

#: ../../goal.rst:146
msgid ""
"In particular the ability to split a ``Planting`` at several different "
"``Locations`` and to keep all uniformly associated to one ``Species``, or"
" the possibility to keep information about ``Plantings`` that have been "
"removed from the collection, help justify the presence of the "
"``Accession`` abstraction level."
msgstr ""

#: ../../goal.rst:153
msgid "Hypersimplified view"
msgstr ""

#: ../../goal.rst:155
msgid ""
"People using Ghini only sporadically may prefer ignoring the database "
"structure and look at it as two nested sequences of objects, each element"
" of the sequence being necessary to add element at the next level."
msgstr ""

#: ../../goal.rst:159
msgid ""
"In order to get down to an Accession, you will need four levels, as in "
"this example:"
msgstr ""

#: ../../goal.rst:164
msgid ""
"A quite complete set of Families and Genera are inserted in your database"
" at the moment Ghini initializes it. So all you need is adding Species "
"and Accessions, in this order."
msgstr ""

#: ../../goal.rst:168
msgid ""
"When placing a physical Plant (relative to an Accession) somewhere in the"
" garden, you need to describe this \"somewhere\" digitally, as a Location"
" in the garden."
msgstr ""

#: ../../goal.rst:177
msgid "Highlights"
msgstr ""

#: ../../goal.rst:178
msgid "not-so-brief list of highlights, meant to whet your appetite."
msgstr ""

#: ../../goal.rst:181
msgid "taxonomic information"
msgstr ""

#: ../../goal.rst:183
msgid ""
"When you first start Ghini, and connect to a database, Ghini will "
"initialize the database not only with all tables it needs to run, but it "
"will also populate the taxon tables for ranks family and genus, using the"
" data from the “RBG Kew's Family and Genera list from Vascular Plant "
"Families and Genera compiled by R. K. Brummitt and published by the Royal"
" Botanic Gardens, Kew in 1992”.  In 2015 we have reviewed the data "
"regarding the Orchidaceae, using “Tropicos, botanical information system "
"at the Missouri Botanical Garden - www.tropicos.org” as a source."
msgstr ""

#: ../../goal.rst:193
msgid "importing data"
msgstr ""

#: ../../goal.rst:195
msgid ""
"Ghini will let you import any data you put in an intermediate json "
"format. What you import will complete what you already have in the "
"database. If you need help, you can ask some Ghini professional to help "
"you transform your data into Ghini's intermediate json format."
msgstr ""

#: ../../goal.rst:201
msgid "synonyms"
msgstr ""

#: ../../goal.rst:203
msgid ""
"Ghini will allow you define synonyms for species, genera, families. Also "
"this information can be represented in its intermediate json format and "
"be imported in an existing Ghini database."
msgstr ""

#: ../../goal.rst:208
msgid "scientific responsible"
msgstr ""

#: ../../goal.rst:210
msgid ""
"Ghini implements the concept of 'accession', intermediate between "
"physical plant (or a group thereof) and abstract taxon. Each accession "
"can associate the same plants to different taxa, if two taxonomists do "
"not agree on the identification: each taxonomist can have their say and "
"do not need overwrite each other's work. All verifications can be found "
"back in the database, with timestamp and signature."
msgstr ""

#: ../../goal.rst:218
msgid "helps off-line identification"
msgstr ""

#: ../../goal.rst:220
msgid ""
"Ghini allows you associate pictures to physical plants, this can help "
"recognize the plant in case a sticker is lost, or help taxonomic "
"identification if a taxonomist is not available at all times."
msgstr ""

#: ../../goal.rst:225
msgid "exports and reports"
msgstr ""

#: ../../goal.rst:227
msgid ""
"Ghini will let you export a report in whatever textual format you need. "
"It uses a powerful templating engine named 'mako', which will allow you "
"export the data in a selection to whatever format you need. Once "
"installed, a couple of examples are available in the mako subdirectory."
msgstr ""

#: ../../goal.rst:233
msgid "annotate your info"
msgstr ""

#: ../../goal.rst:235
msgid ""
"You can associate notes to plants, accessions, species, .... Notes can be"
" categorized and used in searches or reports."
msgstr ""

#: ../../goal.rst:239
msgid "garden or herbarium"
msgstr ""

#: ../../goal.rst:241
msgid "Management of plant locations."
msgstr ""

#: ../../goal.rst:244
msgid "database history"
msgstr ""

#: ../../goal.rst:246
msgid ""
"All changes in the database is stored in the database, as history log. "
"All changes are 'signed' and time-stamped.  Ghini makes it easy to "
"retrieve the list of all changes in the last working day or week, or in "
"any specific period in the past."
msgstr ""

#: ../../goal.rst:252
msgid "simple and powerful search"
msgstr ""

#: ../../goal.rst:254
msgid ""
"Ghini allows you search the database using simple keywords, e.g.: the "
"name of the location or a genus name, or you can write more complex "
"queries, which do not reach the complexity of SQL but allow you a decent "
"level of detail localizing your data."
msgstr ""

#: ../../goal.rst:260
msgid "database agnostic"
msgstr ""

#: ../../goal.rst:262
msgid ""
"Ghini is not a database management system, so it does not reinvent the "
"wheel. It works storing its data in a SQL database, and it will connect "
"to any database management system which accepts a SQLAlchemy connector. "
"This means any reasonably modern database system and includes MySQL, "
"PostgreSQL, Oracle. It can also work with sqlite, which, for single user "
"purposes is quite sufficient and efficient. If you connect Ghini to a "
"real database system, you can consider making the database part of a LAMP"
" system (Linux-Apache-MySQL-Php) and include your live data on your "
"institution web site."
msgstr ""

#: ../../goal.rst:273
msgid "language agnostic"
msgstr ""

#: ../../goal.rst:275
msgid ""
"The program was born in English and all its technical and user "
"documentation is first written in that language. Both technical and user "
"documentation use ``gettext``, an advanced tool for semi-automatic "
"translation."
msgstr ""

#: ../../goal.rst:279
msgid ""
"The program has been translated and can be used in various other "
"languages, including Spanish (97%), French (82%), Portuguese (71%), to "
"name some Southern American languages, as well as Ukrainian (100%) and "
"Czech (71%)."
msgstr ""

#: ../../goal.rst:283
msgid ""
"Translation of documentation goes a bit slower, with only Ukrainian, "
"Spanish and Italian at more than 50%."
msgstr ""

#: ../../goal.rst:287
msgid "platform agnostic"
msgstr ""

#: ../../goal.rst:289
msgid ""
"Installing Ghini on Windows is an easy and linear process, it will not "
"take longer than 10 minutes. Ghini was born on Linux and installing it on"
" ubuntu, fedora or debian is consequently even easier. MacOSX being based"
" on unix, it is possible to successfully run the Linux installation "
"procedure on any recent Apple computer, after a few preparation steps."
msgstr ""

#: ../../goal.rst:296
msgid "easily updated"
msgstr ""

#: ../../goal.rst:298
msgid ""
"The installation process will produce an updatable installation, where "
"updating it will take less than one minute. Depending on the amount of "
"feedback we receive, we will produce updates every few days or once in a "
"while."
msgstr ""

#: ../../goal.rst:304
msgid "unit tested"
msgstr ""

#: ../../goal.rst:306
msgid ""
"Ghini is continuously and extensively unit tested, something that makes "
"regression of functionality close to impossible. Every update is "
"automatically quality checked, on the Travis Continuous Integration "
"service. Integration of TravisCI with the github platform will make it "
"difficult for us to release anything which has a single failing unit "
"test."
msgstr ""

#: ../../goal.rst:312
msgid ""
"Most changes and additions we make, come with some extra unit test, which"
" defines the behaviour and will make any undesired change easily visible."
msgstr ""

#: ../../goal.rst:316
msgid "customizable/extensible"
msgstr ""

#: ../../goal.rst:318
msgid ""
"Ghini is extensible through plugins and can be customized to suit the "
"needs of the institution."
msgstr ""

#: ../../imex.rst:2
msgid "Importing and Exporting Data"
msgstr ""

#: ../../imex.rst:4
msgid ""
"Although Ghini can be extended through plugins to support alternate "
"import and export formats, by default it can only import and export comma"
" separated values files or CSV."
msgstr ""

#: ../../imex.rst:8
msgid ""
"There is some support for exporting to the Access for Biological "
"Collections Data it is limited."
msgstr ""

#: ../../imex.rst:11
msgid ""
"There is also limited support for exporting to an XML format that more or"
" less reflects exactly the tables and row of the database."
msgstr ""

#: ../../imex.rst:14
msgid "Exporting ABCD and XML will not be covered here."
msgstr ""

#: ../../imex.rst:16
msgid ""
"Importing files will most likely destroy any data you have in the "
"database so make sure you have backed up your data."
msgstr ""

#: ../../imex.rst:20
msgid "Importing from CSV"
msgstr ""

#: ../../imex.rst:21
msgid ""
"In general it is best to only import CSV files into Ghini that were "
"previously exported from Ghini. It is possible to import any CSV file but"
" that is more advanced that this doc will cover."
msgstr ""

#: ../../imex.rst:25
msgid ""
"To import CSV files into Ghini select "
":menuselection:`Tools-->Export-->Comma Separated Values` from the menu."
msgstr ""

#: ../../imex.rst:29
msgid ""
"After clicking OK on the dialog that ask if you are sure you know what "
"you're doing a file chooser will open.  In the file chooser select the "
"files you want to import."
msgstr ""

#: ../../imex.rst:35
msgid "Exporting to CSV"
msgstr ""

#: ../../imex.rst:37
msgid ""
"To export the Ghini data to CSV select "
":menuselection:`Tools-->Export-->Comma Separated Values` from the menu."
msgstr ""

#: ../../imex.rst:40
msgid ""
"This tool will ask you to select a directory to export the CSV data. All "
"of the tables in Ghini will be exported to files in the format "
"tablename.txt where tablename is the name of the table where the data was"
" exported from."
msgstr ""

#: ../../imex.rst:46
msgid "Importing from JSON"
msgstr ""

#: ../../imex.rst:48
msgid ""
"This is *the* way to import data into an existing database, without "
"destroying previous content. A typical example of this functionality "
"would be importing your digital collection into a fresh, just initialized"
" Ghini database. Converting a database into bauble json interchange "
"format is beyond the scope of this manual, please contact one of the "
"authors if you need any further help."
msgstr ""

#: ../../imex.rst:55
msgid ""
"Using the Ghini json interchange format, you can import data which you "
"have exported from a different Ghini installation."
msgstr ""

#: ../../imex.rst:59
msgid "Exporting to JSON"
msgstr ""

#: ../../imex.rst:61
msgid "This feature is still under development."
msgstr ""

#: ../../imex.rst:65
msgid ""
"when you activate this export tool, you are given the choice to specify "
"what to export. You can use the current selection to limit the span of "
"the export, or you can start at the complete content of a domain, to be "
"chosen among Species, Accession, Plant."
msgstr ""

#: ../../imex.rst:71
msgid ""
"Exporting *Species* will only export the complete taxonomic information "
"in your database. *Accession* will export all your accessions plus all "
"the taxonomic information it refers to: unreferred to taxa will not be "
"exported. *Plant* will export all living plants (some accession might not"
" be included), all referred to locations and taxa."
msgstr ""

#: ../../imex.rst:79
msgid "Importing from a Generic Database"
msgstr ""

#: ../../imex.rst:81
msgid ""
"This functionality is the object of `issue #127 "
"<https://github.com/Ghini/ghini.desktop/issues/127>`_, for which we have "
"no generic solution yet."
msgstr ""

#: ../../imex.rst:85
msgid ""
"If you're interested in importing data from some flat file (e.g.: Excel "
"spreadsheet) or from any database, contact the developers."
msgstr ""

#: ../../imex.rst:90
msgid "Importing a Pictures Collection"
msgstr ""

#: ../../imex.rst:92
msgid ""
"We can consider a collection of plant pictures as a particular form of "
"botanical database, in which each picture is clearly associated with one "
"specific plant."
msgstr ""

#: ../../imex.rst:96
msgid ""
"Even without using a photo collection software, you can associate "
"pictures to accessions by following one and the same clear rule when "
"naming picture files."
msgstr ""

#: ../../imex.rst:100
msgid ""
"For example, ``2018.0020.1 (4) Epidendrum.jpg`` would be the name of the "
"fourth picture for plant number 1 within accession 2018.0020, identified "
"to rank genus as an Epidendrum."
msgstr ""

#: ../../imex.rst:104
msgid ""
"The :menuselection:`Tools-->Import-->Pictures` functionality here "
"described is meant for importing an ordered collection of plant pictures "
"either to initialize a ghini database, or for periodically adding to it."
msgstr ""

#: ../../imex.rst:109
msgid ""
"Use :menuselection:`Tools-->Import-->Pictures` to activate this import "
"tool.  Import goes in several steps: parameter definition; data revision "
"and confirmation; the import step proper; finally review the import log."
"  At the first two steps you can confirm the data and go to the next step"
" by clicking on the ``next`` button, or you can go back to the previous "
"step by clicking on the ``prev`` button.  Once the import is done and "
"you're reviewing the log, you can only either confirm —or abort— the "
"whole transaction."
msgstr ""

#: ../../imex.rst:119
msgid ""
"In the \"parameter definition\" pane you: select the directory from which"
" you intend to import pictures; indicate whether to import pictures "
"recursively; select or create a location which will be used as default "
"location for new plants; inform the tool about the rule you've been "
"following when naming picture files."
msgstr ""

#: ../../imex.rst:127
msgid ""
"In the \"data revision\" pane you are shown a table with as many rows as "
"the pictures you are importing.  Each row holds as much information as "
"the tool managed to extract from the picture name.  You can review the "
"information, correct or confirm, and indicate whether or not the row "
"should be imported."
msgstr ""

#: ../../imex.rst:135
msgid ""
"In the final \"commit or rollback\" pane you read the logs relative to "
"your data import, and decide whether to keep them (commit them to the "
"database), or undo them (rollback the transaction)."
msgstr ""

#: ../../imex.rst:141
msgid ""
"When the Picture Collection importer creates or updates objects, it also "
"sets a Note that you can use for selecting the objects involved in the "
"import, and for reviewing if needed."
msgstr ""

#: ../../index.rst:2
msgid "Documentation for Ghini 1.0"
msgstr ""

#: ../../index.rst:8
msgid ""
"Ghini is a suite of applications for managing botanical specimen "
"collections."
msgstr ""

#: ../../index.rst:10
msgid ""
"**ghini.desktop** lets you create and query a database representing "
"objects and events in your plant collection."
msgstr ""

#: ../../index.rst:11
msgid "**ghini.web** publishes highlights from your database on the web."
msgstr ""

#: ../../index.rst:12
msgid "**ghini.pocket** puts a snapshot of your database in your handheld device."
msgstr ""

#: ../../index.rst:13
msgid ""
"**ghini.tour** assists garden visitors with a map and spoken virtual "
"panels."
msgstr ""

#: ../../index.rst:17
msgid ""
"The bulk of this documentation focuses on ghini.desktop.  One final "
"chapter presents the rest of the Ghini family: :any:`ghini.pocket`, "
":any:`ghini.web`, :any:`ghini.tour`, and the :any:`interaction among "
"components`."
msgstr ""

#: ../../index.rst:21
msgid ""
"All Ghini software is `open <http://www.opensource.org>`_ and `free "
"<http://www.fsf.org>`_. Our standalone software is released under the "
"`GNU Public License <http://www.fsf.org/licensing/licenses/gpl.html>`_. "
"Our client-server software follows the `GNU Affero Public License "
"<http://www.fsf.org/licensing/licenses/agpl.html>`_."
msgstr ""

#: ../../index.rst:28
msgid "Statements"
msgstr ""

#: ../../index.rst:37
msgid "Installing Ghini"
msgstr ""

#: ../../index.rst:46
msgid "User's Guide"
msgstr ""

#: ../../index.rst:61
msgid "Cookbook"
msgstr ""

#: ../../index.rst:69
msgid "Administration"
msgstr ""

#: ../../index.rst:77
msgid "Ghini Family"
msgstr ""

#: ../../index.rst:85
msgid "Ghini Development"
msgstr ""

#: ../../index.rst:93
msgid "Supporting Ghini"
msgstr ""

#: ../../index.rst:97
msgid ""
"If you're using Ghini, or if you feel like helping its development "
"anyway, please consider `donating <https://pledgie.com/campaigns/29188>`_"
msgstr ""

#: ../../installing.rst:2
msgid "Installation"
msgstr ""

#: ../../installing.rst:4
msgid ""
"ghini.desktop is a cross-platform program and it will run on unix "
"machines like GNU/Linux and MacOSX, as well as on Windows."
msgstr ""

#: ../../installing.rst:7
msgid "one-liner for hurried users."
msgstr ""

#: ../../installing.rst:10
msgid ""
"Linux users just download and run `the installation script "
"<https://raw.githubusercontent.com/Ghini/ghini.desktop/ghini-1.0/scripts/devinstall.sh>`_."
" You may read the documentation later."
msgstr ""

#: ../../installing.rst:14
msgid ""
"Windows users, start downloading all external dependencies (`git <Direct "
"link to download git_>`_, `Python <Direct link to download Python_>`_, "
"`lxml <Direct link to download lxml_>`_, `PyGTK <Direct link to download "
"PyGTK_>`_, `psycopg2 <Direct link to download psycopg2_>`_), read the "
"instructions in the meanwhile."
msgstr ""

#: ../../installing.rst:21
msgid "Mac users are never in a hurry, are they?"
msgstr ""

#: ../../installing.rst:23
msgid ""
"Ghini is maintained by very few people, who focus on enhancing its "
"functional parts, more than on writing fancy installers. Instead of "
"several native installers we offer a single cross-platform installation "
"procedure. This has a few big advantages which you will learn to "
"appreciate as we go."
msgstr ""

#: ../../installing.rst:28
msgid "The installation is based on running a script."
msgstr ""

#: ../../installing.rst:30
msgid ""
"The GNU/Linux script takes care of everything, from dependecies to "
"installation for users in the ``ghini`` group."
msgstr ""

#: ../../installing.rst:32
msgid "The Windows script needs you to first install a couple things."
msgstr ""

#: ../../installing.rst:33
msgid ""
"On MacOSX we use the same script as on GNU/Linux. Since OSX has no "
"default package manager, we install one and we use it before we start the"
" script."
msgstr ""

#: ../../installing.rst:36
msgid ""
"Following our installation procedure, you will end with Ghini running "
"within a Python virtual environment, all Python dependencies installed "
"locally, non conflicting with any other Python program you may have on "
"your system."
msgstr ""

#: ../../installing.rst:40
msgid ""
"Dependencies that don't fit in a Python virtual environment are: Python, "
"virtualenv, GTK+, and PyGTK. Their installation varies per platform."
msgstr ""

#: ../../installing.rst:43
msgid ""
"If you later choose to remove Ghini, you simply remove the virtual "
"environment, which is a directory, with all of its content."
msgstr ""

#: ../../installing.rst:47
msgid "Installing on GNU/Linux"
msgstr ""

#: ../../installing.rst:49
msgid "Open a shell terminal window, and follow the following instructions."
msgstr ""

#: ../../installing.rst:51
msgid "Download the `devinstall.sh` script:"
msgstr ""

#: ../../installing.rst:55
msgid ""
"Invoke the script from a terminal window, starting at the directory where"
" you downloaded it, like this::"
msgstr ""

#: ../../installing.rst:60
msgid "The script will produce quite some output, which you can safely ignore."
msgstr ""

#: ../../installing.rst:62
msgid "global installation"
msgstr ""

#: ../../installing.rst:65
msgid ""
"When almost ready, the installation script will ask you for your "
"password.  This lets it create a ``ghini`` user group, initialise it to "
"just yourself, make the just created ``ghini`` script available to the "
"whole ``ghini`` user group."
msgstr ""

#: ../../installing.rst:70
msgid ""
"If feeling paranoid, you can safely not give your password and interrupt "
"the script there."
msgstr ""

#: ../../installing.rst:73
msgid ""
"Possibly the main advantage of a global installation is being able to "
"find Ghini in the application menus of your graphic environment."
msgstr ""

#: ../../installing.rst:77
msgid "You can now start ghini by invoking the ``ghini`` script::"
msgstr ""

#: ../../installing.rst:81
msgid ""
"You use the same ``ghini`` script to update ghini to the latest released "
"production patch::"
msgstr ""

#: ../../installing.rst:86
msgid "This is what you would do when ghini shows you something like this:"
msgstr ""

#: ../../installing.rst:90
msgid ""
"Users of the global installation will also type ``ghini`` to invoke the "
"program, but they will get to a different script, located in "
"``/usr/local/bin``. This globally available ``ghini`` script cannot be "
"used to update a ghini installation."
msgstr ""

#: ../../installing.rst:95
msgid ""
"Again the same ``ghini`` script lets you install the optional database "
"connectors: option ``-p`` is for PostgreSQL, option ``-m`` is for "
"MySQL/MariaDB, but you can also install both at the same time::"
msgstr ""

#: ../../installing.rst:101
msgid ""
"Please beware: you might need solve dependencies. How to do so, depends "
"on which GNU/Linux flavour you are using. Check with your distribution "
"documentation."
msgstr ""

#: ../../installing.rst:105
msgid ""
"You can also use the ``ghini`` script to switch to a different production"
" line.  At the moment ``1.0`` is the stable one, but you can select "
"``1.1`` if you want to help us with its development::"
msgstr ""

#: ../../installing.rst:111
msgid "beginner's note"
msgstr ""

#: ../../installing.rst:114
msgid ""
"To run a script, first make sure you note down the name of the directory "
"to which you have downloaded the script, then you open a terminal window "
"and in that window you type `bash` followed by a space and the complete "
"name of the script including directory name, and hit on the enter key."
msgstr ""

#: ../../installing.rst:120
msgid "technical note"
msgstr ""

#: ../../installing.rst:123
msgid "You can study the script to see what steps if runs for you."
msgstr ""

#: ../../installing.rst:125
msgid ""
"In short it will install dependencies which can't be satisfied in a "
"virtual environment, then it will create a virtual environment named "
"``ghide``, use git to download the sources to a directory named "
"``~/Local/github/Ghini/ghini.desktop``, and connect this git checkout to "
"the ``ghini-1.0`` branch (this you can consider a production line), it "
"then builds ghini, downloading all remaining dependencies in the virtual "
"environment, and finally it creates the ``ghini`` startup script."
msgstr ""

#: ../../installing.rst:133
msgid ""
"If you have ``sudo`` permissions, it will be placed in "
"``/usr/local/bin``, otherwise in your ``~/bin`` folder."
msgstr ""

#: ../../installing.rst:137 ../../installing.rst:215 ../../installing.rst:357
msgid "Next..."
msgstr ""

#: ../../installing.rst:141
msgid "Installing on MacOSX"
msgstr ""

#: ../../installing.rst:143
msgid ""
"Being macOS a unix environment, most things will work the same as on "
"GNU/Linux (sort of)."
msgstr ""

#: ../../installing.rst:146
msgid ""
"First of all, you need things which are an integral part of a unix "
"environment, but which are missing in a off-the-shelf mac:"
msgstr ""

#: ../../installing.rst:149
msgid ""
"developers tools: xcode. check the wikipedia page for the version "
"supported on your mac."
msgstr ""

#: ../../installing.rst:151
msgid "package manager: homebrew (tigerbrew for older OSX versions)."
msgstr ""

#: ../../installing.rst:153
msgid "Installation on older macOS."
msgstr ""

#: ../../installing.rst:156
msgid ""
"Every time we tested, we could only solve all dependencies on the two or "
"three most recent macOS versions.  In April 2015 this excluded macOS 10.6"
" and older.  In September 2017 this excluded macOS 10.8 and older.  We "
"never had a problem with the lastest macOS."
msgstr ""

#: ../../installing.rst:161
msgid ""
"The problem lies with homebrew and some of the packages we rely on. The "
"message you have to fear looks like this::"
msgstr ""

#: ../../installing.rst:166
msgid "The only solution I can offer is: please update your system."
msgstr ""

#: ../../installing.rst:168
msgid ""
"On the bright side, if at any time in the past you did install "
"ghini.desktop on your older and now unsupported macOS, you will always be"
" able to update ghini.desktop to the latest version."
msgstr ""

#: ../../installing.rst:172
msgid "With the above installed, open a terminal window and run::"
msgstr ""

#: ../../installing.rst:176
msgid ""
"make sure you understand the problems it reports, and correct them. pygtk"
" will need xquartz and brew will not solve the dependency automatically. "
"either install xquartz using brew or the way you prefer::"
msgstr ""

#: ../../installing.rst:182
msgid "then install the remaining dependencies::"
msgstr ""

#: ../../installing.rst:187
msgid "follow all instructions on how to activate what you have installed."
msgstr ""

#: ../../installing.rst:189
msgid ""
"In particular, make sure you read and understand all reports starting "
"with ``If you need to have this software``."
msgstr ""

#: ../../installing.rst:192
msgid ""
"You will need at least the following four lines in your "
"``~/.bash_profile``::"
msgstr ""

#: ../../installing.rst:199
msgid "Activate the profile by sourcing it::"
msgstr ""

#: ../../installing.rst:203
msgid ""
"Before we can run ``devinstall.sh`` as on GNU/Linux, we still need "
"installing a couple of python packages, globally. Do this::"
msgstr ""

#: ../../installing.rst:208
msgid ""
"The rest is just as on a normal unix machine. Read the above GNU/Linux "
"instructions, follow them, enjoy."
msgstr ""

#: ../../installing.rst:210
msgid ""
"As an optional aesthetical step, consider packaging your ``~/bin/ghini`` "
"script in a `platypus <https://github.com/sveinbjornt/Platypus>`_ "
"application bundle.  The ``images`` directory contains a 128×128 icon."
msgstr ""

#: ../../installing.rst:219
msgid "Installing on Windows"
msgstr ""

#: ../../installing.rst:221
msgid ""
"The steps described here instruct you on how to install Git, Gtk, Python,"
" and the python database connectors. With this environment correctly set "
"up, the Ghini installation procedure runs as on GNU/Linux. The concluding"
" steps are again Windows specific."
msgstr ""

#: ../../installing.rst:226
msgid ""
"Ghini has been tested with and is known to work on W-XP, W-7 up to W-10. "
"Although it should work fine on other versions Windows it has not been "
"thoroughly tested."
msgstr ""

#: ../../installing.rst:236
msgid "The installation steps on Windows:"
msgstr ""

#: ../../installing.rst:238
msgid ""
"download and install ``git`` (comes with a unix-like ``sh`` and includes "
"``vi``). Grab it from `the Git download area <https://git-"
"scm.com/download/win>`_."
msgstr ""

#: ../../installing.rst:241
msgid ""
"all default options are fine, except we need git to be executable from "
"the command prompt:"
msgstr ""

#: ../../installing.rst:246
msgid ""
"download and install Python 2.x (32bit). Grab it from the `Python "
"official site <http://www.python.org>`_."
msgstr ""

#: ../../installing.rst:249
msgid "When installing Python, do put Python in the PATH:"
msgstr ""

#: ../../installing.rst:253
msgid ""
"download ``pygtk`` from `the official source "
"<http://ftp.gnome.org/pub/GNOME/binaries/win32/pygtk/>`_. (this requires "
"32bit python). be sure you download the \"all in one\" version."
msgstr ""

#: ../../installing.rst:257
msgid "Make a complete install, selecting everything:"
msgstr ""

#: ../../installing.rst:261
msgid ""
"(Possibly necessary, maybe superfluous) install lxml, you can grab this "
"from `the pypi archives <https://pypi.python.org/pypi/lxml/3.4.4>`_"
msgstr ""

#: ../../installing.rst:264
msgid "Remember you need the 32 bit version, for Python 2.7."
msgstr ""

#: ../../installing.rst:275
msgid ""
"(definitely optional) download and install a database connector other "
"than ``sqlite3``."
msgstr ""

#: ../../installing.rst:278
msgid ""
"If you plan using PostgreSQL, the best Windows binary library for Python "
"is `psycopg and is Made in Italy "
"<http://initd.org/psycopg/docs/install.html>`_."
msgstr ""

#: ../../installing.rst:282
msgid "**REBOOT**"
msgstr ""

#: ../../installing.rst:284
msgid "hey, this is Windows, you need to reboot for changes to take effect!"
msgstr ""

#: ../../installing.rst:286
msgid ""
"We're done with the dependecies, now we can download and run the batch "
"file:"
msgstr ""

#: ../../installing.rst:290
msgid ""
"Please don't just follow the above link.  Instead: right click, save link"
" as..."
msgstr ""

#: ../../installing.rst:294
msgid ""
"Also make sure you don't let Windows convert the script to a text "
"document."
msgstr ""

#: ../../installing.rst:298
msgid ""
"Now **Open** the script to run it.  Please note: in the below image, we "
"have saved the file twice, once letting Windows convert it to a text "
"document, and again as a Windows Batch File.  Opening the batch file will"
" run the script.  Opening the text document will show you the code of the"
" batch file, which isn't going to lead us anywhere."
msgstr ""

#: ../../installing.rst:306
msgid ""
"If you installed everything as described here, the first thing you should"
" see when you start the installation script is a window like this, and "
"your computer will be busy during a couple of minutes, showing you what "
"it is doing."
msgstr ""

#: ../../installing.rst:313
msgid ""
"Running ``devinstall.bat`` will pull the ``ghini.desktop`` repository "
"from github to your home directory, under ``Local\\github\\Ghini``, "
"checkout the ``ghini-1.0`` production line, create a virtual environment "
"and install ghini into it."
msgstr ""

#: ../../installing.rst:318
msgid ""
"You can also run ``devinstall.bat`` passing it as argument the numerical "
"part of the production line you want to follow."
msgstr ""

#: ../../installing.rst:321
msgid ""
"This is the last installation step that depends, heavily, on a working "
"internet connection."
msgstr ""

#: ../../installing.rst:324
msgid ""
"The operation can take several minutes to complete, depending on the "
"speed of your internet connection."
msgstr ""

#: ../../installing.rst:327
msgid ""
"the last installation step creates the Ghini group and shortcuts in the "
"Windows Start Menu, for all users. To do so, you need run a script with "
"administrative rights. The script is called ``devinstall-finalize.bat``, "
"it is right in your HOME folder, and has been created at the previous "
"step."
msgstr ""

#: ../../installing.rst:335
msgid ""
"Right-click on it, select run as administrator, confirm you want it to "
"make changes to your computer.  These changes are in the Start Menu only:"
" create the Ghini group, place the Ghini shortcut."
msgstr ""

#: ../../installing.rst:339
msgid ""
"download the batch file you will use to stay up-to-date with the "
"production line you chose to follow:"
msgstr ""

#: ../../installing.rst:344
msgid ""
"if you are on a recent Ghini installation, each time you start the "
"program, Ghini will check on the development site and alert you of any "
"newer ghini release within your chosen production line."
msgstr ""

#: ../../installing.rst:348
msgid ""
"any time you want to update your installation, just start the command "
"prompt and run ``ghini-update.bat``, it will hardly take one minute."
msgstr ""

#: ../../installing.rst:351
msgid ""
"If you would like to generate and print PDF reports using Ghini's default"
" report generator then you will need to download and install `Apache FOP "
"<http://xmlgraphics.apache.org/fop/>`_.  After extracting the FOP archive"
" you will need to include the directory you extracted to in your PATH."
msgstr ""

#: ../../installing.rst:361
msgid "Installing on Android"
msgstr ""

#: ../../installing.rst:363
msgid ""
"``ghini.desktop`` is a desktop program, obviously you don't install it on"
" a handheld device, but we do offer the option, for your Android phone or"
" tablet, to install ``ghini.pocket``."
msgstr ""

#: ../../installing.rst:366
msgid ""
"``ghini.pocket`` is a small data viewer, it comes handy if you want to "
"have a quick idea of a plant species, its source, and date it entered the"
" garden, just by scanning a plant label."
msgstr ""

#: ../../installing.rst:369
msgid ""
"Installation is as easy as it can be: just `look for it in Google Play "
"<https://play.google.com/store/apps/details?id=me.ghini.pocket>`_, and "
"install it."
msgstr ""

#: ../../installing.rst:372
msgid ""
"Export the data from ``ghini.desktop`` to pocket format, copy it to your "
"device, enjoy."
msgstr ""

#: ../../propagations.rst:4
msgid "Dealing with Propagations"
msgstr ""

#: ../../propagations.rst:6
msgid ""
"Ghini offers the possibility to associate Propagations trials to Plants "
"and to document their treatments and results. Treatments are integral "
"parts of the description of a Propagation trial. If a Propagation trial "
"is successful, Ghini lets you associate it to a new Accession. You can "
"only associate one Accession to a Propagation Trial."
msgstr ""

#: ../../propagations.rst:12
msgid "Here we describe how you use this part of the interface."
msgstr ""

#: ../../propagations.rst:15
msgid "Creating a Propagation"
msgstr ""

#: ../../propagations.rst:17
msgid ""
"A Propagation (trial) is obtained from a Plant. Ghini reflects this in "
"its interface: you select a plant, open the Plant Editor on it, activate "
"the Propagation Tab, click on Add."
msgstr ""

#: ../../propagations.rst:21
msgid ""
"When you do the above, you get a Propagation Editor window. Ghini does "
"not consider Propagation trials as independent entities. As a result, "
"Ghini treats the Propagation Editor as a special editor window, which you"
" can only reach from the Plant Editor."
msgstr ""

#: ../../propagations.rst:26
msgid ""
"For a new Propagation, you select the type of propagation (this becomes "
"an immutable property of the propagation) then insert the data describing"
" it."
msgstr ""

#: ../../propagations.rst:29
msgid ""
"You will be able to edit the propagation data via the same path: select a"
" plant, open the Plant Editor, identify the propagation you want to edit,"
" click on the corresponding Edit button. You will be able to edit all "
"properties of an existing Propagation trial, except its type."
msgstr ""

#: ../../propagations.rst:34
msgid ""
"In the case of a seed propagation trial, you have a pollen parent, and a "
"seed parent. You should always associate the Propagation trial to the "
"seed parent."
msgstr ""

#: ../../propagations.rst:38
msgid ""
"In Ghini-1.0 you specify the pollen parent plant in the \"Notes\" field, "
"while Ghini-1.1 has a (relation) field for it. According to ITF2, there "
"might be cases in seed propagation trials where it is not known which "
"Plant plays which role. Again, in Ghini-1.0 you should use a note to "
"indicate whether this is the case, Ghini-1.1 has a (boolean) field "
"indicating whether this is the case."
msgstr ""

#: ../../propagations.rst:47
msgid "Using a Propagation"
msgstr ""

#: ../../propagations.rst:49
msgid "A Propagation trial may be successful and result in a new Accession."
msgstr ""

#: ../../propagations.rst:51
msgid ""
"Ghini helps you reflect this in the database: create a new Accession, "
"immediately switch to the Source tab and select \"Garden Propagation\" in"
" the (admittedly somewhat misleading) Contact field."
msgstr ""

#: ../../propagations.rst:55
msgid ""
"Start typing the plant number and a list of matching plants with "
"propagation trials will appear for you to select from."
msgstr ""

#: ../../propagations.rst:58
msgid ""
"Select the plant, and the list of accessed and unaccessed propagation "
"trials will appear in the lower half of the window."
msgstr ""

#: ../../propagations.rst:61
msgid ""
"Select a still unaccessed propagation trial from the list and click on Ok"
" to complete the operation."
msgstr ""

#: ../../propagations.rst:64
msgid ""
"Using the data from the Propagation trial, Ghini completes some of the "
"fields in the General tab: Taxon name, Type of material, and possibly "
"Provenance. You will be able to edit these fields, but please note that "
"the software will not prevent introducing conceptual inconsistencies in "
"your database."
msgstr ""

#: ../../propagations.rst:70
msgid "You can associate a Propagation trial to only one Accession."
msgstr ""

#: ../../report.rst:2
msgid "Generating reports"
msgstr ""

#: ../../report.rst:4
msgid ""
"A database without exporting facilities is of little use. Ghini lets you "
"export your data in table format (open them in your spreadsheet editor of"
" choice), as labels (to be printed or engraved), as html pages or pdf or "
"postscript documents."
msgstr ""

#: ../../report.rst:9
msgid "This page describes the two tools Ghini offers for these tasks."
msgstr ""

#: ../../report.rst:12
msgid "Using the Mako Report Formatter"
msgstr ""

#: ../../report.rst:14
msgid ""
"The Mako report formatter uses the Mako template language for generating "
"reports. More information about Mako and its language can be found at "
"`makotemplates.org <http://www.makotemplates.org>`_."
msgstr ""

#: ../../report.rst:18
msgid ""
"The Mako templating system should already be installed on your computer "
"if Ghini is installed."
msgstr ""

#: ../../report.rst:21
msgid ""
"Creating reports with Mako is similar in the way that you would create a "
"web page from a template.  It is much simpler than the XSL Formatter(see "
"below) and should be relatively easy to create template for anyone with a"
" little but of programming experience."
msgstr ""

#: ../../report.rst:26
msgid ""
"The template generator will use the same file extension as the template "
"which should indicate the type of output the template with create.  For "
"example, to generate an HTML page from your template you should name the "
"template something like `report.html`.  If the template will generate a "
"comma separated value file you should name the template `report.csv`."
msgstr ""

#: ../../report.rst:33
msgid ""
"The template will receive a variable called `values` which will contain "
"the list of values in the current search."
msgstr ""

#: ../../report.rst:36
msgid ""
"The type of each value in `values` will be the same as the search domain "
"used in the search query.  For more information on search domains see "
":ref:`search-domains`."
msgstr ""

#: ../../report.rst:40
msgid ""
"If the query does not have a search domain then the values could all be "
"of a different type and the Mako template should prepared to handle them."
msgstr ""

#: ../../report.rst:46
msgid "Using the XSL Report Formatter"
msgstr ""

#: ../../report.rst:48
msgid ""
"The XSL report formatter requires an XSL to PDF renderer to convert the "
"data to a PDF file. Apache FOP is is a free and open-source XSL->PDF "
"renderer and is recommended."
msgstr ""

#: ../../report.rst:52
msgid ""
"If using Linux, Apache FOP should be installable using your package "
"manager.  On Debian/Ubuntu it is installable as ``fop`` in Synaptic or "
"using the following command::"
msgstr ""

#: ../../report.rst:60
msgid "Installing Apache FOP on Windows"
msgstr ""

#: ../../report.rst:62
msgid ""
"You have two options for installing FOP on Windows. The easiest way is to"
" download the prebuilt `ApacheFOP-0.95-1-setup.exe "
"<http://code.google.com/p/apache-fop-"
"installer/downloads/detail?name=ApacheFOP-0.95-1-setup.exe&can=2&q=#makechanges>`_"
" installer."
msgstr ""

#: ../../report.rst:65
msgid ""
"Alternatively you can download the `archive "
"<http://www.apache.org/dist/xmlgraphics/fop/binaries/>`_.  After "
"extracting the archive you must add the directory you extracted the "
"archive to to your PATH environment variable."
msgstr ""

#: ../../searching.rst:4
msgid "Searching in Ghini"
msgstr ""

#: ../../searching.rst:6
msgid ""
"Searching allows you to view, browse and create reports from your data. "
"You can perform searches by either entering the queries in the main "
"search entry or by using the Query Builder to create the queries for you."
" The results of Ghini searches are listed in the main window."
msgstr ""

#: ../../searching.rst:13
msgid "Search Strategies"
msgstr ""

#: ../../searching.rst:15
msgid "Ghini offers four distinct search strategies:"
msgstr ""

#: ../../searching.rst:17
msgid "by value — in all domains;"
msgstr ""

#: ../../searching.rst:18
msgid "by expression — in a few implicit fields in one explicit domain;"
msgstr ""

#: ../../searching.rst:19
msgid "by query — in one domain;"
msgstr ""

#: ../../searching.rst:20
msgid "by binomial name — only searches the Species domain."
msgstr ""

#: ../../searching.rst:22
msgid ""
"All search strategies —with the notable exception of the binomial name "
"search— are case insensitive."
msgstr ""

#: ../../searching.rst:27
msgid "Search by Value"
msgstr ""

#: ../../searching.rst:29
msgid ""
"Search by value is the simplest way to search. You enter one or more "
"strings and see what matches. The result includes objects of any type "
"(domain) where one or more of its fields contain one or more of the "
"search strings."
msgstr ""

#: ../../searching.rst:33
msgid ""
"You don't specify the search domain, all are included, nor do you "
"indicate which fields you want to match, this is implicit in the search "
"domain."
msgstr ""

#: ../../searching.rst:36
msgid ""
"The following table helps you understand the results and guides you in "
"formulating your searches."
msgstr ""

#: ../../searching.rst:42
msgid "search domain overview"
msgstr ""

#: ../../searching.rst:44
msgid "name and shorthands"
msgstr ""

#: ../../searching.rst:44
msgid "field"
msgstr ""

#: ../../searching.rst:44
msgid "result type"
msgstr ""

#: ../../searching.rst:49 ../../searching.rst:50 ../../searching.rst:54
#: ../../searching.rst:56
msgid "name"
msgstr ""

#: ../../searching.rst:59
msgid ""
"Examples of searching by value would be: Maxillaria, Acanth, 2008.1234, "
"2003.2.1, indica."
msgstr ""

#: ../../searching.rst:62
msgid ""
"Unless explicitly quoted, spaces separate search strings. For example if "
"you search for ``Block 10`` then Ghini will search for the strings Block "
"and 10 and return all the results that match either of these strings. If "
"you want to search for Block 10 as one whole string then you should quote"
" the string like ``\"Block 10\"``."
msgstr ""

#: ../../searching.rst:68
msgid "× Composite Primary Keys"
msgstr ""

#: ../../searching.rst:71
msgid ""
"A **species** epithet means little without the corresponding genus, "
"likewise a **planting** code is unique only within the accession to which"
" it belongs.  In database theory terminology, epithet and code are not "
"sufficient to form a **primary key** for respectively species and "
"planting. These domains need a **composite** primary key."
msgstr ""

#: ../../searching.rst:78
msgid ""
"Search by value lets you look for **plantings** by their complete "
"planting code, which includes the accession code. Taken together, "
"Accession code and Planting code do provide a **composite primary key** "
"for plantings.  For **species**, we have introduced the binomial search, "
"described below."
msgstr ""

#: ../../searching.rst:86
msgid "Search by Expression"
msgstr ""

#: ../../searching.rst:88
msgid ""
"Searching with expression gives you a little more control over what you "
"are searching for. You narrow the search down to a specific domain, the "
"software defines which fields to search within the domain you specified."
msgstr ""

#: ../../searching.rst:92
msgid ""
"An expression is built as ``<domain> <operator> <value>``. For example "
"the search: ``gen=Maxillaria`` would return all the genera that match the"
" name Maxillaria. In this case the domain is ``gen``, the operator is "
"``=`` and the value is ``Maxillaria``."
msgstr ""

#: ../../searching.rst:97
msgid ""
"The above search domain overview table tells you the names of the search "
"domains, and, per search domain, which fields are searched."
msgstr ""

#: ../../searching.rst:100
#, python-format
msgid ""
"The search string ``loc like block%`` would return all the Locations for "
"which name or code start with \"block\".  In this case the domain is "
"``loc`` (a shorthand for ``location``), the operator is ``like`` (this "
"comes from SQL and allows for \"fuzzy\" searching), the value is "
"``block%``, the implicitly matched fields are ``name`` and ``code``.  The"
" percent sign is used as a wild card so if you search for ``block%`` then"
" it searches for all values that start with ``block``.  If you search for"
" ``%10`` it searches for all values that end in ``10``.  The string "
"``%ck%10`` would search for all value that contain ``ck`` and end in "
"``10``."
msgstr ""

#: ../../searching.rst:110
msgid "When a query takes ages to complete"
msgstr ""

#: ../../searching.rst:113
msgid ""
"You give a query, it takes time to compute, the result contains "
"unreasonably many entries.  This happens when you intend to use a "
"strategy, but your strings do not form a valid expression.  In this case "
"Ghini falls back to *search by value*. For example the search string "
"``gen lik maxillaria`` will search for the strings ``gen``, ``lik``, and "
"``maxillaria``, returning all that match at least one of the three "
"criteria."
msgstr ""

#: ../../searching.rst:122
msgid "Binomial search"
msgstr ""

#: ../../searching.rst:124
msgid ""
"You can also perform a search in the database if you know the species, "
"just by placing a few initial letters of genus and species epithets in "
"the search engine, correctly capitalized, i.e.: **Genus epithet** with "
"one leading capital letter, **Species epithet** all lowercase."
msgstr ""

#: ../../searching.rst:129
msgid "This way you can perform the search ``So ha``."
msgstr ""

#: ../../searching.rst:131
msgid "These would be the initials for Solanum hayesii, or Solanum havanense."
msgstr ""

#: ../../searching.rst:133
msgid ""
"Binomial search comes to compensate the limited usefulness of the above "
"search by expression when trying to look for a species."
msgstr ""

#: ../../searching.rst:136
msgid ""
"It is the correct capitalization **Xxxx xxxx** that informs the software "
"of your intention to perform a binomial search.  The software's second "
"guess will be a search by value, which will possibly result in far more "
"matches than you had expected."
msgstr ""

#: ../../searching.rst:141
msgid ""
"The similar request ``so ha`` will return, in a fresh install, over 3000 "
"objects, starting at Family \"Acalyp(**ha**)ceae\", ending at Geography "
"\"Western (**So**)uth America\"."
msgstr ""

#: ../../searching.rst:147
msgid "Search by Query"
msgstr ""

#: ../../searching.rst:149
msgid ""
"Queries allow the most control over searching. With queries you can "
"search across relations, specific columns, combine search criteria using "
"boolean operators like ``and``, ``or``, ``not`` (and their shorthands "
"``&&``, ``||``, ``!``), enclose them in parentheses, and more."
msgstr ""

#: ../../searching.rst:154
msgid ""
"Please contact the authors if you want more information, or if you "
"volunteer to document this more thoroughly.  In the meanwhile you may "
"start familiarizing yourself with the core structure of Ghini's database."
msgstr ""

#: ../../searching.rst:162
msgid "A few examples:"
msgstr ""

#: ../../searching.rst:164
msgid "plantings of family Fabaceae in location Block 10::"
msgstr ""

#: ../../searching.rst:168
msgid "locations that contain no plants::"
msgstr ""

#: ../../searching.rst:172
msgid ""
"accessions associated to a species of known binomial name (e.g.: "
"Mangifera indica)::"
msgstr ""

#: ../../searching.rst:176
msgid "accessions we propagated in the year 2016::"
msgstr ""

#: ../../searching.rst:180
msgid "accessions we modified in the last three days::"
msgstr ""

#: ../../searching.rst:184
msgid ""
"Searching with queries requires some knowledge of a little syntax and an "
"idea of the extensive Ghini database table structure. Both you acquire "
"with practice, and with the help of the Query Builder."
msgstr ""

#: ../../searching.rst:190
msgid "The Query Builder"
msgstr ""

#: ../../searching.rst:192
msgid ""
"Ghini offers a Query Builder, that helps you build complex search queries"
" through a point and click interface.  To open the Query Builder click "
"the |querybuilder| icon to the left of the search entry or select "
":menuselection:`Tools-->Query Builder` from the menu."
msgstr ""

#: ../../searching.rst:201
msgid ""
"A window will show up, which will lead you through all steps necessary to"
" construct a correct query that is understood by Ghini's Query Search "
"Strategy."
msgstr ""

#: ../../searching.rst:210
msgid ""
"First of all you indicate the search domain, this will allow the Query "
"Builder complete its graphical user interface, then you add as many "
"logical clauses as you need, connecting them with a ``and`` or ``or`` "
"binary operator."
msgstr ""

#: ../../searching.rst:215
msgid ""
"Each clause is formed of three parts: a property that can be reached from"
" the starting search domain, a comparison operator that you select from "
"the drop-down list, a value that you can either type or select from the "
"list of valid values for the field."
msgstr ""

#: ../../searching.rst:220
msgid ""
"Add as many search properties as you need, by clicking on the plus sign. "
"Select and/or next to the property name to choose how the clauses will be"
" combined in the search query."
msgstr ""

#: ../../searching.rst:224
msgid "When you are done building your query click OK to perform the search."
msgstr ""

#: ../../searching.rst:226
msgid ""
"At this point the Query Builder writes the query in the search entry, and"
" executes it. You may now edit the string as if you had typed it "
"yourself. Notice how the left hand side values are interpreted by the "
"query builder and enclosed in single quotes if recognized as strings, "
"left alone if they look like numbers or the two reserved words ``None`` "
"and ``Empty``. You may edit the query and insert quotes if you need them,"
" eg if you need to literally look for the string ``Empty``."
msgstr ""

#: ../../searching.rst:234
msgid ""
"``None`` is the value of an empty field. It is not the same as the zero "
"lenght string ``''`` nor the numeric ``0`` nor the boolean ``False`` nor "
"the set ``Empty``, it indicates that the field has no value at all."
msgstr ""

#: ../../searching.rst:238
msgid ""
"``Empty`` is the empty set. Being it a set, it can be matched against "
"sets (eg: plants of an accession, or accessions of a species), not "
"against elements (eg: quantity of a plant or description of a location). "
"However, the Query Builder does not let you choose a left hand side value"
" stopping at a set, it expects you to select a field. Choose just any "
"field: at the moment of producing the query, when the Query Builder meets"
" a clause with right hand side value the literal string ``Empty``, it "
"will drop the field name and let you compare the set on the left with "
"``Empty`` on the right."
msgstr ""

#: ../../searching.rst:247
msgid ""
"We have no literals ``False`` and ``True``. These are typed values, and "
"the Query Builder does not know how to produce them. Instead of ``False``"
" type ``0``, and instead of ``True`` type ``1``."
msgstr ""

#: ../../searching.rst:253
msgid "Query Grammar"
msgstr ""

#: ../../searching.rst:255
msgid ""
"For those who don't fear a bit of formal precision, the following BNF "
"code gives you a rather precise idea of the grammar implemented by the "
"Query Search Strategy.  Some grammatical categories are informally "
"defined; any missing ones are left to your fertile imagination; literals "
"are included in single quotes; the grammar is mostly case insensitive, "
"unless otherwise stated::"
msgstr ""

#: ../../searching.rst:318
msgid ""
"Please be aware that Ghini's Query language is quite a bit more complex "
"than what the Query Builder can produce: Queries you can build with the "
"Query Builder form a proper subset of the queries recognized by the "
"software::"
msgstr ""

#: ../../started.rst:2
msgid "Initial Configuration"
msgstr ""

#: ../../started.rst:4
msgid ""
"After a successful installation, more complex organizations will need "
"configure their database, and configure Ghini according to their database"
" configuration. This page focuses on this task. If you don't know what "
"this is about, please do read the part relative to SQLite."
msgstr ""

#: ../../started.rst:12
msgid "Should you SQLite?"
msgstr ""

#: ../../started.rst:14
msgid ""
"Is this the first time you use Ghini, are you going to work in a stand-"
"alone setting, you have not the faintest idea how to manage a database "
"management system? If you answered yes to any of the previous, you "
"probably better stick with SQLite, the easy, fast, zero-administration "
"file-based database."
msgstr ""

#: ../../started.rst:20
msgid ""
"With SQLite, you do not need any preparation and you can continue with "
"`connecting`_."
msgstr ""

#: ../../started.rst:23
msgid ""
"On the other hand, if you want to connect more than one bauble "
"workstation to the same database, or if you want to make your data "
"available for other clients, as could be a web server in a LAMP setting, "
"you should consider keeping your database in a database management system"
" like `PostgreSQL <http://www.postgresql.org>`_ or `MySQL/MariaDB "
"<https://mariadb.org/>`_, both supported by Ghini."
msgstr ""

#: ../../started.rst:30
msgid ""
"When connecting to a database server as one of the above, you have to "
"manually do the following: Create at least one user; Create your "
"database; Give at least one user full permissions on your database; If "
"you plan having more database users: Give one of your users the "
"``CREATEROLE`` privilege; Consider the user with the ``CREATEROLE`` "
"privilege as a super-user, not meant to handle data directly; Keep your "
"super-user credentials in a very safe place."
msgstr ""

#: ../../started.rst:38
msgid ""
"When this is done, Ghini will be able to proceed, creating the tables and"
" importing the default data set.  The process is database-dependent and "
"it falls beyond the scope of this manual."
msgstr ""

#: ../../started.rst:42
msgid ""
"If you already got the chills or sick at your stomach, no need to worry, "
"just stick with SQLite, you do not miss on features nor performance."
msgstr ""

#: ../../started.rst:45
msgid "Some more hints if you need PostgreSQL"
msgstr ""

#: ../../started.rst:48
msgid ""
"Start simple, don't do all at the same time. Review `the online manual "
"<https://www.postgresql.org/docs/9.4/static/index.html>`_, or download "
"and study `the offline version "
"<https://www.postgresql.org/files/documentation/pdf/9.4/postgresql-9.4-A4.pdf>`_."
msgstr ""

#: ../../started.rst:53
msgid ""
"As said above, create a database, a user, make this user the owner of the"
" database, decide whether you're going to need multiple users, and "
"preferably reserve a user for database and normal user creation. This "
"super-user should be your only user with ``CREATEROLE`` privilege."
msgstr ""

#: ../../started.rst:59
msgid ""
"All normal users will need all privileges on all tables and sequences, "
"something you can do from the :menuselection:`Tools-->Users` menu.  If "
"you have any difficulty, please `open an issue "
"<https://github.com/Ghini/ghini.desktop/issues/new>`_ about it."
msgstr ""

#: ../../started.rst:65
msgid ""
"Connect using the ``psql`` interactive terminal.  Create a ``~/.pgpass`` "
"file (read more about it in `the manual "
"<https://www.postgresql.org/docs/9.4/static/libpq-pgpass.html>`_), tweak "
"your ``pg_hba.conf`` and ``postgresql.conf`` files, until you can connect"
" using the command::"
msgstr ""

#: ../../started.rst:73
msgid "With the above setup, connecting from ghini will be an obvious task."
msgstr ""

#: ../../started.rst:79
msgid "Connecting to a database"
msgstr ""

#: ../../started.rst:81
msgid ""
"When you start Ghini the first thing that comes up is the connection "
"dialog."
msgstr ""

#: ../../started.rst:84
msgid ""
"Quite obviously, if this is the first time you start Ghini, you have no "
"connections yet and Ghini will alert you about it."
msgstr ""

#: ../../started.rst:89
msgid ""
"This alert will show at first activation and also in the future if your "
"connections list becomes empty. As it says: click on **Add** to create "
"your first connection."
msgstr ""

#: ../../started.rst:95
msgid ""
"Just insert a name for your connection, something meaningful you "
"associate with the collection to be represented in the database (for "
"example: “my home garden”), and click on **OK**. You will be back to the "
"previous screen, but your connection name will be selected and the "
"Connection Details will have expanded."
msgstr ""

#: ../../started.rst:103
msgid "**specify the connection details**"
msgstr ""

#: ../../started.rst:105
msgid ""
"If you do not know what to do here, Ghini will help you stay safe. "
"Activate the **Use default locations** check box and create your first "
"connection by clicking on **Connect**."
msgstr ""

#: ../../started.rst:108
msgid ""
"You may safely skip the remainder of this section for the time being and "
"continue reading to the following section."
msgstr ""

#: ../../started.rst:111
msgid "**fine-tune the connection details**"
msgstr ""

#: ../../started.rst:113
msgid ""
"By default Ghini uses the file-based SQLite database.  During the "
"installation process you had the choice (and you still have after "
"installation), to add database connectors other than the default SQLite."
msgstr ""

#: ../../started.rst:117
msgid ""
"In this example, Ghini can connect to SQLite, PostgreSQL and MySQL, but "
"no connector is available for Oracle or MS SQL Server."
msgstr ""

#: ../../started.rst:122
msgid ""
"If you use SQLite, all you really need specify is the connection name. If"
" you let Ghini use the default filename then Ghini creates a database "
"file with the same name as the connection and ``.db`` extension, and a "
"pictures folder with the same name and no extension, both in "
"``~/.bauble`` on Linux/MacOSX or in ``AppData\\Roaming\\Bauble`` on "
"Windows."
msgstr ""

#: ../../started.rst:128
msgid ""
"Still with SQLite, you might have received or downloaded a bauble "
"database, and you want to connect to it. In this case you do not let "
"Ghini use the default filename, but you browse in your computer to the "
"location where you saved the Ghini SQLite database file."
msgstr ""

#: ../../started.rst:133
msgid ""
"If you use a different database connector, the dialog box will look "
"different and it will offer you the option to fine tune all parameters "
"needed to connect to the database of your choice."
msgstr ""

#: ../../started.rst:137
msgid ""
"If you are connecting to an existing database you can continue to :ref"
":`editing-and-inserting-data` and subsequently :ref:`searching-in-ghini`,"
" otherwise read on to the following section on initializing a database "
"for Ghini."
msgstr ""

#: ../../started.rst:142
msgid ""
"If you plan to associate pictures to plants, specify also the *pictures "
"root* folder. The meaning of this is explained in further detail at :ref"
":`plant-pictures` in :ref:`editing-and-inserting-data`."
msgstr ""

#: ../../started.rst:149
msgid "Initialize a database"
msgstr ""

#: ../../started.rst:151
msgid ""
"First time you open a connection to a database which had never been seen "
"by Ghini before, Ghini will first display an alert:"
msgstr ""

#: ../../started.rst:156
msgid "immediately followed by a question:"
msgstr ""

#: ../../started.rst:160
msgid ""
"Be careful when manually specifying the connection parameters: the values"
" you have entered may refer to an existing database, not intended for use"
" with Ghini. By letting Ghini initialize a database, the database will be"
" emptied and all of its content be lost."
msgstr ""

#: ../../started.rst:165
msgid ""
"If you are sure you want to create a database at this connection then "
"select \"Yes\". Ghini will then start creating the database tables and "
"importing the default data. This can take a minute or two so while all of"
" the default data is imported into the database so be patient."
msgstr ""

#: ../../started.rst:170
msgid ""
"Once your database has been created, configured, initialized, you are "
"ready to start :ref:`editing-and-inserting-data` and subsequently :ref"
":`searching-in-bauble`."
msgstr ""

#: ../../statements.rst:2
msgid "Mission & Vision"
msgstr ""

#: ../../statements.rst:4
msgid ""
"Here we state who we are, what we think of our work, what you can expect "
"of this project."
msgstr ""

#: ../../statements.rst:8
msgid "Who is behind Ghini"
msgstr ""

#: ../../statements.rst:10
msgid ""
"Ghini is a small set of programs, meant to let collection managers manage"
" their collection also digitally."
msgstr ""

#: ../../statements.rst:13
msgid ""
"Ghini was born back in 2004 as Bauble, at the Belize Botanical Garden. It"
" was later adapted to the needs of a few more gardens. Brett Adams, the "
"original programmer, made this software a commons, by releasing it under "
"a GPL license."
msgstr ""

#: ../../statements.rst:18
msgid ""
"After years of stagnation Mario Frasca revived the project, and rebranded"
" it as Ghini in honour of Luca Ghini, founder of the first European "
"botanic garden and herbarium. Mario Frasca started advocating, "
"travelling, distributing, developing, expanding, redefining, documenting "
"it, and it is now Mario Frasca writing this, looking for users, "
"requesting feedback."
msgstr ""

#: ../../statements.rst:24
msgid ""
"Behind Ghini there's not only one developer, but a small but growing "
"global users community."
msgstr ""

#: ../../statements.rst:27
msgid ""
"Translations are provided by volunteers who mostly stay behind the "
"scenes, translating missing terms or sentences, and disappearing again."
msgstr ""

#: ../../statements.rst:30
msgid ""
"To make things clearer when we speak of Ghini, but should—and in this "
"document we will—indicate whether it's Ghini(the software), or Ghini(the "
"people), unless obviously we mean both things."
msgstr ""

#: ../../statements.rst:35
msgid "Mission"
msgstr ""

#: ../../statements.rst:37
msgid ""
"Our goal as Ghini Software is to provide free software, of proven "
"quality, and to let anybody install it if they feel like it.  We also aim"
" at facilitating access to functional knowledge, in the form of "
"documentation or by laying the contact among users or between users and "
"software professionals."
msgstr ""

#: ../../statements.rst:43
msgid ""
"All our sources, software and documentation, are open and free, and we "
"welcome and stimulate people to use and to contribute.  To facilitate "
"community forming, all our platforms can be consulted without "
"registration. Registration is obviously required if you want to "
"contribute."
msgstr ""

#: ../../statements.rst:48
msgid ""
"Ghini welcomes the formation of groups of users, bundling forces to "
"define and finance further development, and we welcome developers "
"contributing software, from any corner in the world, and we stimulate and"
" help them comply with the high quality requirements, before we accept "
"the contributed code in the software sources."
msgstr ""

#: ../../statements.rst:55
msgid "Vision"
msgstr ""

#: ../../statements.rst:57
msgid ""
"The Vision serves to indicate the way ahead and projects a future image "
"of what we want our organization to be, in a realistic and attractive "
"way.  It serves as motivation because it visualizes the challenge and "
"direction of necessary changes in order to grow and prosper."
msgstr ""

#: ../../statements.rst:62
msgid "by the year 2020"
msgstr ""

#: ../../statements.rst:63
msgid "reference point"
msgstr ""

#: ../../statements.rst:64
msgid "community"
msgstr ""

#: ../../statements.rst:65
msgid "development"
msgstr ""

#: ../../statements.rst:66
msgid "integration with web portal"
msgstr ""

#: ../../statements.rst:67
msgid "geographic information"
msgstr ""

#: ../../tagging.rst:2
msgid "Tagging"
msgstr ""

#: ../../tagging.rst:4
msgid ""
"Tagging is an easy way to give context to an object or create a "
"collection of object that you want to recall later."
msgstr ""

#: ../../tagging.rst:7
msgid ""
"The power in this tagging action is that you can share this selection "
"with colleagues, who can act on it, without the need to redo all your "
"collecting work."
msgstr ""

#: ../../tagging.rst:11
msgid ""
"For example if you need to print accession labels of otherwise unrelated "
"plants, you can group the objects by tagging them with the string "
"\"relabel\". You or one of your colleagues can then select \"relabel\" "
"from the tags menu, the search view will show all the objects you tagged,"
" and performing a report will act on the tagged objects."
msgstr ""

#: ../../tagging.rst:17
msgid ""
"Tagging acts on the active selection, that is the items in the search "
"results which you have selected."
msgstr ""

#: ../../tagging.rst:20
msgid ""
"Please remember: you can select all result rows by pressing ``Ctrl-A``, "
"you can deselect everything by pressing ``Ctrl-Shift-A``, you can toggle "
"tagging of a single row by ``Ctrl-Mouse click`` on it."
msgstr ""

#: ../../tagging.rst:24
msgid "Once you have an active selection, tagging can be done in two ways:"
msgstr ""

#: ../../tagging.rst:27
msgid "dialog box tagging"
msgstr ""

#: ../../tagging.rst:29
msgid ""
"Press ``Ctrl-T`` or select :menuselection:`Tag-->Tag Selection` from the "
"menu, this activates a window where you can create new tags and apply any"
" existing tag to the selection."
msgstr ""

#: ../../tagging.rst:33
msgid "The tag window is composed of three parts:"
msgstr ""

#: ../../tagging.rst:35
msgid ""
"The upper part mentions the list of objects in your active selection. "
"This is the list of object of which you are editing the tags;"
msgstr ""

#: ../../tagging.rst:37
msgid ""
"The middle part has a list of all available tags, with a checkbox that "
"you can activate for applying the tag to or removing the tag from the "
"selection;"
msgstr ""

#: ../../tagging.rst:40
msgid ""
"The lower part only holds a link to new tag creation, and the Ok button "
"for closing the dialog box."
msgstr ""

#: ../../tagging.rst:43
msgid ""
"If, when opening the tag dialog box, the active selection holds multiple "
"items, then only the tags that are common to all the selected items will "
"have a check next to it.  Tags that only apply to a proper subset of the "
"active selection will show with an 'undecided' status.  Tags that don't "
"apply to any object in the active selection will show blank."
msgstr ""

#: ../../tagging.rst:49
msgid ""
"The most recently created tag, or the most recently selected tag becomes "
"the active tag, and it shows with a check next to it in the tags menu."
msgstr ""

#: ../../tagging.rst:53
msgid "windowless tagging"
msgstr ""

#: ../../tagging.rst:55
msgid ""
"Once you have an active tag, pressing ``Ctrl-Y`` applies the active tag "
"to all objects in the active selection.  ``Ctrl-Shift-Y`` removes the "
"active tag from all objects in the active selection."
msgstr ""

#: ../../use_cases-jbq.rst:2
msgid "Quito Botanical Garden"
msgstr ""

#: ../../use_cases-jbq.rst:4
msgid ""
"At the JBQ, Quito Botanical Garden, we have adopted the Ghini software in"
" April 2015. Since that time, we have accumulated experience with the "
"program, and we are ourselves in need to document it, in order to secure "
"the knowledge to the institution. We are happy to share it."
msgstr ""

#: ../../use_cases-jbq.rst:10
msgid "Technical"
msgstr ""

#: ../../use_cases-jbq.rst:12
msgid ""
"We work on GNU/Linux, a platform that many users don't master, and our "
"database is inside of a remote database management system. This implies "
"steps that are not obvious to the casual end user."
msgstr ""

#: ../../use_cases-jbq.rst:16
msgid "How to start a program"
msgstr ""

#: ../../use_cases-jbq.rst:19
msgid ""
"To start a program given its name, hit the |loose_png| key next to Alt, "
"or click on |10000000000000300000002F89E0224ADF9EC09E_png|, then start "
"typing the name of the program, in our case “Ghini” or just click on the "
"program symbol |100000000000003100000031BB54CBDFA885EBAC_png|, appearing "
"near the left margin of your display."
msgstr ""

#: ../../use_cases-jbq.rst:25
msgid "Database server"
msgstr ""

#: ../../use_cases-jbq.rst:28
msgid ""
"We chose for a centralised PostgreSQL database server. This way we are "
"protected from concurrent conflicting changes, and all changes are "
"simultaneously available on all ghini clients.  We did need to outsource "
"database server management."
msgstr ""

#: ../../use_cases-jbq.rst:33
msgid "adding a new user"
msgstr ""

#: ../../use_cases-jbq.rst:36
msgid ""
"Ghini keeps track of the user performing all sort of edits to the "
"database, and at the garden, apart from the stable users, we have all "
"sorts of temporary users writing to the database, that we decided we "
"would let Ghini help us keep track of database events."
msgstr ""

#: ../../use_cases-jbq.rst:41
msgid ""
"Since we work using PostgreSQL, the users that Ghini stores in the "
"database history are the database users, not the system users."
msgstr ""

#: ../../use_cases-jbq.rst:44
msgid ""
"Each user knows their own password, and only knows that one. Our super-"
"user, responsible for the database content, also has the ``bauble`` "
"fictional user password, which we only only use to create other users."
msgstr ""

#: ../../use_cases-jbq.rst:49
msgid ""
"We do not use account names like ``voluntario``, because such accounts do"
" not help us associate the name to the person."
msgstr ""

#: ../../use_cases-jbq.rst:52
msgid "— adding a new system user (linux/osx)"
msgstr ""

#: ../../use_cases-jbq.rst:55
msgid ""
"Adding a system user is not strictly necessary, as ghini does not use it "
"in the logs, however, adding a system user allows for separation of "
"preferences, configured connections, search history. On some of our "
"systems we have a single shared account with several configured "
"connections, on other systems we have one account per user."
msgstr ""

#: ../../use_cases-jbq.rst:62
msgid ""
"On systems with one account per user, our users have a single configured "
"connection, and we hold the database password in the "
"``/home/<account>/.pgpass`` file.  This file is only readable for the "
"``<account>`` owner."
msgstr ""

#: ../../use_cases-jbq.rst:67
msgid ""
"On systems with a shared account, the user must select their own "
"connection and type the corresponding password."
msgstr ""

#: ../../use_cases-jbq.rst:70
msgid "These are the steps to add system users::"
msgstr ""

#: ../../use_cases-jbq.rst:76
msgid "— adding a new database user"
msgstr ""

#: ../../use_cases-jbq.rst:79
msgid ""
"Ghini has a very minimal interface to user management, it only works with"
" postgresql and it very much lacks maintainance.  We have opened issues "
"that will allow us use it, for the time being we use the ``create-"
"role.sh`` script::"
msgstr ""

#: ../../use_cases-jbq.rst:96
msgid ""
"The redundant ``alter role`` following the ``create role`` lets us apply "
"the same script also for correcting existing accounts."
msgstr ""

#: ../../use_cases-jbq.rst:99
msgid ""
"Our ghini database is called ``bauble``, and ``bauble`` is also the name "
"of our database super user, the only user with ``CREATEROLE`` privilege."
msgstr ""

#: ../../use_cases-jbq.rst:103
msgid ""
"For example, the following invocation would create the user ``willem`` "
"with password ``orange``, on the ``bauble`` database hosted at "
"192.168.5.6::"
msgstr ""

#: ../../use_cases-jbq.rst:109
msgid "Understanding when to update"
msgstr ""

#: ../../use_cases-jbq.rst:111
msgid "Updating the system"
msgstr ""

#: ../../use_cases-jbq.rst:114
msgid ""
"Ubuntu updates are a lot lighter and easier than with Windows. So "
"whenever the system suggests an update, we let it do that. Generally, "
"there's no need to wait during the update nor to reboot after it's done."
msgstr ""

#: ../../use_cases-jbq.rst:119
msgid "Updating ghini"
msgstr ""

#: ../../use_cases-jbq.rst:122
msgid ""
"The first window presented by Ghini looks like this. Normally, you don't "
"need do anything in this window, just press enter and get into the main "
"program screen."
msgstr ""

#: ../../use_cases-jbq.rst:128
msgid ""
"Occasionally, at the top of the screen an information text will appear, "
"telling you that a newer version is available on-line."
msgstr ""

#: ../../use_cases-jbq.rst:133
msgid ""
"The update procedure is simple, and it depends on the operating system "
"you use, we're not explaining here again."
msgstr ""

#: ../../use_cases-jbq.rst:136
msgid ""
"It is generally a good idea updating the software.  If in doubt, contact "
"the author, or write to the group."
msgstr ""

#: ../../use_cases-jbq.rst:139
msgid "understanding ghini initial screen"
msgstr ""

#: ../../use_cases-jbq.rst:141
msgid "Complete screen"
msgstr ""

#: ../../use_cases-jbq.rst:144
msgid "At the moment of writing, our initial screen looked like this:"
msgstr ""

#: ../../use_cases-jbq.rst:148
msgid ""
"Apart from the main application menu, Ghini offers three special "
"interface sections with information and tools to explore the database."
msgstr ""

#: ../../use_cases-jbq.rst:152
msgid "Numeric overview"
msgstr ""

#: ../../use_cases-jbq.rst:155
msgid ""
"The table in the right half of the screen presents a summary of all the "
"registered plants can be observed.  Each entry printed in bold is a link "
"to the query selecting the corresponding objects."
msgstr ""

#: ../../use_cases-jbq.rst:161
msgid "Stored queries"
msgstr ""

#: ../../use_cases-jbq.rst:164
msgid ""
"The lower half of the right hand side contains a set of stored queries.  "
"While you can edit them to your liking, our hints include selecting those"
" accessions that have not been identified at rank species.  And one for "
"the database history."
msgstr ""

#: ../../use_cases-jbq.rst:171
msgid "Query and action buttons"
msgstr ""

#: ../../use_cases-jbq.rst:174
msgid ""
"At the top of this screen you can find the field in which you would enter"
" your searches."
msgstr ""

#: ../../use_cases-jbq.rst:179
msgid ""
"With the |100000000000001C00000020F4C7873186014F2F_png| button, in the "
"form of a house, you can return from your searches to the main screen."
msgstr ""

#: ../../use_cases-jbq.rst:182
msgid ""
"With the |100000000000001B000000207EC6F9075C9D3669_png| button, in the "
"form of an arrow, you can return to your last search."
msgstr ""

#: ../../use_cases-jbq.rst:184
msgid ""
"With the |100000000000001C0000001FB8A1F75F7A5EF877_png| button, in the "
"form of a gear, you can start the \"Query Builder\", which helps you "
"compose complex searches in a simple, graphical way."
msgstr ""

#: ../../use_cases-jbq.rst:189
msgid ""
"We often have volunteers who only work at the garden for a very short "
"time. It was with them in mind that we have developed a `hyper-simplified"
" view <goal.html#hypersimplified-view>`_ on the ghini database structure."
msgstr ""

#: ../../use_cases-jbq.rst:193 ../../use_cases-jbq.rst:597
msgid "Details"
msgstr ""

#: ../../use_cases-jbq.rst:196
msgid ""
"The two figures here show all that our temporary collaborators need to "
"know."
msgstr ""

#: ../../use_cases-jbq.rst:199
msgid "Taxonomy & Collection"
msgstr ""

#: ../../use_cases-jbq.rst:199
msgid "Garden"
msgstr ""

#: ../../use_cases-jbq.rst:204
msgid ""
"At times, the program gives error messages. |dontpanic_png|, retry, or "
"report to the developers."
msgstr ""

#: ../../use_cases-jbq.rst:207
msgid "Network problems"
msgstr ""

#: ../../use_cases-jbq.rst:210
msgid ""
"In order to work, the program needs a stable network connection to the "
"database server. It can happen: you start the program, and it can't "
"connect to our database server. You would then get a rather explicit but "
"very badly typeset error message."
msgstr ""

#: ../../use_cases-jbq.rst:217
msgid "Just ignore it and try again."
msgstr ""

#: ../../use_cases-jbq.rst:219
msgid "Search fails with error"
msgstr ""

#: ../../use_cases-jbq.rst:222
msgid ""
"Sometimes and without any apparent cause, a search will not run "
"successfully, and a window with an error message will be displayed. In "
"this case you only have to try to perform the same search again."
msgstr ""

#: ../../use_cases-jbq.rst:227
msgid "An example of such an error message:"
msgstr ""

#: ../../use_cases-jbq.rst:231
msgid "Search does not return something I just inserted"
msgstr ""

#: ../../use_cases-jbq.rst:234
msgid ""
"Accession codes starting with zero and composed of just numbers, as for "
"example ``016489`` are considered by the software as numbers, so if you "
"don't enclose the search string in quotes, any leading 0 will be stripped"
" and the value will not be found."
msgstr ""

#: ../../use_cases-jbq.rst:239
msgid "Try again, but enclose your search string in single or double quotes."
msgstr ""

#: ../../use_cases-jbq.rst:243
msgid "Number on the label"
msgstr ""

#: ../../use_cases-jbq.rst:243
msgid "corresponding search"
msgstr ""

#: ../../use_cases-jbq.rst:248
msgid ""
"Please note: when you look for a Plant code, not an Accession, the "
"leading zero becomes optional, so in the above example it's maybe easier "
"to type ``16489.1``."
msgstr ""

#: ../../use_cases-jbq.rst:252
msgid ""
"A serious situation happened once, and we absolutely want to prevent it "
"from happening again: a user deleted a genus, with everything that was "
"below it, species and accessions, and synonyms."
msgstr ""

#: ../../use_cases-jbq.rst:256
msgid "Solving it with user permissions"
msgstr ""

#: ../../use_cases-jbq.rst:259
msgid ""
"We propose to have different connection profiles, associated to different"
" database users, each user with all needed permissions."
msgstr ""

#: ../../use_cases-jbq.rst:263
msgid "Full permission (BD-JBQ)"
msgstr ""

#: ../../use_cases-jbq.rst:263
msgid "Only qualified personnel get this kind of access."
msgstr ""

#: ../../use_cases-jbq.rst:268
msgid "Insert and update (BD-JBQ-limitado)"
msgstr ""

#: ../../use_cases-jbq.rst:266
msgid ""
"We use this one for those users who come help us for a limited time, and "
"who did not get a complete introduction to database concepts. It is meant"
" to prevent costly mistakes."
msgstr ""

#: ../../use_cases-jbq.rst:271
msgid "Read only (BD-JBQ-lectura)"
msgstr ""

#: ../../use_cases-jbq.rst:271
msgid "it can be shared with anyone visiting the garden"
msgstr ""

#: ../../use_cases-jbq.rst:273
msgid ""
"You select the connection at start-up, and the software asks you for the "
"password corresponding to the connection you selected."
msgstr ""

#: ../../use_cases-jbq.rst:278
msgid ""
"If you want to review the details of the connection, click on the ▶ next "
"to 'Connection Details', it will change to ▼, and the connection window "
"will be displayed as one of the following:"
msgstr ""

#: ../../use_cases-jbq.rst:286
msgid ""
"As you can see, we are connecting to the same database server, each "
"connection uses the same database on the server, but with different user."
msgstr ""

#: ../../use_cases-jbq.rst:290
msgid "Thinking further about it"
msgstr ""

#: ../../use_cases-jbq.rst:293
msgid ""
"On the other hand, we are questioning if it is at all appropriate, "
"letting any user delete something at such high level as a family, or a "
"genus, or, for that matters, of anything connected to accessions in the "
"collection."
msgstr ""

#: ../../use_cases-jbq.rst:298
msgid ""
"The ghini way to question the software features, is by opening a "
"`corresponding issue "
"<https://github.com/Ghini/ghini.desktop/issues/218>`_."
msgstr ""

#: ../../use_cases-jbq.rst:302
msgid ""
"When contacting the developers, they will definitely ask for technical "
"information, or at least to see a screen-shot.  Help them help you."
msgstr ""

#: ../../use_cases-jbq.rst:305
msgid "Taking a screen-shot"
msgstr ""

#: ../../use_cases-jbq.rst:308
msgid ""
"On Linux there are three ways to create a screen-shot, all involve "
"hitting the 'PrtSc' key.  The most practical one is possibly hitting the "
"'PrtSc' key in combination with Ctrl and Shift. This will start an "
"interactive screen copy tool. You select a rectangle and the area is "
"copied in the clipboard.  Paste it in the email you're writing, or in the"
" chat line where the developers are trying to help you."
msgstr ""

#: ../../use_cases-jbq.rst:316
msgid "Where are the logs"
msgstr ""

#: ../../use_cases-jbq.rst:319
msgid ""
"Ghini continuously saves a very informative log file, in the "
"``~/.bauble/bauble.log`` file.  Don't bother opening it, just send it "
"over.  It contains loads of technical information."
msgstr ""

#: ../../use_cases-jbq.rst:323
msgid "Continuous unmanned alerting"
msgstr ""

#: ../../use_cases-jbq.rst:326
msgid ""
"An other option is to activate the sentry handler. It will notify our "
"sentry server of any serious situations in the software.  If you "
"registered, the developers will know how to contact you if necessary."
msgstr ""

#: ../../use_cases-jbq.rst:331
msgid ""
"To the healthy paranoid: we're not monitoring what you're doing, we're "
"monitoring how our software works.  You can always opt out."
msgstr ""

#: ../../use_cases-jbq.rst:334
msgid ""
"You activate the Sentry handler in the ``:prefs`` page: look for the row "
"with name ``bauble.use_sentry_handler``, if the value is not what you "
"wish, double click on the line and it will change to the other value."
msgstr ""

#: ../../use_cases-jbq.rst:340
msgid "Taxonomy"
msgstr ""

#: ../../use_cases-jbq.rst:342
msgid "Introduction"
msgstr ""

#: ../../use_cases-jbq.rst:344
msgid "Orchidaceae taxonomic complexity"
msgstr ""

#: ../../use_cases-jbq.rst:347
msgid ""
"At the JBQ, we work most of all with orchids, family Orchidaceae, one of "
"the largest plant families, with no less than 850 genera, organized "
"—according to Dressler— in approximately 70 subtribes, 22 tribes, 5 "
"subfamilies.  How we represent this information is not obvious and needs "
"be explained."
msgstr ""

#: ../../use_cases-jbq.rst:352
msgid ""
"The taxonomy of the Orchidaceae family is continuously being reviewed. "
"Genera get added, refused, reorganized, recognized as synonyms, some "
"taxonomists prefer grouping species or genera in a new way, others split "
"them again and differently, botanists of different nationalities may have"
" different views on the matter.  All this sounds very complex and "
"specialistic, but it's part of our daily routine, and it can all be "
"stored in our Ghini database."
msgstr ""

#: ../../use_cases-jbq.rst:360
msgid "Identifying at rank Genus, or Family"
msgstr ""

#: ../../use_cases-jbq.rst:362
msgid "At rank genus"
msgstr ""

#: ../../use_cases-jbq.rst:365
msgid ""
"Ghini-1.0 prescribes that an accession is identified at rank species, in "
"all cases. The current maintainer acknowledges that this is a mistake, "
"coming from the early Bauble days, and which Ghini-1.0 has in common with"
" other botanic software. Until this is fixed, we rely on established "
"practices."
msgstr ""

#: ../../use_cases-jbq.rst:371
msgid ""
"If an accession is identified at rank genus, we add a fictive species in "
"that genus, we don't specify its species epithet (we don't know that) and"
" we add an unranked epithet in the infraspecific information section, "
"like this:"
msgstr ""

#: ../../use_cases-jbq.rst:378
msgid "When displayed in a search result, it shows like this:"
msgstr ""

#: ../../use_cases-jbq.rst:382
msgid "At rank family"
msgstr ""

#: ../../use_cases-jbq.rst:385
msgid ""
"If an accession is only identified at rank family, we need a fictive "
"genus, to which we can add the fictive species. Since our garden is "
"primarily focusing on Orchidaceae, we use the very short name **Zzz** for"
" the fictive genus within the family, like this:"
msgstr ""

#: ../../use_cases-jbq.rst:392
msgid ""
"The current maintainer suggests to use the prefix **Zzz-** and behind the"
" prefix to write the family name, possibly removing the trailing **e**.  "
"Removal of the trailing **e** is useful in order not to get results that "
"include genus names when you as for stuff ending in **aceae**."
msgstr ""

#: ../../use_cases-jbq.rst:398
msgid ""
"Apart from the aforementioned **Zzz** genus in the Orchidaceae family, we"
" follow this suggested practice, so for example our collection would "
"include *Zzz-cactacea* or *Zzz-bromeliacea*."
msgstr ""

#: ../../use_cases-jbq.rst:402
msgid ""
"Remember: our **Zzz** genus is a fictive genus in the **Orchidaceae** "
"family, do not use it as unspecified genus in other families."
msgstr ""

#: ../../use_cases-jbq.rst:406
msgid ""
"Identifying at a rank that is not allowed by the software (eg: Subtribe, "
"or Subfamily)"
msgstr ""

#: ../../use_cases-jbq.rst:408
msgid "At rank subtribe"
msgstr ""

#: ../../use_cases-jbq.rst:411
msgid ""
"We sometimes can't identify a taxon at rank genus, but we do manage to be"
" more precise than just \"it's an orchid\". Quite often we are able to "
"indicate the subtribe, this is useful when you want to produce hybrids."
msgstr ""

#: ../../use_cases-jbq.rst:416
msgid ""
"The software does not let us store ranks which are intermediate between "
"family and genus, so we need to invent something, and this is what we do:"
msgstr ""

#: ../../use_cases-jbq.rst:420
msgid ""
"We insert a fictive genus, naming it as the subtribe, prefixing it with "
"'Zzx-', like in this example:"
msgstr ""

#: ../../use_cases-jbq.rst:425
msgid "This Zzx-Laeliinae is some genus in the Laeliinae subtribe."
msgstr ""

#: ../../use_cases-jbq.rst:427
msgid ""
"In order to be able to select genera by subtribe, we also add a note to "
"the Zzx-Laeliinae fictive genus as well as for all real genera in that "
"subtribe, note category subtribus, note value the subtribe name."
msgstr ""

#: ../../use_cases-jbq.rst:432
msgid "This allows for queries like:"
msgstr ""

#: ../../use_cases-jbq.rst:436
msgid ""
"We are very much looking forward to seeing that `issue-9 "
"<https://github.com/Bauble/bauble.classic/issues/9>`_ solved!"
msgstr ""

#: ../../use_cases-jbq.rst:439
msgid "At rank subfamily, tribe"
msgstr ""

#: ../../use_cases-jbq.rst:442
msgid ""
"Just as we reserved the prefix Zzx- for subtribe, we reserve the prefixes"
" Zzy- for tribe, Zzw- for subfamily."
msgstr ""

#: ../../use_cases-jbq.rst:445
msgid ""
"In particular, the subfamily information is relevant, because there are "
"subfamilies within the Orchidaceae family which are not further "
"separated."
msgstr ""

#: ../../use_cases-jbq.rst:449
msgid "Editing the Accession identification - the Species details"
msgstr ""

#: ../../use_cases-jbq.rst:451
msgid "Placeholder species for individual accessions"
msgstr ""

#: ../../use_cases-jbq.rst:454
msgid ""
"Scenario one describes the identification of a single accession, which "
"had been associated to a \"generic\", placeholder species, something like"
" “*Zzz* sp” or “*Vanda* sp”;"
msgstr ""

#: ../../use_cases-jbq.rst:458
msgid ""
"In this case, when the plant species becomes known, we change the "
"association in the accession, selecting a different species."
msgstr ""

#: ../../use_cases-jbq.rst:463
msgid ""
"We do not edit the species, because there might be totally unrelated "
"accessions connected to the same placeholder species."
msgstr ""

#: ../../use_cases-jbq.rst:466
msgid "Unknown species for multiple accessions"
msgstr ""

#: ../../use_cases-jbq.rst:469
msgid ""
"A different case is when we have a whole batch of accessions, all "
"obviously the same species, but we haven't been able to identify it. In "
"this case, we associate the accessions with an incompletely specified "
"species, something like “*Zzz* sp-59”, preferably adding the taxonomist's"
" name, who made the association."
msgstr ""

#: ../../use_cases-jbq.rst:475
msgid ""
"A species like “*Vanda* sp-018599” is not a placeholder species, it is a "
"very concrete species, which we haven't yet identified."
msgstr ""

#: ../../use_cases-jbq.rst:480
msgid ""
"In this case, when the species gets identified (and it could even be a "
"species nova), we directly edit the species, so all accessions that refer"
" to it get the change."
msgstr ""

#: ../../use_cases-jbq.rst:484
msgid "A new plants is relative to a species not yet in our collection."
msgstr ""

#: ../../use_cases-jbq.rst:486
msgid "Last minute species"
msgstr ""

#: ../../use_cases-jbq.rst:489
msgid ""
"We start this from the Accession window and it's very simple, just click "
"on the **+** next to the species name, we get into the Species window."
msgstr ""

#: ../../use_cases-jbq.rst:493
msgid "Adding a species and using online taxonomic services"
msgstr ""

#: ../../use_cases-jbq.rst:495
msgid "Adding a new species — the plant list."
msgstr ""

#: ../../use_cases-jbq.rst:498
msgid ""
"We start the obvious way: type the genus epithet, possibly select it from"
" the completion list, then type the species epithet, or at least your "
"best guess."
msgstr ""

#: ../../use_cases-jbq.rst:504
msgid ""
"Next to the species epithet field there's a small button, |green_ball|, "
"which connects us to the plant list.  Click on it, a message area appears"
" at the top of the window."
msgstr ""

#: ../../use_cases-jbq.rst:510
msgid ""
"Depending on the speed of your internet connection, but also on how close"
" your best guess is to a correct published name, the top area will change"
" to something like this:"
msgstr ""

#: ../../use_cases-jbq.rst:516
msgid "Accept the hint and it will be as if you had typed the data yourself."
msgstr ""

#: ../../use_cases-jbq.rst:520
msgid "Reviewing a whole selection — TNRS."
msgstr ""

#: ../../use_cases-jbq.rst:523
msgid ""
"This is described in the manual, it's extremely useful, don't forget "
"about it."
msgstr ""

#: ../../use_cases-jbq.rst:528
msgid "Let the database fit the garden"
msgstr ""

#: ../../use_cases-jbq.rst:530
msgid ""
"A never-ending task is reviewing what we have in the garden and have it "
"match what we have in the database."
msgstr ""

#: ../../use_cases-jbq.rst:533
msgid "Initial status and variable resources"
msgstr ""

#: ../../use_cases-jbq.rst:536
msgid ""
"When we adopted ghini, we imported into it all that was properly "
"described in a filemaker database. That database focused solely on "
"Orchids and even so it was far from complete.  In practice, we still meet"
" labeled plants in the garden which have never been inserted in the "
"database."
msgstr ""

#: ../../use_cases-jbq.rst:542
msgid ""
"From time to time, we manage to get resources to review the garden, "
"comparing it to the collection in the database, and the main activity is "
"to insert accession codes to the database, take pictures of the plant in "
"question, and note its location, all tasks that are described in the "
"remainder of this section."
msgstr ""

#: ../../use_cases-jbq.rst:548
msgid ""
"The small Android app ghini.pocket was added to the Ghini family while a "
"Ghini programmer was here in Quito.  It helps us take a snapshot of the "
"database in our pocket while walking in the garden, but it also allows "
"for a very swift inventory procedure."
msgstr ""

#: ../../use_cases-jbq.rst:553
msgid "Inventory procedure"
msgstr ""

#: ../../use_cases-jbq.rst:556
msgid ""
"We start ghini.pocket, we write down the name of the location where we "
"will be conducting the inventory, for example (INV 1) for greenhouse 1.  "
"We enter (type or scan if the plant has bar code or QR code) the "
"accession code and we look it up in ghini.pocket."
msgstr ""

#: ../../use_cases-jbq.rst:561
msgid ""
"A side effect of performing the search is that ghini.pocket writes the "
"date with time, location and the code looked for in a text file that can "
"later be imported into the database."
msgstr ""

#: ../../use_cases-jbq.rst:565
msgid ""
"For a greenhouse with around 1000 plants our estimates suggest you will "
"need two days, working at relaxed pace, from 8:00 am to 5:00 pm."
msgstr ""

#: ../../use_cases-jbq.rst:569
msgid ""
"After having imported the file generated by ghini.pocket, it is easy to "
"reveal which plants are missing. For example: If we did the inventory of "
"the INV3 from 4 to 5 September, this is the corresponding search::"
msgstr ""

#: ../../use_cases-jbq.rst:576
msgid ""
"All of these plants can be marked as dead, or lost, according to garden "
"policy."
msgstr ""

#: ../../use_cases-jbq.rst:579
msgid "Visualizing the need of taxonomic attention"
msgstr ""

#: ../../use_cases-jbq.rst:582
msgid ""
"Our protocol includes one more detail intended to visually highlight "
"plants that need the attention of a taxonomist."
msgstr ""

#: ../../use_cases-jbq.rst:587
msgid ""
"A plant that only appears in our data base identified at family level or "
"that wasn't yet the database receives a visual signal (e.g.: a wooden or "
"plastic stick, for ice cream or french fries), to highlight that it is "
"not identified. In this way the taxonomist in charge, when making a tour "
"of the greenhouse can quickly spot them and possibly proceed to add their"
" identification in the database."
msgstr ""

#: ../../use_cases-jbq.rst:595
msgid "Naming convention in garden locations"
msgstr ""

#: ../../use_cases-jbq.rst:601
msgid "description"
msgstr ""

#: ../../use_cases-jbq.rst:603
msgid "Reserved to cactus plants next to the orchids exposition glasshouses."
msgstr ""

#: ../../use_cases-jbq.rst:606
msgid "Nepenthaceae exibition"
msgstr ""

#: ../../use_cases-jbq.rst:608
msgid ""
"orquidearios de calor en el jardín (1A a 9C son lugares especificos entre"
" del orquideario)"
msgstr ""

#: ../../use_cases-jbq.rst:611
msgid ""
"orquidearios de frío en el jardín (1A a 5I son lugares específicos dentro"
" del orquideario)"
msgstr ""

#: ../../use_cases-jbq.rst:614
msgid "invernadero 1 (calor)"
msgstr ""

#: ../../use_cases-jbq.rst:616
msgid "invernadero 2 (frío)"
msgstr ""

#: ../../use_cases-jbq.rst:618
msgid "invernadero 3 (calor)"
msgstr ""

#: ../../use_cases-jbq.rst:621
msgid "Adding an Accession for a Plant"
msgstr ""

#: ../../use_cases-jbq.rst:623
msgid ""
"Obviously we keep increasing our collection, with plants coming from "
"commercial sources, or collected from the wild, more rarely coming from "
"expeditions to remote areas of our country, or we receive plants which "
"were illegally collected."
msgstr ""

#: ../../use_cases-jbq.rst:628
msgid ""
"Sometimes we have to add plants to the digital collection, just because "
"we have them physically, found in the garden, with or without its label, "
"but without their digital counterpart."
msgstr ""

#: ../../use_cases-jbq.rst:632
msgid "Existing plant, found in the garden with its own label"
msgstr ""

#: ../../use_cases-jbq.rst:635
msgid ""
"This activity starts with a plant, which was found at a specific garden "
"location, an accession label, and the knowledge that the accession code "
"is not in the database."
msgstr ""

#: ../../use_cases-jbq.rst:647
msgid ""
"For this example, let's assume we are going to insert this information in"
" the database."
msgstr ""

#: ../../use_cases-jbq.rst:651
msgid "Accession"
msgstr ""

#: ../../use_cases-jbq.rst:651
msgid "Species"
msgstr ""

#: ../../use_cases-jbq.rst:651
msgid "Location"
msgstr ""

#: ../../use_cases-jbq.rst:653
msgid "Invernadero 1 (calor)"
msgstr ""

#: ../../use_cases-jbq.rst:656
msgid ""
"We go straight into the Accession Editor, start typing the species name "
"in the corresponding field.  Luckily, the species was already in the "
"database, otherwise we would use the **Add** button next to the entry "
"field."
msgstr ""

#: ../../use_cases-jbq.rst:663
msgid ""
"We select the correct species, and we fill in a couple more fields, "
"leaving the rest to the default values:"
msgstr ""

#: ../../use_cases-jbq.rst:667 ../../use_cases-jbq.rst:702
msgid "Accession ID"
msgstr ""

#: ../../use_cases-jbq.rst:667 ../../use_cases-jbq.rst:702
msgid "Type of Material"
msgstr ""

#: ../../use_cases-jbq.rst:667 ../../use_cases-jbq.rst:702
msgid "Quantity"
msgstr ""

#: ../../use_cases-jbq.rst:667
msgid "Provenance"
msgstr ""

#: ../../use_cases-jbq.rst:669
msgid "Unknown"
msgstr ""

#: ../../use_cases-jbq.rst:672 ../../use_cases-jbq.rst:707
msgid ""
"After this, we continue to the Plant editor, by clicking on **Add "
"Plants**."
msgstr ""

#: ../../use_cases-jbq.rst:675
msgid ""
"We do not fill in the Accession's \"**Intended Locations**\", because we "
"don't know what was the original intention when the plant was first "
"acquired."
msgstr ""

#: ../../use_cases-jbq.rst:679
msgid ""
"In the Plant Editor, we insert the Quantity and the Location.  And we're "
"done."
msgstr ""

#: ../../use_cases-jbq.rst:682
msgid "The plant is now part of the database:"
msgstr ""

#: ../../use_cases-jbq.rst:686
msgid "New accession: plant just entering the garden"
msgstr ""

#: ../../use_cases-jbq.rst:689
msgid ""
"This activity starts with a new Plant, just acquired from a known Source,"
" a plant label, and an intended Location in the garden."
msgstr ""

#: ../../use_cases-jbq.rst:692
msgid ""
"We mostly do the same as for the case that a plant is found in the "
"garden, there are two differences: (1) we know the source of the plant; "
"(2) acquiring this plant was a planned action, and we intend to place it "
"at a specific location in the garden."
msgstr ""

#: ../../use_cases-jbq.rst:697
msgid ""
"Again, we go straight into the Accession Editor, start typing the species"
" and we either select if from the completion list or we add it on the "
"fly."
msgstr ""

#: ../../use_cases-jbq.rst:702
msgid "Source"
msgstr ""

#: ../../use_cases-jbq.rst:704
msgid "specified"
msgstr ""

#: ../../use_cases-jbq.rst:710
msgid "In the Plant Editor, we insert the Quantity and the Location."
msgstr ""

#: ../../use_cases-jbq.rst:712
msgid ""
"Please note that the plant may be initially placed in a greenhouse, "
"before it reaches its intended location in the garden."
msgstr ""

#: ../../use_cases-jbq.rst:715
msgid "Existing plant, found in the garden without its label"
msgstr ""

#: ../../use_cases-jbq.rst:718
msgid ""
"When this happens, we can't be sure the plant had never been in the "
"collection, so we act as if we were re-labeling the plant.  This is "
"discussed in the next section, but we fall back to the case of a new "
"accession."
msgstr ""

#: ../../use_cases-jbq.rst:723
msgid ""
"When we physically associate a label to a plant, there's always the "
"chance that something happens either to the plant (it may die) or to the "
"label (it may become unreadable), or to the association (they may be "
"separated). We have software-aided protocols for these events."
msgstr ""

#: ../../use_cases-jbq.rst:728
msgid "We find a dead plant"
msgstr ""

#: ../../use_cases-jbq.rst:731
msgid ""
"Whenever a plant is found dead, we collect its label and put it in a box "
"next to the main data insertion terminal, the box is marked “dead "
"plants”."
msgstr ""

#: ../../use_cases-jbq.rst:734
msgid ""
"Definitely at least once a week, the box is emptied and the database is "
"updated with this information."
msgstr ""

#: ../../use_cases-jbq.rst:737
msgid ""
"Dead plants aren't *removed* from the database, they stay there but get a"
" **quantity** zero. If the cause of death is known, this is also written "
"in the database."
msgstr ""

#: ../../use_cases-jbq.rst:741
msgid ""
"Please once again remember that a **Plant** is not an **Accession** and "
"please remember we do not remove objects from the database, we just add "
"to their history."
msgstr ""

#: ../../use_cases-jbq.rst:745
msgid ""
"Insert the complete plant code (something like ``012345.1``, or "
"``2017.0001.3``, and you don't need leading zeros nor quotes), right "
"click on the corresponding row, and click on **edit**. change the "
"quantity to 0, fill in the reason and preferably also the date of change."
msgstr ""

#: ../../use_cases-jbq.rst:750
msgid ""
"If you need add any details about the plant death, please use a **note**,"
" and re-use the note category \"death_cause\"."
msgstr ""

#: ../../use_cases-jbq.rst:753
msgid ""
"Plants with **quantity** zero are shown with a different colour in the "
"results view.  This helps distinguish them from live plants."
msgstr ""

#: ../../use_cases-jbq.rst:756
msgid "We find a plant without a label"
msgstr ""

#: ../../use_cases-jbq.rst:759
msgid ""
"We can't be sure the plant had ever been in the collection or not. We "
"assume it had, and that its label was lost."
msgstr ""

#: ../../use_cases-jbq.rst:762
msgid ""
"Losing a plant label is unfortunate, but it just sometimes happens. What "
"we do is to put a new label to the plant, and to clearly state that the "
"label is a replacement of an original one."
msgstr ""

#: ../../use_cases-jbq.rst:766
msgid ""
"We then handle the case as if it was a new accession, plus we add a note "
"to the accession, category “label”, text “relabeled”."
msgstr ""

#: ../../use_cases-jbq.rst:770
msgid "Keeping track of different sources of plant material"
msgstr ""

#: ../../use_cases-jbq.rst:772
msgid "What different sources we can have"
msgstr ""

#: ../../use_cases-jbq.rst:775
msgid ""
"In this botanical garden, we receive plants from different types of "
"origin. It could be from expeditions (plants coming from nature, "
"collected with legal permission from MAE - Ecuadorian Environment "
"Ministry), donated plants mostly coming as gifts from collectors or "
"orchid commercialization enterprises, purchased, or confiscated plants "
"(usually coming from MAE raids around the country)."
msgstr ""

#: ../../use_cases-jbq.rst:783
msgid "If the plant comes from a wild source"
msgstr ""

#: ../../use_cases-jbq.rst:786
msgid ""
"The accession editor offers the option \"origin\" option. When a plant is"
" traceable to a wild source, we can specified its specific origin. We "
"want to comply with ITF2, and ghini-1.0 only partly respects that "
"standard. The ITF2 complying options are:"
msgstr ""

#: ../../use_cases-jbq.rst:791
msgid "Wild: Accession of wild source."
msgstr ""

#: ../../use_cases-jbq.rst:792
msgid "Cultivated: Propagule(s) from a wild source plant."
msgstr ""

#: ../../use_cases-jbq.rst:793
msgid "Not Wild: Accession not traceable to a wild source."
msgstr ""

#: ../../use_cases-jbq.rst:794
msgid "Insufficient data"
msgstr ""

#: ../../use_cases-jbq.rst:796
msgid ""
"In the case of a donated plant, it is better to put detail information "
"just as a note in the plant accession; in the case of a plant with an "
"unknown origin, we select the Insufficient data option."
msgstr ""

#: ../../use_cases-jbq.rst:800
msgid "Using the source tab in the accession editor"
msgstr ""

#: ../../use_cases-jbq.rst:803
msgid ""
"In this section we can create or use a contact, our source of plant "
"material. It could be from an expedition to a collecting place, and in "
"this case we would specify the region and the expedition name, or could "
"be the name of the person or enterprise donating a specific batch of "
"plants."
msgstr ""

#: ../../use_cases-jbq.rst:811
msgid ""
"Once you choose or create the contact information, this section deploys "
"more options, here you can specify the region, where you can choose the "
"country of origin, and a specific location within the region, "
"georeferencing information (including the GPS data), habitat description "
"collector name. For the last one, I recommend also to write the specific "
"date next to the collector name (eg. Luis Baquero 11/10/2016)."
msgstr ""

#: ../../use_cases-jbq.rst:819
msgid "Donated, bought or confiscated plants"
msgstr ""

#: ../../use_cases-jbq.rst:822
msgid ""
"However useful for expeditions or for donors where the main information "
"is geographic, this source tab is not very practical in our remaining "
"cases: we handle three more categories: confiscated, purchased and "
"donated, for these categories the options available in the source tab do "
"not apply: too much information and not to the point."
msgstr ""

#: ../../use_cases-jbq.rst:828
msgid "In these cases, we add a set of notes, according to the case."
msgstr ""

#: ../../use_cases-jbq.rst:830
msgid "— Donated plants"
msgstr ""

#: ../../use_cases-jbq.rst:833
msgid ""
"If the plant was donated by individual, we add the individual among our "
"contacts and specify it as source, then we add the notes:"
msgstr ""

#: ../../use_cases-jbq.rst:837 ../../use_cases-jbq.rst:850
#: ../../use_cases-jbq.rst:864
msgid "category"
msgstr ""

#: ../../use_cases-jbq.rst:837 ../../use_cases-jbq.rst:850
#: ../../use_cases-jbq.rst:864
msgid "text"
msgstr ""

#: ../../use_cases-jbq.rst:839
msgid "gift"
msgstr ""

#: ../../use_cases-jbq.rst:840
msgid "Contribución científica al JBQ"
msgstr ""

#: ../../use_cases-jbq.rst:843
msgid "— Bought plants"
msgstr ""

#: ../../use_cases-jbq.rst:846
msgid ""
"If the plant was bought, we add the previous owner among our contacts and"
" specify it as source, then we add the notes:"
msgstr ""

#: ../../use_cases-jbq.rst:852
msgid "purchase"
msgstr ""

#: ../../use_cases-jbq.rst:853
msgid "optional, free text"
msgstr ""

#: ../../use_cases-jbq.rst:854
msgid "the invoice number"
msgstr ""

#: ../../use_cases-jbq.rst:857
msgid "— Confiscated plants"
msgstr ""

#: ../../use_cases-jbq.rst:860
msgid ""
"If the plant was confiscated, we add the previous owner among our "
"contacts and specify it as source, then we add the notes:"
msgstr ""

#: ../../use_cases-jbq.rst:866
msgid "confiscated"
msgstr ""

#: ../../use_cases-jbq.rst:867
msgid "possibly, legal details, law number ..."
msgstr ""

#: ../../use_cases-jbq.rst:871
msgid "Producing or reproducing labels"
msgstr ""

#: ../../use_cases-jbq.rst:873
msgid "Refreshing plant labels"
msgstr ""

#: ../../use_cases-jbq.rst:876
msgid ""
"Sometimes we refresh the labels, for example all that is in a greenhouse,"
" or maybe just a set of plants because their labels risk becoming "
"unreadable."
msgstr ""

#: ../../use_cases-jbq.rst:880
msgid ""
"In the first case it's easy selecting all plants in the Location, we just"
" type the location name, or give the search ``location like <location "
"name>``."
msgstr ""

#: ../../use_cases-jbq.rst:884
msgid ""
"The second case it's a bit trickier.  What we do is to create a temporary"
" **Tag**, and use it to tag all plants that were found in need for a new "
"label."
msgstr ""

#: ../../use_cases-jbq.rst:888
msgid ""
"Given the selection, we start the report tool, using the mako "
"``accession-label.svg`` template.  We reset its options to default "
"values, and since we're using a simple printer, we set the colour to "
"``black`` instead of ``blue``, which is meant for engraving."
msgstr ""

#: ../../use_cases-jbq.rst:893
msgid "Preparing labels for non-database plants"
msgstr ""

#: ../../use_cases-jbq.rst:896
msgid ""
"To prepare the batch of 72 labels, we use a mako report template, named "
"``accession-label.svg``.  This template accepts parameters, this is an "
"example that would produce labels from 025801 all the way to 025872."
msgstr ""

#: ../../use_cases-jbq.rst:903
msgid ""
"Labels come for us in two flavours: (1) either new plants just being "
"acquired by the garden; (2) or plants in the garden, found without a "
"label. We distinguish the two cases by adding a 'ret' extra text for "
"relabeled plants."
msgstr ""

#: ../../use_cases-jbq.rst:908
msgid "We keep two boxes with labels of the two types, ready to be used."
msgstr ""

#: ../../use_cases-jbq.rst:910
msgid ""
"Our garden has two exposition greenhouses, and several warm and cold "
"greenhouses where we keep the largest part of our collection.  Plants are"
" moved to the exposition when flowering and back to the \"warehouse\" "
"when less interesting for the exposition. For each plant in our "
"collection we need to know its current locations and history of "
"movements."
msgstr ""

#: ../../use_cases-jbq.rst:916
msgid "Planned action"
msgstr ""

#: ../../use_cases-jbq.rst:919
msgid ""
"The action starts by moving the plants around, and collecting the plant "
"code either on paper, or in our mobile app, if we had one."
msgstr ""

#: ../../use_cases-jbq.rst:922
msgid ""
"We then go to the desktop terminal and revise all plants one by one "
"changing their location in the database.  It is important that the date "
"of the location change is correctly memorized, because this tells us how "
"long a plant stays in the exposition."
msgstr ""

#: ../../use_cases-jbq.rst:927
msgid ""
"If we had a mobile app, we would just upload the info to the server and "
"we would be done."
msgstr ""

#: ../../use_cases-jbq.rst:930
msgid "Ex-post correction"
msgstr ""

#: ../../use_cases-jbq.rst:933
msgid ""
"While revising the garden, we find a plant at a location that is not what"
" the database says.  We update the database information."
msgstr ""

#: ../../use_cases-jbq.rst:936
msgid ""
"For example, the plant belonging to accession “012142”, species "
"“*Acineta* sp”, was found in “Invernadero 1”, while the database says it "
"is in “ICAlm3”."
msgstr ""

#: ../../use_cases-jbq.rst:939
msgid ""
"All we do is find the Plant in the database and update its information.  "
"We do not change anything in the initial Accession information, just the "
"current Plant information."
msgstr ""

#: ../../use_cases-jbq.rst:943
msgid ""
"We type the accession code in the search entry field, with quotes, hit "
"enter. The search results now shows the accession, and it tells us how "
"many plants belong to it.  Click on the squared **+** in the results row,"
" so we now also see a row for the plant belonging to the accession."
msgstr ""

#: ../../use_cases-jbq.rst:948
msgid ""
"Right click on the Plant row, the three options will show: “Edit, Split, "
"Delete”, select Edit, you land in the Plant Editor."
msgstr ""

#: ../../use_cases-jbq.rst:951
msgid "Just correct the Location field, and click on OK."
msgstr ""

#: ../../use_cases-jbq.rst:953
msgid "The InfoBox contains information about the last change to the object:"
msgstr ""

#: ../../use_cases-jbq.rst:958
msgid ""
"For plants, even more interesting, it builds a history of changes, list "
"that includes Location changes, or Quantity changes."
msgstr ""

#: ../../use_cases-jbq.rst:963
msgid ""
"As plants enter the flowering stage, we can review their identification "
"directly, or we take pictures of details of the flower, hoping that a "
"visiting specialist could help completing the identification."
msgstr ""

#: ../../use_cases-jbq.rst:967
msgid "Adding pictures"
msgstr ""

#: ../../use_cases-jbq.rst:970
msgid ""
"We are practicing with ODK Collect, a small program running on hand-held "
"android devices.  Ghini's use of ODK Collect hasn't yet frozen to a best "
"practice.  Do have a look at the `corresponding issue "
"<https://github.com/Ghini/ghini.desktop/issues/243>`_ on github."
msgstr ""

#: ../../use_cases-jbq.rst:976
msgid ""
"Regularly, we need producing reports about our collection that the "
"Ecuadorian Environment Ministry (MAE) requires and that justify the very "
"existence of the garden."
msgstr ""

#: ../../use_cases-jbq.rst:980
msgid "Producing reports"
msgstr ""

#: ../../use_cases-jbq.rst:983
msgid ""
"Each year the botanic garden has to submit a report (annual report of "
"management and maintenance of orchids collection) complying to the "
"requirements of the Ecuadorian Ministry of the Environment."
msgstr ""

#: ../../use_cases-jbq.rst:987
msgid ""
"To this end, we start selecting the plants we have to include in the "
"report. It might be all acquisition in the past year::"
msgstr ""

#: ../../use_cases-jbq.rst:992
msgid ""
"or all plants within a location, or all plants belonging to a species, or"
" just everything (but this will take time)::"
msgstr ""

#: ../../use_cases-jbq.rst:999
msgid ""
"Having selected the database objects which we want in the report, we "
"start the report tool, which acts on the selection."
msgstr ""

#: ../../use_cases-jbq.rst:1003
msgid "Searching the database"
msgstr ""

#: ../../use_cases-jbq.rst:1005
msgid ""
"You search the database in order to edit the data further, or because you"
" want to produce a report. Anyway you start with typing something in the "
"search field"
msgstr ""

#: ../../use_cases-jbq.rst:1011
msgid "and you hope to see your result in the search result view."
msgstr ""

#: ../../use_cases-jbq.rst:1013
msgid "Search in order to edit (plant or accession)"
msgstr ""

#: ../../use_cases-jbq.rst:1016
msgid ""
"When searching in order to edit, you want to be very specific, and select"
" as few objects as possible. The most fine-tuned search is the one based "
"on plant number: you know the code, you get one object."
msgstr ""

#: ../../use_cases-jbq.rst:1020
msgid "If your plant is not there, the screen would look like this:"
msgstr ""

#: ../../use_cases-jbq.rst:1024
msgid "Other example, plant ``007701.1`` is in the database:"
msgstr ""

#: ../../use_cases-jbq.rst:1028
msgid ""
"All fields with a darker background in the infobox on the right hand side"
" are hyperlinks to other objects in the database. Clicking on them will "
"either replace the text in the search field and execute the query, or "
"will simply add the object to the results."
msgstr ""

#: ../../use_cases-jbq.rst:1033
msgid "Clicking on the accession does the latter."
msgstr ""

#: ../../use_cases-jbq.rst:1037
msgid ""
"We now have both Plant or Accession in the search result view and we can "
"now edit either or both."
msgstr ""

#: ../../use_cases-jbq.rst:1040
msgid "Search in order to report"
msgstr ""

#: ../../use_cases-jbq.rst:1043
msgid ""
"When searching in order to create a report, you want to be both specific "
"(you don't want to report about irrelevant objects) and broad (you don't "
"want to report about a single object)."
msgstr ""

#: ../../use_cases-jbq.rst:1047
msgid ""
"Sometimes the report itself suggests the query, as for example: all "
"plants in greenhouse 3; or: all plants belonging to endangered species "
"(we store this information in a note associated to the species); or: all "
"plants added to the collection this year; ::"
msgstr ""

#: ../../use_cases-jbq.rst:1056
msgid "Otherwise a flexible way to achieve this is to work with **Tags**."
msgstr ""

#: ../../use_cases-jbq.rst:1058
msgid "Using **Tags** as enhanced searching"
msgstr ""

#: ../../use_cases-jbq.rst:1061
msgid ""
"Sometimes we have to take the same action on objects of the same type, "
"but we don't manage to quickly think of a search query that would group "
"all that we need and exclude all we do not need."
msgstr ""

#: ../../use_cases-jbq.rst:1065
msgid ""
"This is one possible use of **Tags**.  We start with a selection, we tag "
"all objects in the selection under a new temporary tag. Let's say we call"
" it \"temporary\"."
msgstr ""

#: ../../use_cases-jbq.rst:1069
msgid ""
"We continue searching and adding objects to the temporary tag until the "
"tag identifies all that we need."
msgstr ""

#: ../../use_cases-jbq.rst:1072
msgid ""
"Finally from the Tags menu we select the one we just created (in our "
"example this corresponds to the search ``tag=\"temporary\"``) and we can "
"invoke the report."
msgstr ""

#: ../../use_cases-jbq.rst:1076
msgid ""
"When we're done with a temporary tag, there's no point in leaving it "
"around, so we just delete it."
msgstr ""

#: ../../use_cases-jbq.rst:1081
msgid "Be aware of the available search strategies"
msgstr ""

#: ../../use_cases-jbq.rst:1084
msgid ""
"This is nicely documented, \"più non dimandare\" and `read the docs "
"<searching.html>`_."
msgstr ""

#: ../../use_cases.rst:2
msgid "Contributed recipes collection"
msgstr ""

#: ../../use_cases.rst:4
msgid ""
"This page presents lists of use cases. If you're looking for straight, "
"practical information, you are at the right place. If you prefer a "
"thorough presentation of the software and database structure, check the "
"section `software for botanical gardens <goal.html#botanic-garden-"
"software>`_"
msgstr ""

#: ../../use_cases.rst:9
msgid ""
"All material here has been contributed by gardens using the software and "
"sharing their experiences back to the user community."
msgstr ""

#: ../../use_cases.rst:12
msgid "The authors of the software wish to thank all dearly."
msgstr ""

#: ../../users.rst:2
msgid "Managing Users"
msgstr ""

#: ../../users.rst:4
msgid "The Ghini users plugin is only available on PostgreSQL based databases."
msgstr ""

#: ../../users.rst:7
msgid ""
"The Ghini Users Plugin will allow you to create and manage the "
"permissions of users for your Ghini database."
msgstr ""

#: ../../users.rst:10
msgid ""
"You must log in to your database as a user with ``CREATEROLE`` privilege "
"in order to manage other users."
msgstr ""

#: ../../users.rst:14
msgid "Creating Users"
msgstr ""

#: ../../users.rst:15
msgid "To create a new user..."
msgstr ""

#: ../../users.rst:19
msgid "Permissions"
msgstr ""

#: ../../users.rst:20
msgid "Ghini allows read, write and execute permissions."
msgstr ""

#~ msgid "rank genus"
#~ msgstr ""

#~ msgid "rank family"
#~ msgstr ""

#~ msgid "subtribe"
#~ msgstr ""

#~ msgid "subfamily, tribe"
#~ msgstr ""

#~ msgid "representing the planned space"
#~ msgstr ""

#~ msgid ""
#~ "Botanic gardens are mostly organized in"
#~ " beds and greenhouses, and larger "
#~ "beds are probably organized in smaller"
#~ " sections, while greenhouses might be "
#~ "organized in tables, shelves, walls."
#~ msgstr ""

#~ msgid ""
#~ "In the above software view on "
#~ "garden data, the numeric indications at"
#~ " either end of the line connecting"
#~ " ``Location`` and ``Planting`` tells us "
#~ "that every ``Planting`` can only belong"
#~ " to exactly one (1) ``Location``, "
#~ "while every ``Location`` may contain "
#~ "zero or more (0..n) ``Plantings``."
#~ msgstr ""

#~ msgid ""
#~ "A consequence of this constraint in "
#~ "the database is that your database "
#~ "needs ``Locations`` in order to place"
#~ " ``Plants`` in the garden, so a "
#~ "good practice is to start by "
#~ "entering a database ``Location`` for "
#~ "every physical bed section, greenhouse "
#~ "table, or whatever might be the "
#~ "basic location unit in your garden."
#~ msgstr ""

#~ msgid "accepting a plant in the collection"
#~ msgstr ""

#~ msgid ""
#~ "When a plant (or a group of "
#~ "genetically identical plants) enters the "
#~ "collection,"
#~ msgstr ""

#~ msgid "building the history of a living plant"
#~ msgstr ""

#~ msgid "managing contacts"
#~ msgstr ""

#~ msgid "adding a taxonomist's opinion"
#~ msgstr ""

#~ msgid "reproducing plants"
#~ msgstr ""

#~ msgid "updating taxonomy tree"
#~ msgstr ""

#~ msgid "producing report"
#~ msgstr ""

#~ msgid "engraving labels"
#~ msgstr ""

#~ msgid "``sudo adduser mlopez``"
#~ msgstr ""

#~ msgid ""
#~ "right-click on it, select run as"
#~ " administrator, confirm you want it "
#~ "to make changes to your computer. "
#~ "These changes are in the Start "
#~ "Menu only: create the Ghini group, "
#~ "place the Ghini shortcut."
#~ msgstr ""

#~ msgid ""
#~ "An ``Accession`` represents the action "
#~ "of receiving plant material in the "
#~ "garden. As such, ``Accession`` is an "
#~ "abstract concept, it links physical "
#~ "living ``Plantings`` —groups of plants "
#~ "placed each at a ``Location`` in "
#~ "the garden— to the corresponding "
#~ "``Species``. An ``Accession`` has zero "
#~ "or more ``Plantings`` associated to it"
#~ " (0..n), and it is at all times"
#~ " connected to exactly 1 ``Species``. "
#~ "Each ``Planting`` belongs to exactly one"
#~ " ``Accession``, each ``Species`` may have"
#~ " multiple ``Accessions`` relating to it."
#~ msgstr ""

#~ msgid ""
#~ "Our workflow includes moving plants "
#~ "around in the garden, keep track "
#~ "of current locations and history of "
#~ "movements."
#~ msgstr ""

#~ msgid ""
#~ "We then go to the desktop terminal"
#~ " and revise all plants one by "
#~ "one changing their location in the "
#~ "database."
#~ msgstr ""

#~ msgid ""
#~ "Last time we tested, some of the"
#~ " dependencies could not be installed "
#~ "on MacOSX 10.5 and we assume "
#~ "similar problems would also show on "
#~ "older OSX versions.  Ghini has been "
#~ "successfully tested with 10.7, 10.9 and"
#~ " 10.12."
#~ msgstr ""

#~ msgid "Mac running OSX 10.12 —Sierra—"
#~ msgstr ""

#~ msgid ""
#~ "On OSX 10.12, ``brew`` reports that "
#~ "``gettext`` is already installed, but "
#~ "then it won't let us find it. "
#~ "A solution is to run the following"
#~ " line::"
#~ msgstr ""

#~ msgid "Troubleshooting"
#~ msgstr ""

#~ msgid "any error related to lxml."
#~ msgstr ""

#~ msgid ""
#~ "In order to be able to compile "
#~ "lxml, you have to install a C "
#~ "compiler (on GNU/Linux this would be "
#~ "the ``gcc`` package) and Cython (a "
#~ "Python specialization, that gets compiled "
#~ "into C code. Note: Cython is not"
#~ " CPython)."
#~ msgstr ""

#~ msgid ""
#~ "However, It should not be necessary "
#~ "to compile anything, and ``pip`` should"
#~ " be able to locate the binary "
#~ "modules in the online libraries."
#~ msgstr ""

#~ msgid "For some reason, this is not the case on Windows 8.1."
#~ msgstr ""

#~ msgid "Please report any other trouble related to the installation of lxml."
#~ msgstr ""

#~ msgid "Couldn't install gdata."
#~ msgstr ""

#~ msgid ""
#~ "For some reason the Google's gdata "
#~ "package lists itself in the Python "
#~ "Package Index but doesn't work properly"
#~ " with the easy_install command.  You "
#~ "can download the latest gdata package"
#~ " from:"
#~ msgstr ""

#~ msgid ""
#~ "Unzip it and run ``python setup.py "
#~ "installw`` in the folder you unzip "
#~ "it to."
#~ msgstr ""

#~ msgid "technical"
#~ msgstr ""

#~ msgid "how to start a program"
#~ msgstr ""

#~ msgid ""
#~ "to start a program given its name,"
#~ " hit the |loose_png| key next to "
#~ "Alt, or click on "
#~ "|10000000000000300000002F89E0224ADF9EC09E_png|, then start"
#~ " typing the name of the program, "
#~ "in our case “Ghini” or just click"
#~ " on the program symbol "
#~ "|100000000000003100000031BB54CBDFA885EBAC_png|, appearing "
#~ "near the left margin of your "
#~ "display."
#~ msgstr ""

#~ msgid "database server"
#~ msgstr ""

#~ msgid "complete screen"
#~ msgstr ""

#~ msgid "numeric overview"
#~ msgstr ""

#~ msgid "stored queries"
#~ msgstr ""

#~ msgid "query and action buttons"
#~ msgstr ""

#~ msgid "network problems"
#~ msgstr ""

#~ msgid "search fails with error"
#~ msgstr ""

#~ msgid "search does not return something I just inserted"
#~ msgstr ""

#~ msgid "solving it with user permissions"
#~ msgstr ""

#~ msgid ""
#~ "We haven't yet conclusively decided how"
#~ " to solve this one. One way "
#~ "would be to have different connection"
#~ " profiles, associated to different database"
#~ " users, each user with all needed "
#~ "permissions."
#~ msgstr ""

#~ msgid "full permission (BD-JBQ)"
#~ msgstr ""

#~ msgid "only qualified personnel get this kind of access."
#~ msgstr ""

#~ msgid "insert and update (BD-JBQ-limitado)"
#~ msgstr ""

#~ msgid "read only (BD-JBQ-lectura)"
#~ msgstr ""

#~ msgid "thinking further about it"
#~ msgstr ""

#~ msgid "where are the logs"
#~ msgstr ""

#~ msgid "continous unmanned alerting"
#~ msgstr ""

#~ msgid "taxonomy"
#~ msgstr ""

#~ msgid "introduction"
#~ msgstr ""

#~ msgid "identifying at rank Genus, or Family"
#~ msgstr ""

#~ msgid "at rank genus"
#~ msgstr ""

#~ msgid "at rank family"
#~ msgstr ""

#~ msgid ""
#~ "The current maintainer suggests to use"
#~ " the prefix **Zzz-** and behind the"
#~ " prefix to write the family name, "
#~ "possibly removing the trailing **e**.  "
#~ "Removal of the trailing **e** is "
#~ "useful in order not to get results"
#~ " that include genus names when you"
#~ " as for stuff ending in **aceae**."
#~ "  In practice, we have a **Zzz** "
#~ "genus in the Orchidaceae family, and "
#~ "in the other 6 families represented "
#~ "in our digital collection, we follow "
#~ "this suggested practice."
#~ msgstr ""

#~ msgid ""
#~ "identifying at a rank that is not"
#~ " allowed by the software (eg: "
#~ "Subtribe, or Subfamily)"
#~ msgstr ""

#~ msgid "at rank subtribe"
#~ msgstr ""

#~ msgid "at rank subfamily, tribe"
#~ msgstr ""

#~ msgid "placeholder species for individual accessions"
#~ msgstr ""

#~ msgid "unknown species for multiple accessions"
#~ msgstr ""

#~ msgid "last minute species"
#~ msgstr ""

#~ msgid "adding a new species — the plant list."
#~ msgstr ""

#~ msgid "reviewing a whole selection — TNRS."
#~ msgstr ""

#~ msgid "existing plant, found in the garden with its own label"
#~ msgstr ""

#~ msgid "new accession: plant just entering the garden"
#~ msgstr ""

#~ msgid "existing plant, found in the garden without its label"
#~ msgstr ""

#~ msgid "we find a dead plant"
#~ msgstr ""

#~ msgid "we find a plant without a label"
#~ msgstr ""

#~ msgid "producing or reproducing labels"
#~ msgstr ""

#~ msgid "refreshing plant labels"
#~ msgstr ""

#~ msgid "preparing labels for non-database plants"
#~ msgstr ""

#~ msgid "planned action"
#~ msgstr ""

#~ msgid "ex-post correction"
#~ msgstr ""

#~ msgid "search in order to edit (plant or accession)"
#~ msgstr ""

#~ msgid "search in order to report"
#~ msgstr ""

#~ msgid "using **Tags** as enhanced searching"
#~ msgstr ""

#~ msgid "be aware of the available search strategies"
#~ msgstr ""

#~ msgid "Donation reason: Contribución científica al JBQ"
#~ msgstr ""

#~ msgid ""
#~ "In the plant accession we have the"
#~ " option \"origin\". When a plant "
#~ "comes from a wild source we can"
#~ " specified their specific origin. We "
#~ "want to comply with ITF2, and "
#~ "ghini-1.0 only partly respects that "
#~ "standard. The ITF2 compying options are:"
#~ msgstr ""

#~ msgid ""
#~ "Once you choose or create the "
#~ "conctact information, this section deploys "
#~ "more options, here you can specify "
#~ "the region, where you can choose "
#~ "the country of origin, and a "
#~ "specific location within the region, "
#~ "georeferencing information (including the GPS"
#~ " data), habitat description collector name."
#~ " For the last one, I recommend "
#~ "also to write the specific data "
#~ "next to the collector name (eg. "
#~ "Luis Baquero 11/10/2016)."
#~ msgstr ""

#~ msgid ""
#~ "Nearly everything about Ghini is "
#~ "extensible through plugins. Plugins can "
#~ "create tables, define custom searches, "
#~ "add menu items, create custom commands"
#~ " and more."
#~ msgstr ""

#~ msgid ""
#~ "With the |100000000000001C0000001FB8A1F75F7A5EF877_png|"
#~ " button, in the form of a gear,"
#~ " you can start the \"Query Builder\","
#~ " which helps you compose complex "
#~ "searchs in a simple, graphical way."
#~ msgstr ""

#~ msgid ""
#~ "We often have volunteers who only "
#~ "work at the garden for a very "
#~ "short time. It was with them in"
#~ " mind that we have developed a "
#~ "`hypersimplified view <goal.html#hypersimplified-"
#~ "view>`_ on the ghini database structure."
#~ msgstr ""

#~ msgid ""
#~ "A serious situation happened once, and"
#~ " we absolutely want to prevent it "
#~ "from happening again: a user deleted "
#~ "a genus, with everything that was "
#~ "below it, species and accessions, and"
#~ " synonymies."
#~ msgstr ""

#~ msgid ""
#~ "You select the connection at startup,"
#~ " and the software asks you for "
#~ "the password corresponding to the "
#~ "connection you selected."
#~ msgstr ""

#~ msgid ""
#~ "When contacting the developers, they "
#~ "will definitely ask for technical "
#~ "information, or at least to see a"
#~ " screenshot.  Help them help you."
#~ msgstr ""

#~ msgid "Taking a screenshot"
#~ msgstr ""

#~ msgid ""
#~ "On Linux there are three ways to"
#~ " create a screenshot, all involve "
#~ "hitting the 'PrtSc' key.  The most "
#~ "practical one is possibly hitting the"
#~ " 'PrtSc' key in combination with Ctrl"
#~ " and Shift. This will start an "
#~ "interactive screen copy tool. You select"
#~ " a rectangle and the area is "
#~ "copied in the clipboard.  Paste it "
#~ "in the email you're writing, or in"
#~ " the chat line where the developers"
#~ " are trying to help you."
#~ msgstr ""

#~ msgid "Continous unmanned alerting"
#~ msgstr ""

#~ msgid ""
#~ "In praticular, the subfamily information "
#~ "is relevant, because there are "
#~ "subfamilies within the Orchidaceae family "
#~ "which are not further separated."
#~ msgstr ""

#~ msgid ""
#~ "We go straight into the Accession "
#~ "Editor, start typing the species name"
#~ " in the corresponding field.  Luckly, "
#~ "the species was already in the "
#~ "database, otherwise we would use the "
#~ "**Add** button next to the entry "
#~ "field."
#~ msgstr ""

#~ msgid ""
#~ "In this botanical garden, we receive "
#~ "plants from different types of origin."
#~ " It could be from expeditions (plants"
#~ " coming from nature, collected with "
#~ "legal permission from MAE - Ecuadorian"
#~ " Environment Ministery), donated plants "
#~ "mostly coming as gifts from "
#~ "collectionist or orchid commercialization "
#~ "enterprises, purchased, or confiscated plants"
#~ " (usually coming from MAE raids "
#~ "around the country)."
#~ msgstr ""

#~ msgid ""
#~ "In the case of a donated plant,"
#~ " it is better to put detail "
#~ "information just as a note in the"
#~ " plant accesion; in the case of "
#~ "a plant with an unknown origin, we"
#~ " select the Insufficient data option."
#~ msgstr ""

#~ msgid ""
#~ "Once you choose or create the "
#~ "conctact information, this section deploys "
#~ "more options, here you can specify "
#~ "the region, where you can choose "
#~ "the country of origin, and a "
#~ "specific location within the region, "
#~ "georeferencing information (including the GPS"
#~ " data), habitat description collector name."
#~ " For the last one, I recommend "
#~ "also to write the specific date "
#~ "next to the collector name (eg. "
#~ "Luis Baquero 11/10/2016)."
#~ msgstr ""

#~ msgid "Purchae date: 12/12/2014"
#~ msgstr ""

#~ msgid ""
#~ "All we do is find the Plant "
#~ "in the database and update its "
#~ "information.  We do not chang anything"
#~ " in the initial Accession information, "
#~ "just the current Plant information."
#~ msgstr ""

#~ msgid ""
#~ "Regularly, we need producing reports "
#~ "about our collection that the Ecuadorian"
#~ " Environment Ministery (MAE) requires and"
#~ " that justify the very existence of"
#~ " the garden."
#~ msgstr ""

#~ msgid ""
#~ "In these cases, we work with "
#~ "notes. In the accession \"notes\" tab"
#~ " we specify this useful information:"
#~ msgstr ""

#~ msgid "\"Donated plant\""
#~ msgstr ""

#~ msgid "Donor: Dr. Maro Jiménez"
#~ msgstr ""

#~ msgid "Reason: Contribución científica al JBQ"
#~ msgstr ""

#~ msgid "Donation date: 20/07/2009"
#~ msgstr ""

#~ msgid "\"Purchased plant\""
#~ msgstr ""

#~ msgid "ID: *Trisetella hirtzii* Luer"
#~ msgstr ""

#~ msgid "Enterprise: Ecuagenera"
#~ msgstr ""

#~ msgid "Purchase date: 12/12/2014"
#~ msgstr ""

#~ msgid "\"Confiscated plant\""
#~ msgstr ""

#~ msgid "ID: *Cattleya maxima* Lindl."
#~ msgstr ""

#~ msgid "Confiscated from: \"Vivero Riina y Mancuso\""
#~ msgstr ""

#~ msgid ""
#~ "Reason: Legally protected specie, forbidden"
#~ " collection and distribution."
#~ msgstr ""

#~ msgid "Date: 20/07/2009"
#~ msgstr ""

#~ msgid "Solo las cactáceas afuera de los orquidearios en el jardín"
#~ msgstr ""

#~ msgid ""
#~ "`devinstall.bat "
#~ "<https://raw.githubusercontent.com/Ghini/ghini.desktop/ghini-1.0-dev/scripts/devinstall.bat>`_"
#~ msgstr ""

#~ msgid "Donated plants"
#~ msgstr ""

#~ msgid "source-type"
#~ msgstr ""

#~ msgid "source-detail"
#~ msgstr ""

#~ msgid "Bought plants"
#~ msgstr ""

#~ msgid "factura"
#~ msgstr ""

#~ msgid "Confiscated plants"
#~ msgstr ""

#~ msgid ""
#~ "The current maintainer suggests to use"
#~ " the prefix **Zzz-** and behind the"
#~ " prefix to write the family name, "
#~ "possibly removing the trailing **e**.  "
#~ "Removal of the trailing **e** is "
#~ "useful in order not to get results"
#~ " that include genus names when you"
#~ " as for stuff ending in **aceae**."
#~ " In practice, we have a **Zzz** "
#~ "genus in the Orchidaceae family, and "
#~ "in the other 6 families represented "
#~ "in our digital collection, we follow "
#~ "this suggested practice."
#~ msgstr ""

#~ msgid ""
#~ "Please refer to the official "
#~ "documentation. A very thorough discussion "
#~ "of your backup options starts at "
#~ "`chapter_24`_."
#~ msgstr ""

#~ msgid "Please refer to the official documentation."
#~ msgstr ""

#~ msgid ""
#~ "The program was born in English "
#~ "and all its technical and user "
#~ "documentation is still only in that "
#~ "language, but the program itself has "
#~ "been translated and can be used in"
#~ " various other languages, including Spanish"
#~ " (86%), Portuguese (100%), French (42%),"
#~ " to name some Southern American "
#~ "languages, as well as Swedish (100%) "
#~ "and Czech (100%)."
#~ msgstr ""

#~ msgid "updating the system"
#~ msgstr ""

#~ msgid "updating ghini"
#~ msgstr ""

#~ msgid ""
#~ "Adding a new user is a task "
#~ "taking less than a minute, and can"
#~ " be done either graphically, or from"
#~ " the command line."
#~ msgstr ""

#~ msgid ""
#~ "Hit the |loose_png| key, then start "
#~ "typing ``users``, something like this "
#~ "will appear on your screen:"
#~ msgstr ""

#~ msgid ""
#~ "Activate the program, unlock the user"
#~ " data, create a new user account, "
#~ "define the password and write it "
#~ "down on a piece of paper you "
#~ "hand over to the person."
#~ msgstr ""

#~ msgid ""
#~ "You can achieve the same, possibly "
#~ "faster, from the command line. For "
#~ "example we add user 'Marta López', "
#~ "account 'mlopez', by invoking the "
#~ "command and entering your password (to"
#~ " unlock user data), then all "
#~ "information as required, or leaving it"
#~ " blank:"
#~ msgstr ""

#~ msgid ""
#~ "We do not use account names like"
#~ " \"voluntario\", because such accounts do"
#~ " not help us associate the name "
#~ "to the person."
#~ msgstr ""

#~ msgid ""
#~ "When connecting to a database server "
#~ "as one of the above, you have "
#~ "to manually create: at least one "
#~ "bauble user, the database you want "
#~ "bauble to use, and to give at "
#~ "lest one bauble user full permissions"
#~ " on its database. When this is "
#~ "done, Ghini will be able to "
#~ "proceed, creating the tables and "
#~ "importing the default data set.  The "
#~ "process is database-dependent and it "
#~ "falls beyond the scope of this "
#~ "manual."
#~ msgstr ""

#~ msgid ""
#~ "If you are connecting to an "
#~ "existing database you can continue to"
#~ " :ref:`editing-and-inserting-data` and "
#~ "subsequently :ref:`searching-in-bauble`, "
#~ "otherwise read on to the following "
#~ "section on initializing a database for"
#~ " Ghini."
#~ msgstr ""

#~ msgid ""
#~ "The Ghini User's Plugin will allow "
#~ "you to create and manage the "
#~ "permissions of users for your Ghini "
#~ "database."
#~ msgstr ""

#~ msgid ""
#~ "Each user knows their own password, "
#~ "and only knows that one. Our "
#~ "super-user, responsible for the database"
#~ " content, also has the 'bauble' "
#~ "fictional user password, which we only"
#~ " only use to create other users."
#~ msgstr ""

#~ msgid ""
#~ "Ghini offers a minimum of user "
#~ "management, accessible from the menu "
#~ "Tools. It is neither perfect nor "
#~ "complete, but it serves to our "
#~ "needs."
#~ msgstr ""

#~ msgid ""
#~ "We do not use account names like"
#~ " `voluntario`, because such accounts do "
#~ "not help us associate the name to"
#~ " the person."
#~ msgstr ""

#~ msgid ""
#~ "Being MacOSX a unix environment, most"
#~ " things will work the same as "
#~ "on GNU/Linux (sort of)."
#~ msgstr ""

#~ msgid ""
#~ "Last time we tested, some of the"
#~ " dependencies could not be installed "
#~ "on MacOSX 10.5 and we assume "
#~ "similar problems would also show on "
#~ "older OSX versions.  Ghini has been "
#~ "successfully installed on several OSX "
#~ "systems, between 10.7 and 10.12."
#~ msgstr ""

#~ msgid "with the above installed, open a terminal window and run::"
#~ msgstr ""

#~ msgid ""
#~ "The problem lies with homebrew and "
#~ "some of the packages we rely on."
#~ " The messages you have to fear "
#~ "look like this::"
#~ msgstr ""

#~ msgid "and::"
#~ msgstr ""

#~ msgid ""
#~ "Please refer to the `official "
#~ "documentation <https://mariadb.com/kb/en/the-mariadb-"
#~ "library/documentation/>`_."
#~ msgstr ""

#~ msgid ""
#~ "Backing up and restoring databases is"
#~ " described in breadth and depth "
#~ "starting at `this page "
#~ "<https://mariadb.com/kb/en/the-mariadb-library/backing-"
#~ "up-and-restoring-databases/>`_."
#~ msgstr ""

#~ msgid ""
#~ "Please refer to the official "
#~ "documentation. A very thorough discussion "
#~ "of your backup options starts at "
#~ "`chapter 24 "
#~ "<http://www.postgresql.org/docs/9.1/static/backup.html>`_."
#~ msgstr ""

#~ msgid "placeholder section"
#~ msgstr ""

#~ msgid "what do you need to produce a NSIS installer?"
#~ msgstr ""

#~ msgid "what dependencies you must satisfy?"
#~ msgstr ""

#~ msgid "how do you install each of them?"
#~ msgstr ""

#~ msgid "which is the command to produce the setup.exe?"
#~ msgstr ""

#~ msgid "how do you publish the installer?"
#~ msgstr ""

#~ msgid ""
#~ "If you already know, and all you"
#~ " want is to do something practical,"
#~ " check our `user-contributed recipes "
#~ "<use_cases.html>`_."
#~ msgstr ""

#~ msgid ""
#~ "In the above figure, a simplified "
#~ "view on the database, the highlighted"
#~ " blocks are those relative to objects"
#~ " you definitely need insert in the"
#~ " database."
#~ msgstr ""

#~ msgid ""
#~ "We distinguish three main sections in"
#~ " the database.  Start reading the "
#~ "graph from the right hand side, "
#~ "with the relevant **Taxonomy** information,"
#~ " then step to administering your "
#~ "**Collection**, and finally consider the "
#~ "physical **Garden**."
#~ msgstr ""

#~ msgid "**Accession links Planting to Species**"
#~ msgstr ""

#~ msgid ""
#~ "An ``Accession`` represents the action "
#~ "of receiving this specific plant "
#~ "material in the garden. As such, "
#~ "``Accession`` is an abstract concept, it"
#~ " links physical living ``Plantings`` "
#~ "—groups of plants placed each at a"
#~ " ``Location`` in the garden— to the"
#~ " corresponding ``Species``. It is not "
#~ "the same as an acquisition from a"
#~ " source, because in a single "
#~ "acquisition you can access material of"
#~ " more than one species. In other "
#~ "words: a single aquisition can embark"
#~ " multiple accessions. An ``Accession`` has"
#~ " zero or more ``Plantings`` associated "
#~ "to it (0..n), and it is at "
#~ "all times connected to exactly 1 "
#~ "``Species``. Each ``Planting`` belongs to "
#~ "exactly one ``Accession``, each ``Species``"
#~ " may have multiple ``Accessions`` relating"
#~ " to it."
#~ msgstr ""

#~ msgid "**Accession at the base of the history of your plants**"
#~ msgstr ""

#~ msgid "**Accession and Verification opinions**"
#~ msgstr ""

#~ msgid "**Accessing your own Propagations**"
#~ msgstr ""

#~ msgid "Hypersimplified view"
#~ msgstr ""

#~ msgid ""
#~ "People using Ghini only sporadically may"
#~ " prefer ignoring the database structure "
#~ "and look at it as two nested "
#~ "sequences of objects, each element of"
#~ " the sequence being necessary to add"
#~ " element at the next level."
#~ msgstr ""

#~ msgid ""
#~ "In order to get down to an "
#~ "Accession, you will need four levels,"
#~ " as in this example:"
#~ msgstr ""

#~ msgid ""
#~ "A quite complete set of Families "
#~ "and Genera are inserted in your "
#~ "database at the moment Ghini initializes"
#~ " it. So all you need is adding"
#~ " Species and Accessions, in this "
#~ "order."
#~ msgstr ""

#~ msgid ""
#~ "When placing a physical Plant (relative"
#~ " to an Accession) somewhere in the"
#~ " garden, you need to describe this"
#~ " \"somewhere\" digitally, as a Location "
#~ "in the garden."
#~ msgstr ""

#~ msgid ""
#~ "The program was born in English "
#~ "and all its technical and user "
#~ "documentation is first written in that"
#~ " language. Both technical and user "
#~ "documentation use ``gettext``, an advanced "
#~ "tool for semi-automatic translation."
#~ msgstr ""

#~ msgid ""
#~ "The program has been translated and "
#~ "can be used in various other "
#~ "languages, including Spanish (97%), French "
#~ "(82%), Portuguese (71%), to name some"
#~ " Southern American languages, as well "
#~ "as Ukrainian (100%) and Czech (71%)."
#~ msgstr ""

#~ msgid ""
#~ "Translation of documentation goes a bit"
#~ " slower, with only Ukrainian, Spanish "
#~ "and Italian at more than 50%."
#~ msgstr ""

#~ msgid ""
#~ "Ghini is an application for managing "
#~ "botanical specimen collections. With it "
#~ "you can create a searchable database "
#~ "of plant records."
#~ msgstr ""

#~ msgid ""
#~ "It is `open <http://www.opensource.org>`_ and"
#~ " `free <http://www.fsf.org>`_ and is "
#~ "released under the `GNU Public License"
#~ " <http://www.fsf.org/licensing/licenses/gpl.html>`_"
#~ msgstr ""

#~ msgid "one-liner for hurried users."
#~ msgstr ""

#~ msgid ""
#~ "Linux users just download and run "
#~ "`the installation script "
#~ "<https://raw.githubusercontent.com/Ghini/ghini.desktop/ghini-1.0/scripts/devinstall.sh>`_."
#~ " You may read the documentation "
#~ "later."
#~ msgstr ""

#~ msgid ""
#~ "Windows users, start downloading all "
#~ "external dependencies (`git <Direct link "
#~ "to download git_>`_, `Python <Direct "
#~ "link to download Python_>`_, `lxml "
#~ "<Direct link to download lxml_>`_, "
#~ "`PyGTK <Direct link to download "
#~ "PyGTK_>`_, `psycopg2 <Direct link to "
#~ "download psycopg2_>`_), read the instructions"
#~ " in the meanwhile."
#~ msgstr ""

#~ msgid "Mac users are never in a hurry, are they?"
#~ msgstr ""

#~ msgid "Open a shell terminal window, and follow the following instructions."
#~ msgstr ""

#~ msgid "Download the `devinstall.sh` script:"
#~ msgstr ""

#~ msgid ""
#~ "Invoke the script from a terminal "
#~ "window, starting at the directory where"
#~ " you downloaded it, like this::"
#~ msgstr ""

#~ msgid "The script will produce quite some output, which you can safely ignore."
#~ msgstr ""

#~ msgid "global installation"
#~ msgstr ""

#~ msgid ""
#~ "When almost ready, the installation "
#~ "script will ask you for your "
#~ "password.  This lets it create a "
#~ "``ghini`` user group, initialise it to"
#~ " just yourself, make the just created"
#~ " ``ghini`` script available to the "
#~ "whole ``ghini`` user group."
#~ msgstr ""

#~ msgid ""
#~ "If feeling paranoid, you can safely "
#~ "not give your password and interrupt "
#~ "the script there."
#~ msgstr ""

#~ msgid ""
#~ "Possibly the main advantage of a "
#~ "global installation is being able to "
#~ "find Ghini in the application menus "
#~ "of your graphic environment."
#~ msgstr ""

#~ msgid "You can now start ghini by invoking the ``ghini`` script::"
#~ msgstr ""

#~ msgid ""
#~ "You use the same ``ghini`` script "
#~ "to update ghini to the latest "
#~ "released production patch::"
#~ msgstr ""

#~ msgid "This is what you would do when ghini shows you something like this:"
#~ msgstr ""

#~ msgid ""
#~ "Users of the global installation will"
#~ " also type ``ghini`` to invoke the"
#~ " program, but they will get to "
#~ "a different script, located in "
#~ "``/usr/local/bin``. This globally available "
#~ "``ghini`` script cannot be used to "
#~ "update a ghini installation."
#~ msgstr ""

#~ msgid ""
#~ "Again the same ``ghini`` script lets "
#~ "you install the optional database "
#~ "connectors: option ``-p`` is for "
#~ "PostgreSQL, option ``-m`` is for "
#~ "MySQL/MariaDB, but you can also install"
#~ " both at the same time::"
#~ msgstr ""

#~ msgid ""
#~ "Please beware: you might need solve "
#~ "dependencies. How to do so, depends "
#~ "on which GNU/Linux flavour you are "
#~ "using. Check with your distribution "
#~ "documentation."
#~ msgstr ""

#~ msgid ""
#~ "You can also use the ``ghini`` "
#~ "script to switch to a different "
#~ "production line.  At the moment ``1.0``"
#~ " is the stable one, but you can"
#~ " select ``1.1`` if you want to "
#~ "help us with its development::"
#~ msgstr ""

#~ msgid "You can study the script to see what steps if runs for you."
#~ msgstr ""

#~ msgid ""
#~ "In short it will install dependencies"
#~ " which can't be satisfied in a "
#~ "virtual environment, then it will create"
#~ " a virtual environment named ``ghide``, "
#~ "use git to download the sources to"
#~ " a directory named "
#~ "``~/Local/github/Ghini/ghini.desktop``, and connect "
#~ "this git checkout to the ``ghini-1.0``"
#~ " branch (this you can consider a "
#~ "production line), it then builds ghini,"
#~ " downloading all remaining dependencies in"
#~ " the virtual environment, and finally "
#~ "it creates the ``ghini`` startup script."
#~ msgstr ""

#~ msgid ""
#~ "If you have ``sudo`` permissions, it "
#~ "will be placed in ``/usr/local/bin``, "
#~ "otherwise in your ``~/bin`` folder."
#~ msgstr ""

#~ msgid ""
#~ "Being macOS a unix environment, most "
#~ "things will work the same as on"
#~ " GNU/Linux (sort of)."
#~ msgstr ""

#~ msgid "Installation on older macOS."
#~ msgstr ""

#~ msgid ""
#~ "Every time we tested, we could "
#~ "only solve all dependencies on the "
#~ "two or three most recent macOS "
#~ "versions.  In April 2015 this excluded"
#~ " macOS 10.6 and older.  In September"
#~ " 2017 this excluded macOS 10.8 and"
#~ " older.  We never had a problem "
#~ "with the lastest macOS."
#~ msgstr ""

#~ msgid ""
#~ "The problem lies with homebrew and "
#~ "some of the packages we rely on."
#~ " The message you have to fear "
#~ "looks like this::"
#~ msgstr ""

#~ msgid "The only solution I can offer is: please update your system."
#~ msgstr ""

#~ msgid ""
#~ "On the bright side, if at any "
#~ "time in the past you did install"
#~ " ghini.desktop on your older and now"
#~ " unsupported macOS, you will always "
#~ "be able to update ghini.desktop to "
#~ "the latest version."
#~ msgstr ""

#~ msgid "With the above installed, open a terminal window and run::"
#~ msgstr ""

#~ msgid ""
#~ "In particular, make sure you read "
#~ "and understand all reports starting with"
#~ " ``If you need to have this "
#~ "software``."
#~ msgstr ""

#~ msgid ""
#~ "You will need at least the "
#~ "following four lines in your "
#~ "``~/.bash_profile``::"
#~ msgstr ""

#~ msgid "Activate the profile by sourcing it::"
#~ msgstr ""

#~ msgid ""
#~ "As an optional aesthetical step, "
#~ "consider packaging your ``~/bin/ghini`` script"
#~ " in a `platypus "
#~ "<https://github.com/sveinbjornt/Platypus>`_ application "
#~ "bundle.  The ``images`` directory contains "
#~ "a 128×128 icon."
#~ msgstr ""

#~ msgid ""
#~ "Ghini has been tested with and is"
#~ " known to work on W-XP, W-7 up"
#~ " to W-10. Although it should work "
#~ "fine on other versions Windows it "
#~ "has not been thoroughly tested."
#~ msgstr ""

#~ msgid ""
#~ "download and install ``git`` (comes with"
#~ " a unix-like ``sh`` and includes "
#~ "``vi``). Grab it from `the Git "
#~ "download area <https://git-scm.com/download/win>`_."
#~ msgstr ""

#~ msgid ""
#~ "download and install Python 2.x (32bit)."
#~ " Grab it from the `Python official"
#~ " site <http://www.python.org>`_."
#~ msgstr ""

#~ msgid "When installing Python, do put Python in the PATH:"
#~ msgstr ""

#~ msgid ""
#~ "download ``pygtk`` from `the official "
#~ "source <http://ftp.gnome.org/pub/GNOME/binaries/win32/pygtk/>`_."
#~ " (this requires 32bit python). be "
#~ "sure you download the \"all in "
#~ "one\" version."
#~ msgstr ""

#~ msgid "Make a complete install, selecting everything:"
#~ msgstr ""

#~ msgid ""
#~ "(Possibly necessary, maybe superfluous) "
#~ "install lxml, you can grab this "
#~ "from `the pypi archives "
#~ "<https://pypi.python.org/pypi/lxml/3.4.4>`_"
#~ msgstr ""

#~ msgid ""
#~ "(definitely optional) download and install "
#~ "a database connector other than "
#~ "``sqlite3``."
#~ msgstr ""

#~ msgid ""
#~ "If you plan using PostgreSQL, the "
#~ "best Windows binary library for Python"
#~ " is `psycopg and is Made in "
#~ "Italy <http://initd.org/psycopg/docs/install.html>`_."
#~ msgstr ""

#~ msgid ""
#~ "We're done with the dependecies, now "
#~ "we can download and run the batch"
#~ " file:"
#~ msgstr ""

#~ msgid ""
#~ "Please don't just follow the above "
#~ "link.  Instead: right click, save link"
#~ " as..."
#~ msgstr ""

#~ msgid ""
#~ "Also make sure you don't let "
#~ "Windows convert the script to a "
#~ "text document."
#~ msgstr ""

#~ msgid ""
#~ "Now **Open** the script to run it."
#~ "  Please note: in the below image,"
#~ " we have saved the file twice, "
#~ "once letting Windows convert it to "
#~ "a text document, and again as a"
#~ " Windows Batch File.  Opening the "
#~ "batch file will run the script.  "
#~ "Opening the text document will show "
#~ "you the code of the batch file,"
#~ " which isn't going to lead us "
#~ "anywhere."
#~ msgstr ""

#~ msgid ""
#~ "If you installed everything as described"
#~ " here, the first thing you should "
#~ "see when you start the installation "
#~ "script is a window like this, and"
#~ " your computer will be busy during"
#~ " a couple of minutes, showing you "
#~ "what it is doing."
#~ msgstr ""

#~ msgid ""
#~ "Running ``devinstall.bat`` will pull the "
#~ "``ghini.desktop`` repository from github to"
#~ " your home directory, under "
#~ "``Local\\github\\Ghini``, checkout the ``ghini-1.0``"
#~ " production line, create a virtual "
#~ "environment and install ghini into it."
#~ msgstr ""

#~ msgid ""
#~ "You can also run ``devinstall.bat`` "
#~ "passing it as argument the numerical "
#~ "part of the production line you "
#~ "want to follow."
#~ msgstr ""

#~ msgid ""
#~ "This is the last installation step "
#~ "that depends, heavily, on a working "
#~ "internet connection."
#~ msgstr ""

#~ msgid ""
#~ "The operation can take several minutes"
#~ " to complete, depending on the speed"
#~ " of your internet connection."
#~ msgstr ""

#~ msgid ""
#~ "Right-click on it, select run as"
#~ " administrator, confirm you want it "
#~ "to make changes to your computer.  "
#~ "These changes are in the Start "
#~ "Menu only: create the Ghini group, "
#~ "place the Ghini shortcut."
#~ msgstr ""

#~ msgid ""
#~ "any time you want to update your"
#~ " installation, just start the command "
#~ "prompt and run ``ghini-update.bat``, it"
#~ " will hardly take one minute."
#~ msgstr ""

#~ msgid ""
#~ "If you would like to generate and"
#~ " print PDF reports using Ghini's "
#~ "default report generator then you will"
#~ " need to download and install `Apache"
#~ " FOP <http://xmlgraphics.apache.org/fop/>`_.  After "
#~ "extracting the FOP archive you will "
#~ "need to include the directory you "
#~ "extracted to in your PATH."
#~ msgstr ""

#~ msgid ""
#~ "When connecting to a database server "
#~ "as one of the above, you have "
#~ "to manually do the following: Create "
#~ "at least one user; Create your "
#~ "database; Give at least one user "
#~ "full permissions on your database; If"
#~ " you plan having more database users:"
#~ " Give one of your users the "
#~ "``CREATEROLE`` privilege; Consider the user"
#~ " with the ``CREATEROLE`` privilege as "
#~ "a super-user, not meant to handle"
#~ " data directly; Keep your super-user"
#~ " credentials in a very safe place."
#~ msgstr ""

#~ msgid ""
#~ "When this is done, Ghini will be"
#~ " able to proceed, creating the tables"
#~ " and importing the default data set."
#~ "  The process is database-dependent "
#~ "and it falls beyond the scope of"
#~ " this manual."
#~ msgstr ""

#~ msgid "Some more hints if you need PostgreSQL"
#~ msgstr ""

#~ msgid ""
#~ "Start simple, don't do all at the"
#~ " same time. Review `the online manual"
#~ " <https://www.postgresql.org/docs/9.4/static/index.html>`_, "
#~ "or download and study `the offline "
#~ "version "
#~ "<https://www.postgresql.org/files/documentation/pdf/9.4/postgresql-9.4-A4.pdf>`_."
#~ msgstr ""

#~ msgid ""
#~ "As said above, create a database, "
#~ "a user, make this user the owner"
#~ " of the database, decide whether "
#~ "you're going to need multiple users, "
#~ "and preferably reserve a user for "
#~ "database and normal user creation. This"
#~ " super-user should be your only "
#~ "user with ``CREATEROLE`` privilege."
#~ msgstr ""

#~ msgid ""
#~ "All normal users will need all "
#~ "privileges on all tables and sequences,"
#~ " something you can do from the "
#~ ":menuselection:`Tools-->Users` menu.  If you "
#~ "have any difficulty, please `open an "
#~ "issue <https://github.com/Ghini/ghini.desktop/issues/new>`_ "
#~ "about it."
#~ msgstr ""

#~ msgid ""
#~ "Connect using the ``psql`` interactive "
#~ "terminal.  Create a ``~/.pgpass`` file "
#~ "(read more about it in `the manual"
#~ " <https://www.postgresql.org/docs/9.4/static/libpq-"
#~ "pgpass.html>`_), tweak your ``pg_hba.conf`` "
#~ "and ``postgresql.conf`` files, until you "
#~ "can connect using the command::"
#~ msgstr ""

#~ msgid "With the above setup, connecting from ghini will be an obvious task."
#~ msgstr ""

#~ msgid ""
#~ "If you are connecting to an "
#~ "existing database you can continue to"
#~ " :ref:`editing-and-inserting-data` and "
#~ "subsequently :ref:`searching-in-ghini`, "
#~ "otherwise read on to the following "
#~ "section on initializing a database for"
#~ " Ghini."
#~ msgstr ""

#~ msgid ""
#~ "Ghini started as a one-man "
#~ "project, by Brett Adams. He started "
#~ "this software as Bauble, for and "
#~ "at the Belize Botanical Garden, and "
#~ "later on adapted it to the needs"
#~ " of a couple of other users who"
#~ " asked him. Brett made Bauble a "
#~ "commons, by releasing it under a "
#~ "GPL license."
#~ msgstr ""

#~ msgid ""
#~ "After some years of stagnation Mario "
#~ "Frasca took responsibility of updating "
#~ "Bauble, rebranded it to Ghini, in "
#~ "honour of Luca Ghini, started "
#~ "advocating, travelling, distributing, developing,"
#~ " documenting it, and it is now "
#~ "Mario Frasca writing this, enhancing the"
#~ " software, looking for users, requesting"
#~ " feedback..."
#~ msgstr ""

#~ msgid ""
#~ "So currently behind Ghini there's not"
#~ " only one developer, but much more"
#~ " importantly, a small but growing "
#~ "global users community."
#~ msgstr ""

#~ msgid ""
#~ "Translations are provided by volunteers "
#~ "who mostly stay behind the scenes, "
#~ "translating a couple of missing terms"
#~ " or sentences, and disappearing again."
#~ msgstr ""

#~ msgid ""
#~ "The Mission Statement is a purpose, "
#~ "it defines the rationale of an "
#~ "entity and is specific and true. "
#~ "For Ghini, the Mission Statement sets"
#~ " out the social order to which "
#~ "Ghini is committed, the needs that "
#~ "are satisfied with Ghini(the software) "
#~ "and with the services of Ghini(the "
#~ "people), the market in which Ghini "
#~ "develops and its intended public image."
#~ msgstr ""

#~ msgid "access to software"
#~ msgstr ""

#~ msgid "access to development"
#~ msgstr ""

#~ msgid "bundling resources"
#~ msgstr ""

#~ msgid "open source"
#~ msgstr ""

#~ msgid "open data"
#~ msgstr ""

#~ msgid "community forming"
#~ msgstr ""

#~ msgid ""
#~ "Tagging is an easy way to give "
#~ "context to an object or create a"
#~ " collection of object that you want"
#~ " to recall later. For example if "
#~ "you want to collect a bunch of "
#~ "plants that you later want to "
#~ "create a report from you can tag"
#~ " them with the string \"for that "
#~ "report i was thinking about\". You "
#~ "can then select \"for that report "
#~ "i was thinking about\" from the "
#~ "tags menu to show you all the "
#~ "objects you tagged."
#~ msgstr ""

#~ msgid ""
#~ "Tagging can be done two ways. By"
#~ " selecting one or more items in "
#~ "the search results and pressing Ctrl-T"
#~ " or by selecting :menuselection:`Tag-->Tag "
#~ "Selection` from the menu. If you "
#~ "have selected multiple items then only"
#~ " that tags that are common to "
#~ "all the selected items will have a"
#~ " check next to it."
#~ msgstr ""

#~ msgid ""
#~ "The Ghini Users Plugin will allow "
#~ "you to create and manage the "
#~ "permissions of users for your Ghini "
#~ "database."
#~ msgstr ""

#~ msgid ""
#~ "You must log in to your database"
#~ " as a user with ``CREATEROLE`` "
#~ "privilege in order to manage other "
#~ "users."
#~ msgstr ""

#~ msgid ""
#~ "Just as almost all objects in the"
#~ " Ghini database can have *Notes* "
#~ "associated to them, Plants can have "
#~ "*Pictures*: next to the tab for "
#~ "Notes, the Plants editor contains an "
#~ "extra tab called \"Pictures\". You can"
#~ " associate as many pictures as you"
#~ " might need to a plant."
#~ msgstr ""

#~ msgid ""
#~ "When you associate a picture to a"
#~ " plant, the file is copied in "
#~ "the *pictures* folder, and a miniature"
#~ " (500x500) is generated and copied in"
#~ " the `thumbnails` folder inside of "
#~ "the pictures folder."
#~ msgstr ""

#~ msgid ""
#~ "When a Plant in the current "
#~ "selection is highlighted, its pictures "
#~ "are displayed in the pictures pane, "
#~ "the pane left of the information "
#~ "pane. When an accession in the "
#~ "selection is highlighted, any picture "
#~ "associated to the plants in the "
#~ "highlighted accession are displayed in "
#~ "the pictures pane."
#~ msgstr ""

#~ msgid ""
#~ "The functionality described here can "
#~ "help you using an ordered collection "
#~ "of plant pictures either to initialize"
#~ " a ghini database, but also for "
#~ "periodically adding to it."
#~ msgstr ""

#~ msgid ""
#~ "Usare il :menuselection:`Tools-->Import-->Pictures` "
#~ "per attivare questo tool di "
#~ "importazione.  Il tool si compone di "
#~ "più passi: definizione parametri, revisione"
#~ " e conferma dati, l'azione vera e "
#~ "propria di importazione, e finalmente la"
#~ " presa visione delle azioni effettuate "
#~ "durante l'importazione. Nei passi iniziali "
#~ "di definizione e revisione puoi passare"
#~ " dall'uno all'altro utilizzando i bottoni"
#~ " ``precedente`` o ``seguente``. Una volta"
#~ " effettuata l'importazione, e quindi "
#~ "durante la revisione delle azioni "
#~ "effettuate, si può solo confermare —o"
#~ " rifiutare— in blocco la transazione."
#~ msgstr ""

#~ msgid ""
#~ "Use :menuselection:`Tools-->Import-->Pictures` to "
#~ "activate this import tool.  The tool "
#~ "is made up of several steps: "
#~ "parameter definition; data revision and "
#~ "confirmation; the import step proper; "
#~ "finally review the import log.  At "
#~ "the first two steps you can "
#~ "confirm the data and go to the "
#~ "next step by clicking on the "
#~ "``next`` button, or you can go "
#~ "back to the previous step by "
#~ "clicking on the ``prev`` button.  Once"
#~ " the import is done and you're "
#~ "reviewing the log, you can only "
#~ "either confirm —or abort— the whole "
#~ "transaction"
#~ msgstr ""

#~ msgid ""
#~ "In the parameter definition pane you:"
#~ " select the directory from which you"
#~ " are to import pictures; indicate "
#~ "whether to import pictures recursively, "
#~ "select or create a location which "
#~ "will be used as default location "
#~ "for new plants, inform the tool "
#~ "about the rule you've been following "
#~ "when naming picture files."
#~ msgstr ""

#~ msgid ""
#~ "In the data revision pane you are"
#~ " shown a table with as many "
#~ "rows as the pictures you are "
#~ "importing.  Each row holds as much "
#~ "information as the tool managed to "
#~ "extract from the picture name.  You "
#~ "can review the information, correct or"
#~ " confirm, and indicate whether or not"
#~ " the row should be imported."
#~ msgstr ""

#~ msgid "importare da una base dati generica"
#~ msgstr ""

#~ msgid ""
#~ "Questa funzionalità è oggetto della "
#~ "`issue #127 "
#~ "<https://github.com/Ghini/ghini.desktop/issues/127>`_, per "
#~ "la quale non abbiamo ancora una "
#~ "soluzione generica."
#~ msgstr ""

#~ msgid ""
#~ "Dovendo importare dati da una tabella,"
#~ " da un foglio di calcolo, o da"
#~ " un database non compatibile con "
#~ "ghini, contattare un programmatore."
#~ msgstr ""

#~ msgid "importare una collezione di immagini"
#~ msgstr ""

#~ msgid ""
#~ "Una particolare forma di base dati "
#~ "botanica è una collezione di fotografie,"
#~ " ciascuna chiaramente associata ad una "
#~ "specifica pianta."
#~ msgstr ""

#~ msgid ""
#~ "Anche senza utilizzare un software "
#~ "disegnato per collezioni di foto, è "
#~ "possibile associare foto ad accessioni "
#~ "attenendosi ad una stessa regola nel "
#~ "dare nome ai file delle foto."
#~ msgstr ""

#~ msgid ""
#~ "Per esempio, ``2018.0020.1 (4).jpg`` potrebbe"
#~ " essere il nome della quarta "
#~ "fotografia associata alla pianta numero "
#~ "1 della ventesima accessione dell'anno "
#~ "2018."
#~ msgstr ""

#~ msgid ""
#~ "La funzione qui descritta permette di"
#~ " utilizzare una collezione di foto "
#~ "per inizializzare una base dati ghini,"
#~ " o per aggiungere dati periodicamente."
#~ msgstr ""

#~ msgid ""
#~ "Usare il :menuselection:`Tools-->Import-->Pictures` "
#~ "per attivare questo tool di "
#~ "importazione.  Una importazione si svolge "
#~ "in più passi: definizione parametri, "
#~ "revisione e conferma dati, l'azione vera"
#~ " e propria di importazione, e "
#~ "finalmente la presa visione delle azioni"
#~ " effettuate durante l'importazione. Nei "
#~ "passi iniziali di definizione e "
#~ "revisione puoi passare dall'uno all'altro "
#~ "utilizzando i bottoni ``precedente`` o "
#~ "``seguente``. Una volta effettuata "
#~ "l'importazione, e quindi durante la "
#~ "revisione delle azioni effettuate, si "
#~ "può solo confermare —o rifiutare— in "
#~ "blocco la transazione."
#~ msgstr ""

#~ msgid ""
#~ "Nella fase di definizione parametri "
#~ "puoi: selezionare la directory da cui"
#~ " importare le foto; indicare se "
#~ "l'importazione va effettuata in modo "
#~ "ricursivo; selezionare o creare l'ubicazione"
#~ " da usare per le nuove piante; "
#~ "descrivere la regola seguita nel dare"
#~ " nome ai file delle foto."
#~ msgstr ""

#~ msgid ""
#~ "La fase di revisione consiste nel "
#~ "visionare una tabella con tante righe"
#~ " quante le foto da importare.  Ogni"
#~ " riga contiene quanta informazione il "
#~ "tool ha potuto estrarre dal nome "
#~ "di ciascuna foto.  Si può accettare "
#~ "ciascun campo così come definito dal "
#~ "tool, e si può indicare se "
#~ "ciascuna riga va importata o meno."
#~ msgstr ""

#~ msgid "Our User Stories section contains details about the above, and more."
#~ msgstr ""

#~ msgid ""
#~ "Use :menuselection:`Tools-->Import-->Pictures` to "
#~ "activate this import tool.  Import goes"
#~ " in several steps: parameter definition;"
#~ " data revision and confirmation; the "
#~ "import step proper; finally review the"
#~ " import log.  At the first two "
#~ "steps you can confirm the data and"
#~ " go to the next step by "
#~ "clicking on the ``next`` button, or "
#~ "you can go back to the previous"
#~ " step by clicking on the ``prev`` "
#~ "button.  Once the import is done "
#~ "and you're reviewing the log, you "
#~ "can only either confirm —or abort— "
#~ "the whole transaction"
#~ msgstr ""

#~ msgid "**ghini.web** helps you publish part of your database on the web."
#~ msgstr ""

#~ msgid "one-liner for hurried Linux users."
#~ msgstr ""

#~ msgid ""
#~ "Download and run `the installation "
#~ "script "
#~ "<https://raw.githubusercontent.com/Ghini/ghini.desktop/ghini-1.0/scripts/devinstall.sh>`_."
#~ " You may read the documentation "
#~ "later."
#~ msgstr ""

#~ msgid "Open a shell terminal window, and follow these instructions."
#~ msgstr ""

#~ msgid "Download the `devinstall.sh` script and run it::"
#~ msgstr ""

#~ msgid ""
#~ "Please note that the script will "
#~ "not help you install any extra "
#~ "database connector. This is not strictly"
#~ " necessary and you can do it at"
#~ " any later moment."
#~ msgstr ""

#~ msgid "If the script ends without error, you can now start ghini::"
#~ msgstr ""

#~ msgid "or update ghini to the latest released production patch::"
#~ msgstr ""

#~ msgid ""
#~ "The same script you can use to "
#~ "switch to a different production line."
#~ " At the moment it's just `ghini-1.0`"
#~ " and `ghini-1.1`."
#~ msgstr ""

#~ msgid ""
#~ "on Unity, open a terminal, start "
#~ "ghini, its icon will show up in"
#~ " the launcher, you can now `lock "
#~ "to launcher` it."
#~ msgstr ""

#~ msgid ""
#~ "If you would like to use the "
#~ "default `SQLite <http://sqlite.org/>`_ database "
#~ "or you don't know what this means"
#~ " then you can skip this step. "
#~ "If you would like to use a "
#~ "database backend other than the default"
#~ " SQLite backend then you will also"
#~ " need to install a database "
#~ "connector."
#~ msgstr ""

#~ msgid ""
#~ "If you would like to use a "
#~ "`PostgreSQL <http://www.postgresql.org>`_ database "
#~ "then activate the virtual environment "
#~ "and install psycopg2 with the following"
#~ " commands::"
#~ msgstr ""

#~ msgid ""
#~ "You might need solve dependencies. How"
#~ " to do so, depends on which "
#~ "GNU/Linux flavour you are using. Check"
#~ " with your distribution documentation."
#~ msgstr ""

#~ msgid ""
#~ "You can study the script to see"
#~ " what steps if runs for you. In"
#~ " short it will install dependencies "
#~ "which can't be satisfied in a "
#~ "virtual environment, then it will create"
#~ " a virtual environment named ``ghide``, "
#~ "use git to download the sources to"
#~ " a directory named "
#~ "``~/Local/github/Ghini/ghini.desktop``, and connect "
#~ "this git checkout to the ``ghini-1.0``"
#~ " branch (this you can consider a "
#~ "production line), it then builds ghini,"
#~ " downloading all remaining dependencies in"
#~ " the virtual environment, and finally "
#~ "it creates a startup script. If "
#~ "you have ``sudo`` permissions, it will"
#~ " be placed in ``/usr/local/bin``, otherwise"
#~ " in your ``~/bin`` folder. Again if"
#~ " you"
#~ msgstr ""

#~ msgid ""
#~ "The current maintainer of ghini.desktop "
#~ "has no interest in learning how to"
#~ " produce Windows installers, so the "
#~ "Windows installation is here reduced to"
#~ " the same installation procedure as "
#~ "on Unix (GNU/Linux and MacOSX)."
#~ msgstr ""

#~ msgid ""
#~ "Please report any trouble. Help with "
#~ "packaging will be very welcome, in "
#~ "particular by other Windows users."
#~ msgstr ""

#~ msgid ""
#~ "Ghini has been tested with and is"
#~ " known to work on W-XP, W-7 and"
#~ " W-8. Although it should work fine"
#~ " on other versions Windows it has "
#~ "not been thoroughly tested."
#~ msgstr ""

#~ msgid ""
#~ "Direct download links are given for "
#~ "all needed components. They have been"
#~ " tested in September 2015, but things"
#~ " change with time. If any of "
#~ "the direct download links stops working,"
#~ " please ring the bell, so we "
#~ "can update the information here."
#~ msgstr ""

#~ msgid ""
#~ "download and install ``git`` (comes with"
#~ " a unix-like ``sh`` and includes "
#~ "``vi``) from::"
#~ msgstr ""

#~ msgid "`Direct link to download git`_"
#~ msgstr ""

#~ msgid "download and install Python 2.x (32bit) from::"
#~ msgstr ""

#~ msgid "`Direct link to download Python`_"
#~ msgstr ""

#~ msgid ""
#~ "Ghini has been developed and tested "
#~ "using Python 2.x.  It will definitely"
#~ " **not** run on Python 3.x.  If "
#~ "you are interested in helping port "
#~ "to Python 3.x, please contact the "
#~ "Ghini maintainers."
#~ msgstr ""

#~ msgid "when installing Python, do put Python in the PATH:"
#~ msgstr ""

#~ msgid ""
#~ "download ``pygtk`` from the following "
#~ "source. (this requires 32bit python). be"
#~ " sure you download the \"all in "
#~ "one\" version::"
#~ msgstr ""

#~ msgid "`Direct link to download PyGTK`_"
#~ msgstr ""

#~ msgid "make a complete install, selecting everything:"
#~ msgstr ""

#~ msgid ""
#~ "(Windows 8.x) please consider this "
#~ "additional step. It is possibly "
#~ "necessary to avoid the following error"
#~ " on Windows 8.1 installations::"
#~ msgstr ""

#~ msgid ""
#~ "If you skip this step and can "
#~ "confirm you get the error, please "
#~ "inform us."
#~ msgstr ""

#~ msgid "You can download lxml from::"
#~ msgstr ""

#~ msgid "`Direct link to download lxml`_"
#~ msgstr ""

#~ msgid ""
#~ "(optional) download and install a "
#~ "database connector other than ``sqlite3``."
#~ msgstr ""

#~ msgid ""
#~ "On Windows, it is NOT easy to "
#~ "install ``psycopg2`` from sources, using "
#~ "pip, so \"avoid the gory details\" "
#~ "and use a pre-compiled pagkage "
#~ "from:"
#~ msgstr ""

#~ msgid "`Direct link to download psycopg2`_"
#~ msgstr ""

#~ msgid "download and run (from ``\\system32\\cmd.exe``) the batch file:"
#~ msgstr ""

#~ msgid ""
#~ "right before you hit the enter key"
#~ " to run the script, your screen "
#~ "might look like something like this:"
#~ msgstr ""

#~ msgid ""
#~ "this will pull the ``ghini.desktop`` "
#~ "repository on github to your home "
#~ "directory, under ``Local\\github\\Ghini``, checkout"
#~ " the ``ghini-1.0`` production line, create"
#~ " a virtual environment and install "
#~ "ghini into it."
#~ msgstr ""

#~ msgid ""
#~ "you can also run ``devinstall.bat`` "
#~ "passing it as argument the numerical "
#~ "part of the production line you "
#~ "want to follow."
#~ msgstr ""

#~ msgid ""
#~ "this is the last installation step "
#~ "that depends, heavily, on a working "
#~ "internet connection."
#~ msgstr ""

#~ msgid ""
#~ "the operation can take several minutes"
#~ " to complete, depending on the speed"
#~ " of your internet connection."
#~ msgstr ""

#~ msgid ""
#~ "any time you want to update your"
#~ " installation, just start the command "
#~ "prompt and run ``ghini-update.bat``"
#~ msgstr ""

#~ msgid ""
#~ "If you would like to generate and"
#~ " print PDF reports using Ghini's "
#~ "default report generator then you will"
#~ " need to download and install `Apache"
#~ " FOP <http://xmlgraphics.apache.org/fop/>`_. After "
#~ "extracting the FOP archive you will "
#~ "need to include the directory you "
#~ "extracted to in your PATH."
#~ msgstr ""

#~ msgid "The Ghini family"
#~ msgstr ""

#~ msgid "Data streams between software components"
#~ msgstr ""

#~ msgid ""
#~ "When we first introduced the diagram,"
#~ " we did not explain the reason "
#~ "why different arrows representing different"
#~ " data flows, had different colours: "
#~ "some are deep green, some in a "
#~ "lighter tint.  If you suspected this "
#~ "bore a meaning then you were quite"
#~ " right:"
#~ msgstr ""

#~ msgid "Stream role description"
#~ msgstr ""

#~ msgid "**d2p**"
#~ msgstr ""

#~ msgid ""
#~ "This is ghini.desktop's "
#~ ":menuselection:`Tools-->Export-->export to pocket`."
#~ msgstr ""

#~ msgid "**p2d**"
#~ msgstr ""

#~ msgid ""
#~ "Import from the ghini.pocket log file"
#~ " and pictures into the central "
#~ "database."
#~ msgstr ""

#~ msgid "**d2w**"
#~ msgstr ""

#~ msgid "**g2w**"
#~ msgstr ""

#~ msgid "**w2t**"
#~ msgstr ""

#~ msgid "Importing locations and points of interest from ghini.web to tour."
#~ msgstr ""

#~ msgid ""
#~ "We formally define all named streams,"
#~ " so our we know we are talking"
#~ " about. Moreover, streams impacting the "
#~ "desktop and web databases require extra"
#~ " thought and attention from your "
#~ "database manager."
#~ msgstr ""

#~ msgid ""
#~ "This documentation focuses on ghini.desktop,"
#~ " but it also contains pages dedicated"
#~ " to using the other components, and"
#~ " to their mutual interaction."
#~ msgstr ""

