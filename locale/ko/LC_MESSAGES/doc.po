# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 bauble.classic & 2015-2017 ghini.desktop
# contributors
# This file is distributed under the same license as the Ghini package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Ghini 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-21 14:08-0500\n"
"PO-Revision-Date: 2021-04-29 13:32+0000\n"
"Last-Translator: 김주열 <quick3377@gmail.com>\n"
"Language-Team: Korean <https://hosted.weblate.org/projects/ghini/"
"documentation-10/ko/>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.7-dev\n"
"Generated-By: Babel 2.9.0\n"

#: ../../administration.rst:2
msgid "Database Administration"
msgstr "데이터베이스 관리"

#: ../../administration.rst:4
msgid ""
"If you are using a real DBMS to hold your botanic data, then you need do "
"something about database administration. While database administration is"
" far beyond the scope of this document, we make our users aware of it."
msgstr ""
"실제 DBMS를 사용하여 플랜트 데이터를 저장하는 경우 데이터베이스 관리를 수행해야합니다. 데이터베이스 관리는이 문서의 범위를 훨씬 벗어납니다. 사용자가 추가 작업을 알고 있어야하기 때문에 여기서 언급합니다."

#: ../../administration.rst:11
msgid ""
"SQLite is not what one would consider a real DBMS: each SQLite database "
"is just in one file. Make safety copies and you will be fine. If you "
"don't know where to look for your database files, consider that, per "
"default, bauble puts its data in the ``~/.bauble/`` directory."
msgstr ""
"SQLite는 DBMS로 간주 할 수있는 것이 아닙니다. 각 SQLite 데이터베이스는 파일 일뿐입니다. 백업 복사본을 만들면 모든 것이 정상입니다. 데이터베이스 파일을 찾을 위치를 모르는 경우 기본적으로 Ghini가 데이터를 ``~/.bauble/``-디렉토리에 저장한다는 점을 고려하십시오."

#: ../../administration.rst:16
msgid ""
"In Windows it is somewhere in your ``AppData`` directory, most likely in "
"``AppData\\Roaming\\Bauble``. Do keep in mind that Windows does its best "
"to hide the ``AppData`` directory structure to normal users."
msgstr ""
"Windows에서는 ``AppData`` 디렉토리, 아마도 ``AppData\Roaming\Bauble``-에 있습니다. Windows는 일반 사용자를 위해 ``AppData`` 디렉터리 구조를 숨기기 위해 최선을 다하고 있습니다."

#: ../../administration.rst:20
msgid ""
"The fastest way to open it is with the file explorer: type ``%APPDATA%`` "
"and hit enter."
msgstr "파일을 여는 가장 빠른 방법은 파일 관리자를 사용하는 것입니다 :``%APPDATA%``-를 입력하고 엔터를 누르세요."

#: ../../administration.rst:26
msgid ""
"Please refer to the `official documentation <https://mariadb.com/kb/en"
"/the-mariadb-library/documentation/>`_."
msgstr ""
"마이그레이션이 필요하면 `페이지를 <https://mariadb.com/kb/en/the-mariadb-library/"
"documentation/>`_ 참조하세요."

#: ../../administration.rst:28
msgid ""
"Backing up and restoring databases is described in breadth and depth "
"starting at `this page <https://mariadb.com/kb/en/the-mariadb-library"
"/backing-up-and-restoring-databases/>`_."
msgstr ""
"데이터베이스의 백업과 복원은 `다음페이지에 <https://mariadb.com/kb/en/the-mariadb-library/"
"backing-up-and-restoring-databases/>`_ 자세히 설명되어 있으니 활용하세요."

#: ../../administration.rst:35
msgid ""
"Please refer to the official documentation. A very thorough discussion of"
" your backup options starts at `chapter 24 "
"<http://www.postgresql.org/docs/9.1/static/backup.html>`_."
msgstr ""
"백업 옵션에 대한 `설명은24 장 으로 <http://www.postgresql.org/docs/9.1/static/backup.html>`"
"_ 넘어갑니다."

#: ../../administration.rst:39
msgid "Ghini Configuration"
msgstr "Ghini의 구성"

#: ../../administration.rst:41
msgid ""
"Ghini uses a configuration file to store values across invocations. This "
"file is associated to a user account and every user will have their own "
"configuration file."
msgstr ""
"Ghini는 구성 파일을 사용하여 호출간에 값을 저장합니다. 이 파일은 사용자 계정에 연결되며 모든 사용자는 고유 한 구성 파일을 "
"갖게됩니다."

#: ../../administration.rst:45
msgid ""
"To review the content of the Ghini configuration file, type ``:prefs`` in"
" the text entry area where you normally type your searches, then hit "
"enter."
msgstr ""
"Ghini 구성 파일의 내용을 검토하려면 일반적으로 검색을 입력하는 텍스트 항목 영역에 ``:prefs``-를 입력한 다음 enter를 "
"누르십시오."

#: ../../administration.rst:48
msgid ""
"You normally do not need tweaking the configuration file, but you can do "
"so with a normal text editor program. Ghini configuration file is at the "
"default location for SQLite databases."
msgstr ""
"일반적으로 구성 파일을 조정할 필요가 없지만 일반 텍스트 편집기 프로그램을 사용하여 조정할 수 있습니다. Ghini 구성 파일은 "
"SQLite 데이터베이스의 기본 위치에 있습니다."

#: ../../administration.rst:53
msgid "Reporting Errors"
msgstr "오류보고"

#: ../../administration.rst:55
msgid ""
"Should you notice anything unexpected in Ghini's behaviour, please "
"consider filing an issue on the Ghini development site."
msgstr "Ghini를 활용하면서 발생하는 예상치 못한 오류는 Ghini개발자에게 문제를 보내주세요."

#: ../../administration.rst:58
msgid "Ghini development site can be accessed via the Help menu."
msgstr "Ghini는 도움말 메뉴를 통해 액세스 할 수 있습니다."

#: ../../building.rst:2
msgid "Developer's Manual"
msgstr "개발자 매뉴얼"

#: ../../building.rst:4
msgid ""
"If you ran the ``devinstall`` installation instructions, you have "
"downloaded the sources, connected to the github repository.  You are in "
"the ideal situation to start looking into the software, understand how it"
" works, contribute to ghini.desktop's development."
msgstr ""
"``devinstall ''설치 지침을 실행했다면 github 저장소에 연결된 소스를 다운로드 한 것입니다. 소프트웨어 조사를 시작하고 "
"작동 방식을 이해하고 ghini.desktop의 개발에 기여할 수있는 이상적인 상황입니다."

#: ../../building.rst:10
msgid "Helping Ghini development"
msgstr "Ghini 개발 지원"

#: ../../building.rst:12
msgid ""
"If you want to contribute to Ghini, you can do so in quite a few "
"different ways:"
msgstr "Ghini에 기여하고 싶다면 다음과 같은 여러 가지 방법으로 기여할 수 있습니다:"

#: ../../building.rst:14
msgid ""
"Use the software, note the things you don't like, `open an issue "
"<http://github.com/Ghini/ghini.desktop/issues/new>`_ for each of them. A "
"developer will react sooner than you can imagine."
msgstr ""
"소프트웨어를 사용하고 마음에 들지 않는 부분을 확인하고 각각에 대해`<http://github.com/Ghini/ghini.desktop/"
"issues/new>`_ 문제를 엽니 다. 개발자는 상상할 수 있는 것보다 빨리 반응 할 것입니다."

#: ../../building.rst:17
msgid ""
"If you have an idea of what you miss in the software but can't quite "
"formalize it into separate issues, you could consider hiring a "
"professional. This is the best way to make sure that something happens "
"quickly on Ghini. Do make sure the developer opens issues and publishes "
"their contribution on github."
msgstr ""
"소프트웨어에서 놓친 부분에 대한 아이디어가 있지만 이를 별도의 문제로 공식화 할 수 없는 경우 전문가를 고용하는 것이 좋습니다. 이것은 "
"Ghini에서 어떤 일이 빠르게 발생하도록 하는 가장 좋은 방법입니다. 개발자가 이슈를 열고 github에 기여를 게시하는지 확인하십시오."

#: ../../building.rst:22
msgid ""
"Translate! Any help with translations will be welcome, so please do! you "
"can do this without installing anything on your computer, just using the "
"on-line translation service offered by http://hosted.weblate.org/"
msgstr ""
"번역하다! 번역에 대한 모든 도움을 환영합니다. http://hosted.weblate.org/에서 제공하는 온라인 번역 서비스를 "
"사용하면 컴퓨터에 아무것도 설치하지 않고도 이 작업을 수행 할 수 있습니다"

#: ../../building.rst:25
msgid ""
"fork the respository, choose an issue, solve it, open a pull request. See"
" the `bug solving workflow`_ below."
msgstr "리포지토리를 포크하고, 문제를 선택하고, 해결하고, 풀 요청을 엽니다. 아래의`버그 해결 워크플로우`_를 참조하십시오."

#: ../../building.rst:28
msgid ""
"If you haven't yet installed Ghini, and want to have a look at its code "
"history, you can open our `github project page "
"<http://github.com/Ghini/ghini.desktop>`_ and see all that has been going"
" on around Ghini since its inception as Bauble, back in the year 2004."
msgstr ""
"아직 Ghini를 설치하지 않았고 코드 기록을 보고 싶다면`github 프로젝트 페이지 <http://github.com/Ghini/"
"ghini.desktop>`_를 열고 2004 년에 Bauble로 시작된 이래 Ghini를 둘러 보았습니다."

#: ../../building.rst:33
msgid ""
"If you install the software according to the ``devinstall`` instructions,"
" you have the whole history in your local git clone."
msgstr "``devinstall ''지침에 따라 소프트웨어를 설치하면 로컬 git 클론에 전체 기록이 있습니다."

#: ../../building.rst:37
msgid "Software source, versions, branches"
msgstr "소프트웨어 소스, 버전, 분기"

#: ../../building.rst:39
msgid ""
"If you want a particular version of Ghini, we release and maintain "
"versions as branches. You should ``git checkout`` the branch "
"corresponding to the version of your choice."
msgstr ""
"특정 버전의 Ghini를 원하면 버전을 브랜치로 출시하고 유지합니다. 선택한 버전에 해당하는 브랜치를``git checkout ''해야 "
"합니다."

#: ../../building.rst:44
msgid "production line"
msgstr "생산 라인"

#: ../../building.rst:46
msgid ""
"Branch names for Ghini stable (production) versions are of the form "
"``ghini-x.y`` (eg: ghini-1.0); branch names where Ghini testing versions "
"are published are of the form ``ghini-x.y-dev`` (eg: ghini-1.0-dev)."
msgstr ""
"Ghini 안정 (프로덕션) 버전의 브랜치 이름은``ghini-x.y ''형식입니다 (예 : ghini-1.0). Ghini 테스트 "
"버전이 게시 된 브랜치 이름은``ghini-x.y-dev ''형식입니다 (예 : ghini-1.0-dev)."

#: ../../building.rst:51
msgid "Development Workflow"
msgstr "개발 워크 플로"

#: ../../building.rst:53
msgid ""
"Our workflow is to continuously commit to the testing branch, to often "
"push them to github, to let travis-ci and coveralls.io check the quality "
"of the pushed testing branches, finally, from time to time, to merge the "
"testing branch into the corresponding release."
msgstr ""
"우리의 워크플로우는 테스트 브랜치에 지속적으로 커밋하고, 종종 github로 푸시하고, travis-ci 및 coveralls.io가 "
"푸시 된 테스트 브랜치의 품질을 확인하고, 마지막으로 테스트 브랜치를 수시로 병합하도록 하는 것입니다. 해당 릴리스."

#: ../../building.rst:58
msgid ""
"When working at larger issues, which seem to take longer than a couple of"
" days, I might open a branch associated to the issue. I don't do this "
"very often."
msgstr ""
"며칠 이상 걸리는 것처럼 보이는 더 큰 문제에 대해 작업 할 때 문제와 관련된 분기를 열 수 있습니다. 나는 이것을 자주 하지 않는다."

#: ../../building.rst:63
msgid "larger issues"
msgstr "더 큰 문제"

#: ../../building.rst:65
msgid ""
"When facing a single larger issue, create a branch tag at the tip of a "
"main development line (e.g.: ``ghini-1.0-dev``), and follow the workflow "
"described at"
msgstr ""
"하나의 더 큰 문제가 발생하면 기본 개발 라인의 끝에 브랜치 태그 (예 :``ghini-1.0-dev '')를 만들고에 설명 된 워크 "
"플로를 따릅니다"

#: ../../building.rst:71
msgid "in short::"
msgstr "요컨대 ::"

#: ../../building.rst:77
msgid ""
"Work on the new temporary branch. When ready, go to github, merge the "
"branch with the main development line from which you branched, solve "
"conflicts where necessary, delete the temporary branch."
msgstr ""
"새 임시 브랜치에서 작업하십시오. 준비가 되면 github로 이동하여 분기 한 기본 개발 라인과 분기를 병합하고 필요한 경우 충돌을 "
"해결하고 임시 분기를 삭제하십시오."

#: ../../building.rst:81
msgid ""
"When ready for publication, merge the development line into the "
"corresponding production line."
msgstr "게시 할 준비가 되면 개발 라인을 해당 생산 라인에 병합합니다."

#: ../../building.rst:85
msgid "Updating the set of translatable strings"
msgstr "번역 가능한 문자열 집합 업데이트"

#: ../../building.rst:87
msgid ""
"From time to time, during the process of updating the software, you will "
"be adding or modifying strings in the python sources, in the "
"documentation, in the glade sources. Most of our strings are "
"translatable, and are offered to weblate for people to contribute, in the"
" form of several ``.po`` files."
msgstr ""
"때때로 소프트웨어를 업데이트하는 과정에서 파이썬 소스, 문서, glade 소스의 문자열을 추가하거나 수정합니다. 대부분의 문자열은 번역이 "
"가능하며 여러``.po ''파일 형식으로 사람들이 기여할 수 있도록 웨블레이트에 제공됩니다."

#: ../../building.rst:92
msgid ""
"A ``po`` is mostly composed of pairs of text portions, original and "
"translation, and is specific to a target language. When a translator adds"
" a translation on weblate, this reaches our repository on github. When a "
"programmer adds a string to the software, this reaches weblate as \"to be"
" translated\"."
msgstr ""
"``po ''는 대부분 원본과 번역의 텍스트 부분 쌍으로 구성되며 대상 언어에 따라 다릅니다. 번역가가 weblate에 번역을 추가하면 "
"github의 저장소에 도달합니다. 프로그래머가 소프트웨어에 문자열을 추가하면 \"to be translation\"으로 weblate에 "
"도달합니다."

#: ../../building.rst:98
msgid ""
"Weblate hosts the `Ghini <https://hosted.weblate.org/projects/ghini/>`_ "
"project. Within this project we have components, each of which "
"corresponds to a branch of a repository on github. Each component accepts"
" translations in several languages."
msgstr ""
"Weblate는`Ghini <https://hosted.weblate.org/projects/ghini/>`_ 프로젝트를 호스팅합니다. "
"이 프로젝트에는 github의 저장소 브랜치에 해당하는 구성 요소가 있습니다. 각 구성 요소는 여러 언어로 번역을 허용합니다."

#: ../../building.rst:104
msgid "component"
msgstr "구성 요소"

#: ../../building.rst:104
msgid "repository"
msgstr "저장소"

#: ../../building.rst:104
msgid "branch"
msgstr "분기"

#: ../../building.rst:107
#, fuzzy
msgid "Desktop 3.1"
msgstr "Desktop 3.1"

#: ../../building.rst:107 ../../building.rst:109
#, fuzzy
msgid "ghini-3.1-dev"
msgstr "ghini-3.1-dev"

#: ../../building.rst:109
#, fuzzy
msgid "Documentation 3.1"
msgstr "Documentation 3.1"

#: ../../building.rst:111
msgid "Pocket"
msgstr "포켓"

#: ../../building.rst:111 ../../ghini-family.rst:15
#, fuzzy
msgid "ghini.pocket"
msgstr "ghini.pocket"

#: ../../building.rst:112
#, fuzzy
msgid "Tour"
msgstr "Tour"

#: ../../building.rst:112 ../../ghini-family.rst:98
#, fuzzy
msgid "ghini.tour"
msgstr "ghini.tour"

#: ../../building.rst:115
msgid ""
"To update the ``po`` files relative to the *software*, you set the "
"working directory to the root of your checkout of *ghini.desktop*, and "
"you run the script::"
msgstr ""
"* software *와 관련된``po ''파일을 업데이트하려면 작업 디렉토리를 * ghini.desktop * 체크 아웃 루트로 "
"설정하고 스크립트를 실행합니다::"

#: ../../building.rst:121
msgid ""
"To update the ``po`` files relative to the *documentation*, you set the "
"working directory to the root of your checkout of *ghini.desktop-"
"docs.i18n*, and you run the script::"
msgstr ""
"* documentation *과 관련된``po ''파일을 업데이트하려면 작업 디렉토리를 * ghini.desktop-docs.i18n *"
" 체크 아웃 루트로 설정하고 다음 스크립트를 실행합니다::"

#: ../../building.rst:127
msgid ""
"When you run either of the above mentioned scripts, chances are you need "
"to commit *all* ``po`` files in the project. You may want to review the "
"changes before committing them to the respository. This is most important"
" when you perform a marginal correction to a string, like removing a "
"typo."
msgstr ""
"위에서 언급 한 스크립트 중 하나를 실행할 때 프로젝트에서 * 모든 *``po ''파일을 커밋해야 할 가능성이 있습니다. 저장소에 "
"커밋하기 전에 변경 사항을 검토 할 수 있습니다. 이것은 오타 제거와 같이 문자열에 대한 한계 수정을 수행 할 때 가장 중요합니다."

#: ../../building.rst:132
msgid ""
"Something that happens: running into a conflict. Solving conflicts is not"
" difficult once you know how to do that. First of all, add weblate as "
"remote::"
msgstr "일어나는 일 : 갈등에 빠진다. 갈등을 해결하는 방법을 알면 어렵지 않습니다. 먼저 weblate를 원격으로 추가하십시오::"

#: ../../building.rst:137
msgid ""
"Then make sure we are in the correct repository, on the correct branch, "
"update the remote, merge with it::"
msgstr "일어나는 일 : 갈등에 빠진다. 갈등을 해결하는 방법을 알면 어렵지 않습니다. 먼저 weblate를 원격으로 추가하십시오::"

#: ../../building.rst:144
msgid ""
"`Our documentation <https://readthedocs.org/projects/ghini/>`_ on "
"readthedocs has an original English version, and several translations. We"
" just follow the `description of localisation "
"<http://docs.readthedocs.io/en/latest/localization.html>`_, there's "
"nothing that we invented ourselves here."
msgstr ""
"`readthedocs의 문서 <https://readthedocs.org/projects/ghini/>`_에는 원본 영어 버전과 여러 "
"번역이 있습니다. 우리는`현지화 설명 <http://docs.readthedocs.io/en/latest/localization."
"html>`_을 따를뿐입니다. 여기서 우리가 스스로 발명 한 것은 없습니다."

#: ../../building.rst:150
msgid ""
"Readthedocs checks the project's *Language* setting, and invokes "
"``sphinx-intl`` to produce the formatted documentation in the target "
"language. With the default configuration —which we did not alter— "
"``sphinx-intl`` expects one ``po`` file per source document, named as the"
" source document, and that they all reside in the directory "
"``local/$(LANG)/LC_MESSAGES/``."
msgstr ""
"Readthedocs는 프로젝트의 * Language * 설정을 확인하고``sphinx-intl``을 호출하여 대상 언어로 형식화 된 "
"문서를 생성합니다. 우리가 변경하지 않은 기본 구성을 사용하면``sphinx-intl``은 소스 문서 당 하나의``po ''파일을 "
"예상하며 소스 문서로 명명되며 모두``local / $ ( LANG) / LC_MESSAGES /``."

#: ../../building.rst:157
msgid ""
"On the other hand, Weblate (and ourselves) prefers a single ``po`` file "
"per language, and keeps them all in the same ``/po`` directory, just as "
"we do for the software project: ``/po/$(LANG).po``."
msgstr ""
"반면에 웨블 레이트 (그리고 우리 자신)는 언어 당 하나의``po ''파일을 선호하며, 소프트웨어 프로젝트에서와 마찬가지로 모두 "
"동일한``/ po ''디렉토리에 보관합니다 :``/ po /$(LANG).po ''."

#: ../../building.rst:161
msgid ""
"In order not to repeat information, and to let both systems work their "
"natural way, we have two sets of symbolic links (git honors them)."
msgstr "정보를 반복하지 않고 두 시스템이 자연스럽게 작동하도록하기 위해 두 세트의 심볼릭 링크가 있습니다 (git이이를 존중합니다)."

#: ../../building.rst:164
msgid ""
"To summarise: when a file in the documentation is updated, the "
"``runme.sh`` script will:"
msgstr "요약하자면, 문서의 파일이 업데이트되면``runme.sh ''스크립트는 다음을 수행합니다.:"

#: ../../building.rst:167
msgid "copy the ``rst`` files from the software to the documentation;"
msgstr "소프트웨어에서 문서로``rst ''파일을 복사합니다;"

#: ../../building.rst:168
msgid "create a new ``pot`` file for each of the documentation files;"
msgstr "각 문서 파일에 대해 새``pot ''파일을 만듭니다;"

#: ../../building.rst:169
msgid "merge all ``pot`` files into one ``doc.pot``;"
msgstr "모든``pot ''파일을 하나의``doc.pot ''으로 병합합니다;"

#: ../../building.rst:170
msgid ""
"use the updated ``doc.pot`` to update all ``doc.po`` files (one per "
"language);"
msgstr "업데이트 된``doc.pot``을 사용하여 모든``doc.po ''파일을 업데이트합니다 (언어 당 하나씩);"

#: ../../building.rst:171
msgid "create all symbolic links:"
msgstr "모든 심볼릭 링크를 만듭니다:"

#: ../../building.rst:173
msgid "those expected by ``sphinx-intl`` in ``/local/$(LANG)/LC_MESSAGES/``"
msgstr "``/ local / $ (LANG) / LC_MESSAGES /``의``sphinx-intl``에 의해 예상되는 것"

#: ../../building.rst:174
msgid "those used by weblate in ``/po/$(LANG).po``"
msgstr "weblate에서 사용하는``/ po / $ (LANG) .po``"

#: ../../building.rst:176
msgid ""
"We could definitely write the above in a Makefile, or even better include"
" it in ``/doc/Makefile``. Who knows, maybe we will do that."
msgstr ""
"위의 내용을 Makefile에 작성하거나``/ doc / Makefile``에 포함하는 것이 더 좋습니다. 누가 알겠습니까, 아마도 "
"우리가 그렇게 할 것입니다."

#: ../../building.rst:180
msgid "Producing the docs locally"
msgstr "로컬에서 문서 생성"

#: ../../building.rst:182
msgid ""
"The above description is about how we help external sites produce our "
"documentation so that it is online for all to see.  But what if you want "
"to have the documentation locally, for example if you want to edit and "
"review before pushing your commits to the cloud?"
msgstr ""
"위의 설명은 모든 사람이 볼 수 있도록 외부 사이트에서 문서를 생성하는 데 도움이 되는 방법에 대한 것입니다. 그러나 예를 들어 커밋을 "
"클라우드로 푸시하기 전에 편집하고 검토하려는 경우와 같이 문서를 로컬로 갖고 싶다면 어떻게 해야 할까요?"

#: ../../building.rst:187
msgid ""
"In order to run sphinx locally, you need to install it **within** the "
"same virtual environment as ghini, and to install it there, you need to "
"have a sphinx version whose dependencies don not conflict with "
"ghini.desktop's dependecies."
msgstr ""
"sphinx를 로컬에서 실행하려면 ghini와 동일한 가상 환경 ** 내 **에 설치해야 하며, 여기에 설치하려면 종속성이 "
"ghini.desktop의 종속성과 충돌하지 않는 sphinx 버전이 있어야 합니다."

#: ../../building.rst:192
msgid "What we do to keep this in order?"
msgstr "이것을 순서대로 유지하려면 어떻게해야합니까?"

#: ../../building.rst:194
msgid ""
"We state this extra dependency in the ``setup.py`` file, as an "
"``extras_require`` entry.  Create and activate the virtual environment, "
"then run ``easy_install ghini.desktop[docs]``.  This gets you the sphinx "
"version as declared in the ``setup.py`` file."
msgstr ""
"이 추가 종속성은``setup.py ''파일에``extras_require ''항목으로 명시합니다. 가상 환경을 생성하고 활성화 한 "
"다음``easy_install ghini.desktop [docs]``를 실행합니다. 이렇게 하면``setup.py ''파일에 선언 된 "
"스핑크스 버전이 표시됩니다."

#: ../../building.rst:199
msgid ""
"If all you want is the html documentation built locally, run ``./setup.py"
" install docs``.  For more options, enter the ``doc`` directory and run "
"``make``."
msgstr ""
"로컬에서 빌드 된 html 문서 만 원하는 경우``./setup.py install docs``를 실행하십시오. 더 많은 옵션을 보려면``"
"doc ''디렉토리를 입력하고``make ''를 실행하십시오."

#: ../../building.rst:204
msgid "Which way do the translated strings reach our users?"
msgstr "번역 된 문자열은 어떤 방식으로 사용자에게 전달됩니까?"

#: ../../building.rst:206
msgid ""
"A new translator asked the question, adding: »Is this an automated "
"process from Weblate --> GIT --> Ghini Desktop installed on users "
"computers, or does this require manual steps?"
msgstr ""
"새로운 번역가가 다음과 같이 질문했습니다.»Weblate-> GIT-> 사용자 컴퓨터에 설치된 Ghini Desktop의 자동화 된 "
"프로세스입니까, 아니면 수동 단계가 필요합니까?"

#: ../../building.rst:210
msgid ""
"The aswer is that the whole interaction is quite complex, and it depends "
"on the component."
msgstr "문제는 전체 상호 작용이 매우 복잡하고 구성 요소에 따라 다르다는 것입니다."

#: ../../building.rst:213
msgid ""
"When you install ``ghini.desktop`` or one of the Android apps, the "
"installation doesn't assume a specific run-time language: a user can "
"change their language configuration any time.  So what we do is to "
"install the software in English together with a translation table from "
"English to whatever else."
msgstr ""
"``ghini.desktop ''또는 Android 앱 중 하나를 설치할 때 설치는 특정 런타임 언어를 가정하지 않습니다. 사용자는 "
"언제든지 언어 구성을 변경할 수 있습니다. 그래서 우리가하는 일은 영어로 된 번역 표와 함께 영어로 된 소프트웨어를 설치하는 것입니다."

#: ../../building.rst:219
msgid ""
"At run-time the GUI libraries (Android or GTK) know where to look for the"
" translation strings.  These translation tables are generated during the "
"installation or upgrade process, based on the strings you see on Weblate."
msgstr ""
"런타임에 GUI 라이브러리 (Android 또는 GTK)는 번역 문자열을 찾을 위치를 알고 있습니다. 이러한 번역 테이블은 "
"Weblate에 표시되는 문자열을 기반으로 설치 또는 업그레이드 프로세스 중에 생성됩니다."

#: ../../building.rst:223
msgid ""
"The path followed by translations is: You edit strings on Weblate, "
"Weblate keeps accumulating them until you are done, or you don't interact"
" with Weblate for a longer while; Weblate pushes the strings to github, "
"directly into the development line ``ghini-1.0-dev``; I see them and I "
"might blindly trust or prefer to review them, maybe I look them up in "
"wikipedia or get them translated back to Italian, Spanish or English by "
"some automatic translation service; sometimes I need to solve conflicts "
"arising because of changed context, not too often fortunately.  As said, "
"this lands in the development line ``ghini-1.0-dev``, which I regularly "
"publish to the production line ``ghini-1.0``, and this is the moment when"
" the new translations finally make it to the distributed software."
msgstr ""
"번역이 뒤 따르는 경로는 다음과 같습니다. Weblate에서 문자열을 편집하거나, Weblate가 완료 될 때까지 문자열을 계속 "
"축적하거나, Weblate와 오랫동안 상호 작용하지 않습니다. Weblate는 문자열을 github에 직접 푸시하여 개발 "
"라인``ghini-1.0-dev ''로 보냅니다. 나는 그들을 보고 맹목적으로 신뢰하거나 검토하는 것을 선호 할 수 있습니다. "
"위키피디아에서 찾아 보거나 자동 번역 서비스를 통해 이탈리아어, 스페인어 또는 영어로 다시 번역 할 수도 있습니다. 때로는 상황이 "
"변경되어 발생하는 갈등을 해결해야 합니다. 말했듯이 이것은 개발 라인``ghini-1.0-dev ''에 도착하며, 저는 정기적으로 생산 "
"라인``ghini-1.0 ''에 게시하고 있으며, 이것은 새로운 번역이 마침내 배포 된 소프트웨어."

#: ../../building.rst:235
msgid ""
"Users will notice a *new version available* warning and can decide to "
"ignore it, or to update."
msgstr "사용자는 * 사용 가능한 새 버전 * 경고를보고 무시하거나 업데이트 할 수 있습니다."

#: ../../building.rst:238
msgid ""
"For ``ghini.pocket``, it is similar, but the notification is handled by "
"the Android system.  We publish on the Play Store, and depending on your "
"settings, your phone will update the software automatically, or only "
"notify you, or do nothing.  It depends on how you configured automatic "
"updates."
msgstr ""
"``ghini.pocket``의 경우 비슷하지만 Android 시스템에서 알림을 처리합니다. Google은 Play 스토어에 게시하며 "
"설정에 따라 휴대 전화가 소프트웨어를 자동으로 업데이트하거나 알림 만 보내거나 아무것도 하지 않습니다. 자동 업데이트를 구성한 방법에 "
"따라 다릅니다."

#: ../../building.rst:243
msgid "For ``ghini.web``, we haven't yet defined how to distribute it."
msgstr "``ghini.web``의 경우 배포 방법을 아직 정의하지 않았습니다."

#: ../../building.rst:245
msgid ""
"For ghini's documentation, it's completely automatic, and all is handled "
"by readthedocs.org."
msgstr "ghini 문서의 경우 완전히 자동이며 모두 readthedocs.org에서 처리합니다."

#: ../../building.rst:250
msgid "Adding missing unit tests"
msgstr "누락 된 단위 테스트 추가"

#: ../../building.rst:252
msgid ""
"If you are interested contributing to development of Ghini, a good way to"
" do so would be by helping us finding and writing the missing unit tests."
msgstr "Ghini 개발에 관심이 있으시다면, 누락 된 단위 테스트를 찾고 작성하도록 도와 주시면 좋은 방법이 될 것입니다."

#: ../../building.rst:255
msgid ""
"A well tested function is one whose behaviour you cannot change without "
"breaking at least one unit test."
msgstr "잘 테스트 된 함수는 적어도 하나의 단위 테스트를 위반하지 않고는 동작을 변경할 수 없는 함수입니다."

#: ../../building.rst:258
msgid ""
"We all agree that in theory theory and practice match perfectly and that "
"one first writes the tests, then implements the function. In practice, "
"however, practice does not match theory and we have been writing tests "
"after writing and even publishing the functions."
msgstr ""
"우리 모두는 이론과 실습에서 완벽하게 일치하고 먼저 테스트를 작성한 다음 기능을 구현한다는 데 동의합니다. 그러나 실제로 실습은 이론과 "
"일치하지 않으며 함수를 작성하고 게시 한 후 테스트를 작성했습니다."

#: ../../building.rst:263
msgid ""
"This section describes the process of adding unit tests for "
"``bauble.plugins.plants.family.remove_callback``."
msgstr ""
"이 섹션에서는``bauble.plugins.plants.family.remove_callback``에 대한 단위 테스트를 추가하는 "
"프로세스를 설명합니다."

#: ../../building.rst:267
msgid "What to test"
msgstr "테스트 할 내용"

#: ../../building.rst:269
msgid ""
"First of all, open the coverage report index, and choose a file with low "
"coverage."
msgstr "먼저 커버리지 보고서 색인을 열고 커버리지가 낮은 파일을 선택합니다."

#: ../../building.rst:272
msgid ""
"For this example, run in October 2015, we landed on "
"``bauble.plugins.plants.family``, at 33%."
msgstr ""
"2015 년 10 월에 실행 된 이 예제의 경우 33 %로``bauble.plugins.plants.family``에 도달했습니다."

#: ../../building.rst:277
msgid ""
"The first two functions which need tests, ``edit_callback`` and "
"``add_genera_callback``, include creation and activation of an object "
"relying on a custom dialog box. We should really first write unit tests "
"for that class, then come back here."
msgstr ""
"테스트가 필요한 처음 두 함수 인``edit_callback ''및``add_genera_callback ''에는 사용자 지정 대화 "
"상자에 의존하는 개체의 생성 및 활성화가 포함됩니다. 먼저 해당 클래스에 대한 단위 테스트를 작성한 다음 여기로 돌아와야합니다."

#: ../../building.rst:282
msgid ""
"The next function, ``remove_callback``, also activates a couple of dialog"
" and message boxes, but in the form of invoking a function requesting "
"user input via yes-no-ok boxes. These functions we can easily replace "
"with a function mocking the behaviour."
msgstr ""
"다음 기능인``remove_callback ''은 대화 상자와 메시지 상자 두 개를 활성화하지만 예-아니오 상자를 통해 사용자 입력을 "
"요청하는 기능을 호출하는 형태입니다. 이러한 함수는 동작을 조롱하는 함수로 쉽게 대체 할 수 있습니다."

#: ../../building.rst:288
msgid "how to test"
msgstr "테스트 방법"

#: ../../building.rst:290
msgid ""
"So, having decided what to describe in unit test, we look at the code and"
" we see it needs discriminate a couple of cases:"
msgstr "따라서 단위 테스트에서 무엇을 설명할지 결정한 후 코드를 살펴보면 몇 가지 경우를 구별해야합니다:"

#: ../../building.rst:296
msgid "**parameter correctness**"
msgstr "** 매개 변수 정확성 **"

#: ../../building.rst:294
msgid "the list of families has no elements."
msgstr "과 목록에는 요소가 없습니다."

#: ../../building.rst:295
msgid "the list of families has more than one element."
msgstr "과 목록에는 요소가 없습니다."

#: ../../building.rst:296
msgid "the list of families has exactly one element."
msgstr "과 목록에는 정확히 하나의 요소가 있습니다."

#: ../../building.rst:300
msgid "**cascade**"
msgstr "**종속**"

#: ../../building.rst:299
msgid "the family has no genera"
msgstr "과는 속이 없다"

#: ../../building.rst:300
msgid "the family has one or more genera"
msgstr "과에 하나 이상의 속이 있습니다"

#: ../../building.rst:304
msgid "**confirm**"
msgstr "** 확인 **"

#: ../../building.rst:303
msgid "the user confirms deletion"
msgstr "사용자가 삭제를 확인"

#: ../../building.rst:304
msgid "the user does not confirm deletion"
msgstr "사용자가 삭제를 확인하지 않음"

#: ../../building.rst:308
msgid "**deleting**"
msgstr "** 삭제 **"

#: ../../building.rst:307
msgid "all goes well when deleting the family"
msgstr "속을 삭제할 때 모든 것이 잘됩니다"

#: ../../building.rst:308
msgid "there is some error while deleting the family"
msgstr "과를 삭제하는 동안 약간의 오류가 있습니다"

#: ../../building.rst:310
msgid ""
"I decide I will only focus on the **cascade** and the **confirm** "
"aspects. Two binary questions: 4 cases."
msgstr "** 캐스케이드 ** 및 ** 확인 ** 측면에만 집중하기로 결정했습니다. 2 개의 이진 질문 : 4 개의 경우."

#: ../../building.rst:314
msgid "where to put the tests"
msgstr "테스트를 둘 위치"

#: ../../building.rst:316
msgid ""
"Locate the test script and choose the class where to put the extra unit "
"tests."
msgstr "테스트 스크립트를 찾고 추가 단위 테스트를 넣을 클래스를 선택합니다."

#: ../../building.rst:320
msgid "what about skipped tests"
msgstr "건너 뛴 테스트는 어떻습니까"

#: ../../building.rst:323
msgid ""
"The ``FamilyTests`` class contains a skipped test, implementing it will "
"be quite a bit of work because we need rewrite the FamilyEditorPresenter,"
" separate it from the FamilyEditorView and reconsider what to do with the"
" FamilyEditor class, which I think should be removed and replaced with a "
"single function."
msgstr ""
"``Family Tests ''클래스에는 건너 뛴 테스트가 포함되어 있습니다. Family Editor Presenter를 다시 "
"작성하고이를 Family Editor View에서 분리하고 제거해야 한다고 생각하는 Family Editor 클래스로 수행 할 작업을 "
"다시 고려해야 하기 때문에 구현하는 작업이 상당히 많을 것입니다. 단일 기능으로 대체되었습니다."

#: ../../building.rst:330
msgid "writing the tests"
msgstr "테스트 작성"

#: ../../building.rst:332
msgid ""
"After the last test in the FamilyTests class, I add the four cases I want"
" to describe, and I make sure they fail, and since I'm lazy, I write the "
"most compact code I know for generating an error::"
msgstr ""
"FamilyTests 클래스의 마지막 테스트 후에 설명하고 싶은 네 가지 사례를 추가하고 실패하는지 확인하고 게으르기 때문에 오류 생성에 "
"대해 알고 있는 가장 간단한 코드를 작성합니다::"

#: ../../building.rst:349
msgid "One test, step by step"
msgstr "단계별 테스트"

#: ../../building.rst:351
msgid "Let's start with the first test case."
msgstr "첫 번째 테스트 케이스부터 시작하겠습니다."

#: ../../building.rst:353
msgid "When writing tests, I generally follow the pattern:"
msgstr "테스트를 작성할 때 일반적으로 다음 패턴을 따릅니다:"

#: ../../building.rst:355
msgid "T₀ (initial condition),"
msgstr "T₀ (초기 조건),"

#: ../../building.rst:356
msgid "action,"
msgstr "동작,"

#: ../../building.rst:357
msgid "T₁ (testing the result of the action given the initial conditions)"
msgstr "T₁ (초기 조건이 주어진 경우 작업 결과 테스트)"

#: ../../building.rst:359
msgid "what's in a name — unit tests"
msgstr "이름에있는 것 — 단위 테스트"

#: ../../building.rst:362
msgid ""
"There's a reason why unit tests are called unit tests. Please never test "
"two actions in one test."
msgstr "단위 테스트를 단위 테스트라고 부르는 데에는 이유가 있습니다. 한 번의 테스트에서 두 가지 작업을 테스트하지 마십시오."

#: ../../building.rst:365
msgid ""
"So let's describe T₀ for the first test, a database holding a family "
"without genera::"
msgstr "그럼 첫 번째 테스트의 T₀에 대해 설명해 봅시다. 속이없는 가족을 포함하는 데이터베이스 :"

#: ../../building.rst:373
msgid ""
"We do not want the function being tested to invoke the interactive "
"``utils.yes_no_dialog`` function, we want ``remove_callback`` to invoke a"
" non-interactive replacement function. We achieve this simply by making "
"``utils.yes_no_dialog`` point to a ``lambda`` expression which, like the "
"original interactive function, accepts one parameter and returns a "
"boolean. In this case: ``False``::"
msgstr ""
"테스트중인 함수가 대화 형``utils.yes_no_dialog ''함수를 호출하는 것을 원하지 않고,``remove_callback``"
"이 비대화 형 대체 함수를 호출하도록합니다. ``utils.yes_no_dialog``가 원래의 대화 형 함수와 마찬가지로 하나의 매개 "
"변수를 받아들이고 부울을 반환하는``람다 ''표현식을 가리 키도록 만들기 만하면됩니다. 이 경우 :``False ''::"

#: ../../building.rst:391
msgid "Next we test the result."
msgstr "다음으로 결과를 테스트합니다."

#: ../../building.rst:393
msgid ""
"Well, we don't just want to test whether or not the object Arecaceae was "
"deleted, we also should test the value returned by ``remove_callback``, "
"and whether ``yes_no_dialog`` and ``message_details_dialog`` were invoked"
" or not."
msgstr ""
"음, 우리는 Arecaceae 개체가 삭제되었는지 여부를 테스트하는 것이 아니라``remove_callback ''에서 반환 된 값과``"
"yes_no_dialog ''및``message_details_dialog ''가 호출되었는지 여부도 테스트해야합니다. ."

#: ../../building.rst:398
msgid ""
"A ``lambda`` expression is not enough for this. We do something "
"apparently more complex, which will make life a lot easier."
msgstr "``람다 ''표현만으로는 충분하지 않습니다. 우리는 분명히 더 복잡한 일을하여 삶을 훨씬 더 쉽게 만듭니다."

#: ../../building.rst:401
msgid "Let's first define a rather generic function::"
msgstr "먼저 다소 일반적인 함수를 정의 해 보겠습니다::"

#: ../../building.rst:407
msgid ""
"and we grab ``partial`` from the ``functools`` standard module, to "
"partially apply the above ``mockfunc``, leaving only ``msg`` unspecified,"
" and use this partial application, which is a function accepting one "
"parameter and returning a value, to replace the two functions in "
"``utils``. The test function now looks like this::"
msgstr ""
"그리고 우리는``functools ''표준 모듈에서``partial ''을 가져 와서 위의``mockfunc ''를 부분적으로 적용하고``"
"msg ''만 지정하지 않고이 부분 응용 프로그램을 사용합니다. 매개 변수와 값을 반환하여``utils ''의 두 함수를 대체합니다. "
"이제 테스트 기능은 다음과 같습니다::"

#: ../../building.rst:429
msgid ""
"The test section checks that ``message_details_dialog`` was not invoked, "
"that ``yes_no_dialog`` was invoked, with the correct message parameter, "
"that Arecaceae is still there::"
msgstr ""
"테스트 섹션은``message_details_dialog``가 호출되지 않았는지,``yes_no_dialog``가 올바른 메시지 매개 "
"변수와 함께 호출되었는지, Arecaceae가 아직 거기에 있는지 확인합니다::"

#: ../../building.rst:445
msgid "And so on"
msgstr "등등"

#: ../../building.rst:447
msgid ""
"`there are two kinds of people, those who complete what they start, and "
"so on`"
msgstr "`시작한 것을 완수하는 두 종류의 사람들이있다`"

#: ../../building.rst:450
msgid ""
"Next test is almost the same, with the difference that the "
"``utils.yes_no_dialog`` should return ``True`` (this we achieve by "
"specifying ``result=True`` in the partial application of the generic "
"``mockfunc``)."
msgstr ""
"다음 테스트는``utils.yes_no_dialog``가``True ''를 반환해야한다는 차이점을 제외하면 거의 동일합니다 (일반``"
"mockfunc ''의 부분 응용 프로그램에서``result = True``를 지정하여 달성합니다. `)."

#: ../../building.rst:455
msgid ""
"With this action, the value returned by ``remove_callback`` should be "
"``True``, and there should be no Arecaceae Family in the database any "
"more::"
msgstr ""
"이 작업을 통해``remove_callback``에서 반환 된 값은``True ''여야하며 데이터베이스에 Arecaceae Family가 "
"더 이상 없어야합니다::"

#: ../../building.rst:485
msgid ""
"have a look at commit 734f5bb9feffc2f4bd22578fcee1802c8682ca83 for the "
"other two test functions."
msgstr "다른 두 테스트 기능에 대한 커밋 734f5bb9feffc2f4bd22578fcee1802c8682ca83을 살펴보십시오."

#: ../../building.rst:489
msgid "Testing logging"
msgstr "로깅 테스트"

#: ../../building.rst:491
msgid ""
"Our ``bauble.test.BaubleTestCase`` objects use handlers of the class "
"``bauble.test.MockLoggingHandler``.  Every time an individual unit test "
"is started, the ``setUp`` method will create a new ``handler`` and "
"associate it to the root logger.  The ``tearDown`` method takes care of "
"removing it."
msgstr ""
"우리의``bauble.test.BaubleTestCase ''객체는``bauble.test.MockLoggingHandler`` 클래스의 "
"핸들러를 사용합니다. 개별 단위 테스트가 시작될 때마다``setUp ''메소드는 새로운``핸들러 ''를 생성하고이를 루트 로거에 "
"연결합니다. ``tearDown ''메소드가이를 제거합니다."

#: ../../building.rst:496
#, python-format
msgid ""
"You can check for presence of specific logging messages in "
"``self.handler.messages``. ``messages`` is a dictionary, initially empty,"
" with two levels of indexation. First the name of the logger issuing the "
"logging record, then the name of the level of the logging record. Keys "
"are created when needed. Values hold lists of messages, formatted "
"according to whatever formatter you associate to the handler, defaulting "
"to ``logging.Formatter(\"%(message)s\")``."
msgstr ""
"``self.handler.messages``에서 특정 로깅 메시지의 존재 여부를 확인할 수 있습니다. ``messages``는 두 가지 "
"수준의 인덱싱이있는 사전이며 처음에는 비어 있습니다. 먼저 로깅 레코드를 발행하는 로거의 이름, 그 다음 로깅 레코드의 레벨 이름입니다. "
"필요한 경우 키가 생성됩니다. 값은 핸들러에 연결하는 포맷터에 따라 형식이 지정된 메시지 목록을 보유하며 기본값은``"
"logging.Formatter ( \"% (message) s\")``입니다."

#: ../../building.rst:504
msgid ""
"You can explicitly empty the collected messages by invoking "
"``self.handler.clear()``."
msgstr "``self.handler.clear ()``를 호출하여 수집 된 메시지를 명시 적으로 비울 수 있습니다."

#: ../../building.rst:509
msgid "Putting all together"
msgstr "모두 합치기"

#: ../../building.rst:511
msgid "From time to time you want to activate the test class you're working at::"
msgstr "때때로 작업중인 테스트 클래스를 활성화하고 싶습니다::"

#: ../../building.rst:515
msgid "And at the end of the process you want to update the statistics::"
msgstr "프로세스가 끝나면 통계를 업데이트 할 수 있습니다::"

#: ../../building.rst:521
msgid "Structure of user interface"
msgstr "사용자 인터페이스 구조"

#: ../../building.rst:523
msgid ""
"The user interface is built according to the **Model** — **View** — "
"**Presenter** architectural pattern.  For much of the interface, "
"**Model** is a SQLAlchemy database object, but we also have interface "
"elements where there is no corresponding database model.  In general:"
msgstr ""
"사용자 인터페이스는 ** 모델 ** — **보기 ** — ** 발표자 ** 아키텍처 패턴에 따라 구축됩니다. 대부분의 인터페이스에서 ** "
"Model **은 SQLAlchemy 데이터베이스 개체이지만 해당 데이터베이스 모델이없는 인터페이스 요소도 있습니다. 일반적으로 :"

#: ../../building.rst:528
msgid ""
"The **View** is described as part of a **glade** file. This should "
"include the signal-callback and ListStore-TreeView associations. Just "
"reuse the base class ``GenericEditorView`` defined in ``bauble.editor``. "
"When you create your instance of this generic class, pass it the "
"**glade** file name and the root widget name, then hand this instance "
"over to the **presenter** constructor."
msgstr ""
"**보기 **는 ** glade ** 파일의 일부로 설명됩니다. 여기에는 신호 콜백 및 ListStore-TreeView 연결이 "
"포함되어야합니다. ``bauble.editor``에 정의 된 기본 클래스``GenericEditorView ''를 재사용하면됩니다. 이 "
"일반 클래스의 인스턴스를 만들 때 ** glade ** 파일 이름과 루트 위젯 이름을 전달한 다음이 인스턴스를 ** presenter **"
" 생성자에게 넘깁니다."

#: ../../building.rst:535
msgid ""
"In the glade file, in the ``action-widgets`` section closing your "
"GtkDialog object description, make sure every ``action-widget`` element "
"has a valid ``response`` value.  Use `valid GtkResponseType values "
"<http://gtk.php.net/manual/en/html/gtk/gtk.enum.responsetype.html>`_, for"
" example:"
msgstr ""
"glade 파일의``action-widgets ''섹션에서 GtkDialog 객체 설명을 닫고 모든``action-widget ''요소에 "
"유효한``response ''값이 있는지 확인합니다. `유효한 GtkResponseType 값 <http://gtk.php.net/"
"manual/en/html/gtk/gtk.enum.responsetype.html>`_을 사용합니다. 예를 들면 다음과 같습니다:"

#: ../../building.rst:546
msgid ""
"There is no easy way to unit test a subclassed view, so please don't "
"subclass views, there's really no need to."
msgstr "하위 클래스 뷰를 단위 테스트하는 쉬운 방법이 없으므로 뷰를 하위 클래스로 만들지 마십시오. 실제로 그럴 필요가 없습니다."

#: ../../building.rst:549
msgid ""
"In the glade file, every input widget should define which handler is "
"activated on which signal.  The generic Presenter class offers generic "
"callbacks which cover the most common cases."
msgstr ""
"glade 파일에서 모든 입력 위젯은 어떤 신호에서 어떤 핸들러가 활성화되는지 정의해야합니다. 일반 Presenter 클래스는 가장 "
"일반적인 경우를 다루는 일반 콜백을 제공합니다."

#: ../../building.rst:553
msgid ""
"GtkEntry (one-line text entry) will handle the ``changed`` signal, with "
"either ``on_text_entry_changed`` or ``on_unique_text_entry_changed``."
msgstr ""
"GtkEntry (한 줄 텍스트 항목)는``on_text_entry_changed "
"''또는``on_unique_text_entry_changed``와 함께``changed ''신호를 처리합니다."

#: ../../building.rst:555
msgid ""
"GtkTextView: associate it to a GtkTextBuffer. To handle the ``changed`` "
"signal on the GtkTextBuffer, we have to define a handler which invokes "
"the generic ``on_textbuffer_changed``, the only role for this function is"
" to pass our generic handler the name of the model attribute that "
"receives the change. This is a workaroud for an `unresolved bug in GTK "
"<http://stackoverflow.com/questions/32106765/>`_."
msgstr ""
"GtkTextView : GtkTextBuffer에 연결합니다. GtkTextBuffer에서``changed ''신호를 처리하려면 "
"일반``on_textbuffer_changed``를 호출하는 핸들러를 정의해야합니다.이 함수의 유일한 역할은 일반 핸들러에 수신되는 모델 "
"속성의 이름을 전달하는 것입니다. 변화. 이것은 GTK <http://stackoverflow.com/questions/32106765/"
">`_의 해결되지 않은 버그에 대한 해결 방법입니다."

#: ../../building.rst:561
msgid ""
"GtkComboBox with translated texts can't be easily handled from the glade "
"file, so we don't even try.  Use the ``init_translatable_combo`` method "
"of the generic ``GenericEditorView`` class, but please invoke it from the"
" **presenter**."
msgstr ""
"번역 된 텍스트가있는 GtkComboBox는 glade 파일에서 쉽게 처리 할 수 없으므로 시도조차하지 않습니다. 일반``"
"GenericEditorView ''클래스의``init_translatable_combo ''메소드를 사용하되 ** presenter **"
"에서 호출하십시오."

#: ../../building.rst:566
msgid ""
"The **Model** is just an object with known attributes. In this "
"interaction, the **model** is just a passive data container, it does "
"nothing more than to let the **presenter** modify it."
msgstr ""
"** 모델 **은 알려진 속성을 가진 개체입니다. 이 상호 작용에서 ** 모델 **은 단지 수동적 인 데이터 컨테이너 일 뿐이며 ** "
"발표자 **가 수정하도록하는 것 이상을 수행하지 않습니다."

#: ../../building.rst:570
msgid "The subclassed **Presenter** defines and implements:"
msgstr "서브 클래 싱 된 ** Presenter **는 다음을 정의하고 구현합니다:"

#: ../../building.rst:572
msgid ""
"``widget_to_field_map``, a dictionary associating widget names to name of"
" model attributes,"
msgstr "``widget_to_field_map '', 위젯 이름을 모델 속성 이름에 연결하는 사전,"

#: ../../building.rst:574
msgid ""
"``view_accept_buttons``, the list of widget names which, if activated by "
"the user, mean that the view should be closed,"
msgstr "``view_accept_buttons``, 사용자가 활성화하면 뷰를 닫아야 함을 의미하는 위젯 이름 목록,"

#: ../../building.rst:576
msgid "all needed callbacks,"
msgstr "필요한 모든 콜백,"

#: ../../building.rst:577
msgid "optionally, it plays the **model** role, too."
msgstr "선택적으로 ** 모델 ** 역할도 수행합니다."

#: ../../building.rst:579
msgid ""
"The **presenter** continuously updates the **model** according to changes"
" in the **view**. If the **model** corresponds to a database object, the "
"**presenter** commits all **model** updates to the database when the "
"**view** is closed successfully, or rolls them back if the **view** is "
"canceled. (this behaviour is influenced by the parameter ``do_commit``)"
msgstr ""
"** 발표자 **는 **보기 **의 변경 사항에 따라 ** 모델 **을 지속적으로 업데이트합니다. ** 모델 **이 데이터베이스 개체에 "
"해당하는 경우 ** 발표자 **는 **보기 **가 성공적으로 닫힐 때 모든 ** 모델 ** 업데이트를 데이터베이스에 커밋하거나 **보기 "
"**가 ** 취소됩니다. (이 동작은``do_commit ''매개 변수의 영향을받습니다)"

#: ../../building.rst:585
msgid ""
"If the **model** is something else, then the **presenter** will do "
"something else."
msgstr "** 모델 **이 다른 경우 ** 발표자 **가 다른 작업을 수행합니다."

#: ../../building.rst:590
msgid ""
"A well behaved **presenter** uses the **view** api to query the values "
"inserted by the user or to forcibly set widget statuses. Please do not "
"learn from the practice of our misbehaving presenters, some of which "
"directly handle fields of ``view.widgets``. By doing so, these presenters"
" prevents us from writing unit tests."
msgstr ""
"잘 작동하는 ** 발표자 **는 ** view ** API를 사용하여 사용자가 삽입 한 값을 쿼리하거나 위젯 상태를 강제로 설정합니다. "
"일부는``view.widgets`` 필드를 직접 처리하는 오작동하는 발표자의 관행에서 배우지 마십시오. 그렇게함으로써 이러한 발표자는 "
"우리가 단위 테스트를 작성하지 못하게합니다."

#: ../../building.rst:596
msgid ""
"The base class for the presenter, ``GenericEditorPresenter`` defined in "
"``bauble.editor``, implements many useful generic callbacks.  There is a "
"``MockView`` class, that you can use when writing tests for your "
"presenters."
msgstr ""
"발표자의 기본 클래스 인``bauble.editor``에 정의 된``Generic Editor Presenter``는 많은 유용한 일반 "
"콜백을 구현합니다. 발표자를위한 테스트를 작성할 때 사용할 수 있는``MockView ''클래스가 있습니다."

#: ../../building.rst:601
msgid "Examples"
msgstr "예"

#: ../../building.rst:603
msgid ""
"``Contact`` and ``ContactPresenter`` are implemented following the above "
"lines.  The view is defined in the ``contact.glade`` file."
msgstr ""
"``Contact ''및``ContactPresenter``는 위의 줄에 따라 구현됩니다. 보기는``contact.glade`` 파일에 "
"정의되어 있습니다."

#: ../../building.rst:606
msgid ""
"A good example of Presenter/View pattern (no model) is given by the "
"connection manager."
msgstr "발표자 /보기 패턴 (모델 없음)의 좋은 예는 연결 관리자에 의해 제공됩니다."

#: ../../building.rst:609
msgid ""
"We use the same architectural pattern for non-database interaction, by "
"setting the presenter also as model. We do this, for example, for the "
"JSON export dialog box. The following command will give you a list of "
"``GenericEditorView`` instantiations::"
msgstr ""
"발표자를 모델로 설정하여 데이터베이스가 아닌 상호 작용에 동일한 아키텍처 패턴을 사용합니다. 예를 들어 JSON 내보내기 대화 상자에 "
"대해이 작업을 수행합니다. 다음 명령은``GenericEditorView ''인스턴스화 목록을 제공합니다."

#: ../../building.rst:617
msgid "Extending Ghini with Plugins"
msgstr "플러그인으로 Ghini 확장"

#: ../../building.rst:619
msgid ""
"Nearly everything about Ghini is extensible through plugins. Plugins can "
"create tables, define custom searchs, add menu items, create custom "
"commands and more."
msgstr ""
"Ghini에 관한 거의 모든 것은 플러그인을 통해 확장 할 수 있습니다. 플러그인은 테이블 생성, 사용자 지정 검색 정의, 메뉴 항목 "
"추가, 사용자 지정 명령 생성 등을 수행 할 수 있습니다."

#: ../../building.rst:623
msgid ""
"To create a new plugin you must extend the ``bauble.pluginmgr.Plugin`` "
"class."
msgstr "새 플러그인을 생성하려면``bauble.pluginmgr.Plugin ''클래스를 확장해야합니다."

#: ../../building.rst:626
msgid ""
"The ``Tag`` plugin is a good minimal example, even if the ``TagItemGUI`` "
"falls outside the Model-View-Presenter architectural pattern."
msgstr ""
"``Tag ''플러그인은``TagItemGUI``가 Model-View-Presenter 아키텍처 패턴을 벗어나더라도 좋은 최소한의 "
"예입니다."

#: ../../building.rst:630
msgid "Plugins structure"
msgstr "플러그인 구조"

#: ../../building.rst:632
msgid ""
"Ghini is a framework for handling collections, and is distributed along "
"with a set of plugins making Ghini a botanical collection manager. But "
"Ghini stays a framework and you could in theory remove all plugins we "
"distribute and write your own, or write your own plugins that extend or "
"complete the current Ghini behaviour."
msgstr ""
"Ghini는 컬렉션을 처리하기위한 프레임 워크이며 Ghini를 식물 컬렉션 관리자로 만드는 플러그인 세트와 함께 배포됩니다. 그러나 "
"Ghini는 프레임 워크로 남아 있으며 이론적으로 우리가 배포하는 모든 플러그인을 제거하고 직접 작성하거나 현재 Ghini 동작을 "
"확장하거나 완료하는 자체 플러그인을 작성할 수 있습니다."

#: ../../building.rst:638
msgid ""
"Once you have selected and opened a database connection, you land in the "
"Search window. The Search window is an interaction between two objects: "
"SearchPresenter (SP) and SearchView (SV)."
msgstr ""
"데이터베이스 연결을 선택하고 열면 검색 창으로 이동합니다. 검색 창은 SearchPresenter (SP)와 SearchView (SV)"
"라는 두 개체 간의 상호 작용입니다."

#: ../../building.rst:642
msgid ""
"SV is what you see, SP holds the program status and handles the requests "
"you express through SV. Handling these requests affect the content of SV "
"and the program status in SP."
msgstr ""
"SV는 당신이 보는 것, SP는 프로그램 상태를 보유하고 SV를 통해 표현한 요청을 처리합니다. 이러한 요청을 처리하면 SV의 내용과 "
"SP의 프로그램 상태에 영향을줍니다."

#: ../../building.rst:646
msgid ""
"The search results shown in the largest part of SV are rows, objects that"
" are instances of classes registered in a plugin."
msgstr "SV의 가장 큰 부분에 표시되는 검색 결과는 플러그인에 등록 된 클래스의 인스턴스 인 행, 객체입니다."

#: ../../building.rst:649
msgid ""
"Each of these classes must implement an amount of functions in order to "
"properly behave within the Ghini framework. The Ghini framework reserves "
"space to pluggable classes."
msgstr ""
"이러한 각 클래스는 Ghini 프레임 워크 내에서 제대로 작동하기 위해 많은 기능을 구현해야합니다. Ghini 프레임 워크는 플러그 "
"가능한 클래스를위한 공간을 예약합니다."

#: ../../building.rst:653
msgid ""
"SP knows of all registered (plugged in) classes, they are stored in a "
"dictionary, associating a class to its plugin implementation.  SV has a "
"slot (a gtk.Box) where you can add elements. At any time, at most only "
"one element in the slot is visible."
msgstr ""
"SP는 등록 된 (플러그인 된) 모든 클래스를 알고 있으며 사전에 저장되어 클래스를 플러그인 구현에 연결합니다. SV에는 요소를 추가 할 "
"수있는 슬롯 (gtk.Box)이 있습니다. 언제든지 슬롯에서 최대 하나의 요소 만 표시됩니다."

#: ../../building.rst:658
msgid ""
"A plugin defines one or more plugin classes. A plugin class plays the "
"role of a partial presenter (pP - plugin presenter) as it implement the "
"callbacks needed by the associated partial view fitting in the slot (pV -"
" plugin view), and the MVP pattern is completed by the parent presenter "
"(SP), again acting as model. To summarize and complete:"
msgstr ""
"플러그인은 하나 이상의 플러그인 클래스를 정의합니다. 플러그인 클래스는 슬롯 (pV-플러그인보기)에 맞는 관련 부분보기에 필요한 콜백을 "
"구현하므로 부분 발표자 (pP-플러그인 발표자)의 역할을하며 MVP 패턴은 상위 발표자 (SP ), 다시 모델 역할을합니다. 요약하고 "
"완료하려면 :"

#: ../../building.rst:664
msgid "SP acts as model,"
msgstr "SP는 모델 역할을하며"

#: ../../building.rst:665
msgid "the pV partial view is defined in a glade file."
msgstr "pV 부분보기는 glade 파일에 정의되어 있습니다."

#: ../../building.rst:666
msgid "the callbacks implemented by pP are referenced by the glade file."
msgstr "pP에 의해 구현 된 콜백은 glade 파일에 의해 참조됩니다."

#: ../../building.rst:667
msgid "a context menu for the SP row,"
msgstr "SP 행에 대한 컨텍스트 메뉴"

#: ../../building.rst:668
msgid "a children property."
msgstr "어린이 재산."

#: ../../building.rst:670
msgid "when you register a plugin class, the SP:"
msgstr "플러그인 클래스를 등록하면 SP :"

#: ../../building.rst:672
msgid "adds the pV in the slot and makes it non-visible."
msgstr "슬롯에 pV를 추가하고 보이지 않게 만듭니다."

#: ../../building.rst:673
msgid "adds an instance of pP in the registered plugin classes."
msgstr "등록 된 플러그인 클래스에 pP 인스턴스를 추가합니다."

#: ../../building.rst:674
msgid "tells the pP that the SP is the model."
msgstr "SP가 모델임을 pP에 알립니다."

#: ../../building.rst:675
msgid "connects all callbacks from pV to pP."
msgstr "pV에서 pP로 모든 콜백을 연결합니다."

#: ../../building.rst:677
msgid ""
"when an element in pV triggers an action in pP, the pP can forward the "
"action to SP and can request SP that it updates the model and refreshes "
"the view."
msgstr ""
"pV의 요소가 pP에서 작업을 트리거하면 pP는 작업을 SP로 전달할 수 있으며 SP에 모델을 업데이트하고보기를 새로 고치도록 요청할 수 "
"있습니다."

#: ../../building.rst:681
msgid ""
"When the user selects a row in SP, SP hides everything in the pluggable "
"slot and shows only the single pV relative to the type of the selected "
"row, and asks the pP to refresh the pV with whatever is relative to the "
"selected row."
msgstr ""
"사용자가 SP에서 행을 선택하면 SP는 플러그 형 슬롯의 모든 항목을 숨기고 선택한 행의 유형과 관련된 단일 pV 만 표시하고 선택한 "
"행과 관련된 항목으로 pV를 새로 고치도록 pP에 요청합니다."

#: ../../building.rst:685
msgid ""
"Apart from setting the visibility of the various pV, nothing needs be "
"disabled nor removed: an invisible pV cannot trigger events!"
msgstr ""
"다양한 pV의 가시성을 설정하는 것 외에는 비활성화하거나 제거 할 필요가 없습니다. 보이지 않는 pV는 이벤트를 트리거 할 수 없습니다!"

#: ../../building.rst:689
msgid "bug solving workflow"
msgstr "버그 해결 워크 플로우"

#: ../../building.rst:692
msgid "normal development workflow"
msgstr "정상적인 개발 워크 플로우"

#: ../../building.rst:694
msgid ""
"while using the software, you notice a problem, or you get an idea of "
"something that could be better, you think about it good enough in order "
"to have a very clear idea of what it really is, that you noticed. you "
"open an issue and describe the problem. someone might react with hints."
msgstr ""
"소프트웨어를 사용하는 동안 문제를 발견하거나 더 나을 수있는 것에 대한 아이디어를 얻었을 때, 당신이 발견 한 것이 실제로 무엇인지에 "
"대한 매우 명확한 아이디어를 얻기 위해 충분히 좋은 생각을합니다. 문제를 열고 문제를 설명합니다. 누군가 힌트로 반응 할 수 있습니다."

#: ../../building.rst:698
msgid "you open the issues site and choose one you want to tackle."
msgstr "문제 사이트를 열고 해결하려는 사이트를 선택합니다."

#: ../../building.rst:699
msgid ""
"assign the issue to yourself, this way you are informing the world that "
"you have the intention to work at it. someone might react with hints."
msgstr "문제를 자신에게 할당하면 문제를 해결할 의사가 있음을 세상에 알릴 수 있습니다. 누군가 힌트로 반응 할 수 있습니다."

#: ../../building.rst:701
msgid ""
"optionally fork the repository in your account and preferably create a "
"branch, clearly associated to the issue."
msgstr "선택적으로 계정에서 저장소를 포크하고 문제와 명확하게 관련된 브랜치를 만드는 것이 좋습니다."

#: ../../building.rst:703
msgid ""
"write unit tests and commit them to your branch (please do not push "
"failing unit tests to github, run ``nosetests`` locally first)."
msgstr ""
"단위 테스트를 작성하고 브랜치에 커밋하십시오 (실패한 단위 테스트를 github에 푸시하지 말고 로컬에서 먼저``nosetests``를 "
"실행하십시오)."

#: ../../building.rst:705
msgid ""
"write more unit tests (ideally, the tests form the complete description "
"of the feature you are adding or correcting)."
msgstr "더 많은 단위 테스트를 작성합니다 (이상적으로는 테스트가 추가하거나 수정하는 기능에 대한 완전한 설명을 형성합니다)."

#: ../../building.rst:707
msgid ""
"make sure the feature you are adding or correcting is really completely "
"described by the unit tests you wrote."
msgstr "추가하거나 수정하는 기능이 작성한 단위 테스트에서 완전히 설명되었는지 확인하십시오."

#: ../../building.rst:709
msgid ""
"make sure your unit tests are atomic, that is, that you test variations "
"on changes along one single variable. do not give complex input to unit "
"tests or tests that do not fit on one screen (25 lines of code)."
msgstr ""
"단위 테스트가 원자 적이어야합니다. 즉, 하나의 단일 변수를 따라 변경 사항에 대한 변형을 테스트해야합니다. 한 화면 (코드 25 줄)에 "
"맞지 않는 단위 테스트 또는 테스트에 복잡한 입력을 제공하지 마십시오."

#: ../../building.rst:712
msgid "write the code that makes your tests succeed."
msgstr "테스트를 성공시키는 코드를 작성하십시오."

#: ../../building.rst:713
msgid "update the i18n files (run ``./scripts/i18n.sh``)."
msgstr "i18n 파일을 업데이트합니다 (``. / scripts / i18n.sh`` 실행)."

#: ../../building.rst:714
msgid ""
"whenever possible, translate the new strings you put in code or glade "
"files."
msgstr "가능하면 코드 또는 glade 파일에 넣은 새 문자열을 번역하십시오."

#: ../../building.rst:716
msgid ""
"when you change strings, please make sure that old translations get re-"
"used."
msgstr "문자열을 변경할 때 이전 번역이 다시 사용되는지 확인하십시오."

#: ../../building.rst:717
msgid "commit your changes."
msgstr "변경 사항을 커밋하십시오."

#: ../../building.rst:718
msgid "push to github."
msgstr "github로 푸시하십시오."

#: ../../building.rst:719
msgid "open a pull request."
msgstr "풀 리퀘스트를 엽니다."

#: ../../building.rst:722
msgid "publishing to production"
msgstr "프로덕션에 게시"

#: ../../building.rst:724
msgid ""
"please use the ``publish.sh`` script, in the ``scritps`` directory.  This"
" one takes care of every single step, and produces recognizable commit "
"comments, it publishes the release on pypi, and in perspective it will "
"contain all steps for producing a ``deb`` file, and a windows executable."
msgstr ""
"``scritps ''디렉토리에있는``publish.sh ''스크립트를 사용하십시오. 이것은 모든 단일 단계를 처리하고 인식 가능한 커밋 "
"주석을 생성하고 pypi에 릴리스를 게시하며 관점에서``deb ''파일 및 Windows 실행 파일을 생성하는 모든 단계를 포함합니다."

#: ../../building.rst:729
msgid "you can also do this by hand:"
msgstr "이 작업을 직접 수행 할 수도 있습니다.:"

#: ../../building.rst:731
msgid ""
"open the pull request page using as base a production line ``ghini-x.y``,"
" compared to ``ghini-x.y-dev``."
msgstr "``ghini-x.y-dev ''와 비교하여``ghini-x.y ''생산 라인을 기본으로 사용하여 풀 요청 페이지를 엽니 다."

#: ../../building.rst:733
msgid "make sure a ``bump`` commit is included in the differences."
msgstr "차이점에``범프 ''커밋이 포함되어 있는지 확인하십시오."

#: ../../building.rst:734
msgid "it should be possible to automatically merge the branches."
msgstr "분기를 자동으로 병합 할 수 있어야합니다."

#: ../../building.rst:735
msgid "create the new pull request, call it as “publish to the production line”."
msgstr "새로운 풀 리퀘스트를 생성하고이를 \"생산 라인에 게시\"라고합니다."

#: ../../building.rst:736
msgid "you possibly need wait for travis-ci to perform the checks."
msgstr "travis-ci가 검사를 수행 할 때까지 기다려야 할 수도 있습니다."

#: ../../building.rst:737
msgid "merge the changes."
msgstr "변경 사항을 병합하십시오."

#: ../../building.rst:739
msgid ""
"don't forget to tell the world about the new release: on `facebook "
"<https://www.facebook.com/bauble.thesoftware/>`_, the `google group "
"<https://groups.google.com/forum/#!forum/bauble>`_, in any relevant "
"linkedin group, and on `our web page <http://ghini.github.io/>`_."
msgstr ""
"새로운 릴리스에 대해 전 세계에 알리는 것을 잊지 마십시오.`facebook <https://www.facebook.com/bauble."
"thesoftware/>`_,`google 그룹 <https://groups.google.com/ forum / #! forum / "
"bauble>`_, 관련 링크드 인 그룹 및`우리 웹 페이지 <http://ghini.github.io/>`_."

#: ../../building.rst:745
msgid "your own fork"
msgstr "자신의 포크"

#: ../../building.rst:747
msgid ""
"If you want to keep your own fork of the project, keep in mind this is "
"full force work in progress, so staying up to date will require some "
"effort from your side."
msgstr "자신의 프로젝트 포크를 유지하고 싶다면 이것이 진행중인 작업이므로 최신 정보를 유지하려면 약간의 노력이 필요합니다."

#: ../../building.rst:751
msgid ""
"The best way to keep your own fork is to focus on some specific issue, "
"work relatively quickly, often open pull requests for your work, make "
"sure that you get it accepted.  Just follow Ghini's coding style, write "
"unit tests, concise and abundant, and there should be no problem in "
"having your work included in Ghini's upstream."
msgstr ""
"자신의 포크를 유지하는 가장 좋은 방법은 특정 문제에 집중하고, 비교적 빠르게 작업하고, 종종 작업에 대한 풀 요청을 열고, 수락했는지 "
"확인하는 것입니다. Ghini의 코딩 스타일을 따르고 단위 테스트를 작성하고 간결하고 풍부하며 Ghini의 업스트림에 작업을 포함시키는 "
"데 문제가 없을 것입니다."

#: ../../building.rst:757
msgid ""
"If your fork got out of sync with Ghini's upstream: read, understand, "
"follow the github guides `configuring a remote for a fork "
"<https://help.github.com/articles/configuring-a-remote-for-a-fork/>`_ and"
" `syncing a fork <https://help.github.com/articles/syncing-a-fork/>`_."
msgstr ""
"포크가 Ghini의 업스트림과 동기화되지 않은 경우 : 읽고 이해하고 github 가이드`포크 용 원격 구성 <https://help."
"github.com/articles/configuring-a-remote-for-a-fork />`_ 및`포크 동기화 "
"<https://help.github.com/articles/syncing-a-fork/>`_."

#: ../../building.rst:763
msgid "closing step"
msgstr "마감 단계"

#: ../../building.rst:765
msgid ""
"review this workflow. consider this as a guideline, to yourself and to "
"your colleagues. please help make it better and matching the practice."
msgstr "이 워크 플로우를 검토하십시오. 이것을 자신과 동료에게 지침으로 고려하십시오. 더 좋게 만들고 연습과 일치하도록 도와주세요."

#: ../../building.rst:770
msgid "Distributing ghini.desktop"
msgstr "ghini.desktop 배포"

#: ../../building.rst:773
msgid "Python Package Index - PyPI"
msgstr "Python 패키지 색인-PyPI"

#: ../../building.rst:775
msgid ""
"This is not much mentioned, but we keep ghini.desktop on the Python "
"Package Index, so you could install it by no more than::"
msgstr ""
"별로 언급되지는 않았지만 Python 패키지 색인에 ghini.desktop을 보관하므로 다음과 같은 방법으로 설치할 수 있습니다::"

#: ../../building.rst:780
msgid ""
"There are a couple packages that can't be installed with ``pip``, but "
"otherwise that's really all you need to type, and it's platform "
"independent."
msgstr "``pip ''로 설치할 수없는 몇 가지 패키지가 있지만 그렇지 않으면 입력해야 할 모든 것이 있으며 플랫폼에 독립적입니다."

#: ../../building.rst:783
msgid "Publishing on PyPI is a standard ``setup`` command::"
msgstr "PyPI에 게시하는 것은 표준``setup ''명령입니다:"

#: ../../building.rst:789
msgid "Windows"
msgstr "윈도우"

#: ../../building.rst:791
msgid ""
"For building a Windows installer or executable you need a running Windows"
" system.  The methods described here has been used successfully on "
"Windows 7, 8 and 10.  Windows Vista should also work but has not been "
"tested."
msgstr ""
"Windows 설치 프로그램 또는 실행 파일을 빌드하려면 실행중인 Windows 시스템이 필요합니다. 여기에 설명 된 방법은 "
"Windows 7, 8 및 10에서 성공적으로 사용되었습니다. Windows Vista도 작동해야하지만 테스트를 거치지는 않았습니다."

#: ../../building.rst:795
msgid ""
"If you are on GNU/Linux, or on OSX, you are not interested in the "
"remainder of this section.  None of Ghini's contributors knows how to "
"produce a Windows installer without having a Windows system."
msgstr ""
"GNU / Linux 또는 OSX를 사용하는 경우이 섹션의 나머지 부분에 관심이 없습니다. Ghini의 기여자 중 누구도 Windows "
"시스템없이 Windows 설치 프로그램을 만드는 방법을 모릅니다."

#: ../../building.rst:799
msgid ""
"The goal of the present instructions is to help you produce a Windows "
"installer, that is a single executable that you can run on any Windows "
"workstation and that will install a specific version of ghini.desktop.  "
"This is achieved with the NSIS script-driven installer authoring tool."
msgstr ""
"현재 지침의 목표는 모든 Windows 워크 스테이션에서 실행할 수 있고 특정 버전의 ghini.desktop을 설치하는 단일 실행 파일 "
"인 Windows 설치 프로그램을 생성하는 데 도움을주는 것입니다. 이는 NSIS 스크립트 기반 설치 프로그램 저작 도구를 통해 "
"이루어집니다."

#: ../../building.rst:804
msgid ""
"As a side product of the installer production, you will have a massive "
"but relocatable directory, which you can copy to a USB drive and which "
"will let you use the software without needing an installation."
msgstr ""
"설치 프로그램 프로덕션의 부수적 인 제품으로, USB 드라이브에 복사 할 수 있고 설치할 필요없이 소프트웨어를 사용할 수있는 대규모이지만 "
"재배치 가능한 디렉토리가 있습니다."

#: ../../building.rst:808
msgid "The files and directories relevant to this section:"
msgstr "이 섹션과 관련된 파일 및 디렉토리 :"

#: ../../building.rst:810
msgid "``scripts/build-win.bat`` — the single batch script to run."
msgstr "``scripts / build-win.bat`` — 실행할 단일 배치 스크립트입니다."

#: ../../building.rst:811
msgid "``setup.py`` — implements the NSIS and py2exe commands."
msgstr "``setup.py ''— NSIS 및 py2exe 명령을 구현합니다."

#: ../../building.rst:812
msgid "``scripts/build-multiuser.nsi`` — the nsis script, used by the above."
msgstr "``scripts / build-multiuser.nsi ''— 위에서 사용 된 nsis 스크립트."

#: ../../building.rst:813
msgid "``nsis/`` — contains redistributable NSIS files, put here for conveniency."
msgstr "``nsis /``— 재배포 가능한 NSIS 파일을 포함하며 편의를 위해 여기에 넣습니다."

#: ../../building.rst:814
msgid "``ghini-runtime/`` — built by ``py2exe``, used by ``nsis``."
msgstr "``ghini-runtime /``—``py2exe``에 의해 빌드되고``nsis``에 사용됩니다."

#: ../../building.rst:815
msgid "``dist/`` — receives the executable installation file."
msgstr "``dist /``— 실행 가능한 설치 파일을받습니다."

#: ../../building.rst:817
msgid ""
"Most steps are automated in the ``build-win.bat`` script.  Installation "
"of a few tools needs to be done manually:"
msgstr "대부분의 단계는``build-win.bat`` 스크립트에서 자동화됩니다. 몇 가지 도구를 수동으로 설치해야합니다:"

#: ../../building.rst:820
msgid "Download and install Git, Python 2.7 and PyGTK."
msgstr "Git, Python 2.7 및 PyGTK를 다운로드하여 설치합니다."

#: ../../building.rst:822
msgid ""
"This is outlined in the ``devinstall``-based :ref:`installation` "
"instructions."
msgstr "이것은``devinstall ''기반 : ref :`installation` 지침에 설명되어 있습니다."

#: ../../building.rst:825
msgid "Download and install `NSIS v3 <http://nsis.sourceforge.net/Download>`_."
msgstr "`NSIS v3 <http://nsis.sourceforge.net/Download>`_를 다운로드하여 설치합니다."

#: ../../building.rst:827
msgid "A **reboot** is recommended."
msgstr "** 재부팅 **이 권장됩니다."

#: ../../building.rst:829
msgid "Clone the ghini.desktop repository."
msgstr "ghini.desktop 저장소를 복제합니다."

#: ../../building.rst:831
msgid ""
"Use your own fork if you plan contributing patches, or the organization's"
" repository ``https://github.com/Ghini/ghini.desktop.git`` if you only "
"wish to follow development."
msgstr ""
"패치를 제공 할 계획이라면 자체 포크를 사용하고 개발 만 따르고 싶다면 조직의 저장소``https : // github.com / "
"Ghini / ghini.desktop.git``을 사용하십시오."

#: ../../building.rst:835
msgid ""
"Clone the repository from GitHub to wherever you want to keep it, and "
"checkout a branch.  Replace ``<path-to-keep-ghini>`` with the path of "
"your choice, e.g. ``Local\\github\\Ghini\\``. Production branch "
"``ghini-1.0`` is recommended as used in the example."
msgstr ""
"GitHub에서 보관하려는 위치로 저장소를 복제하고 브랜치를 체크 아웃합니다. ``<path-to-keep-ghini>``를 선택한 "
"경로로 바꾸십시오. ``로컬 \\ github \\ Ghini \\``. 예제에 사용 된대로 프로덕션 브랜치``ghini-1.0 ''을 "
"권장합니다."

#: ../../building.rst:840
msgid "To do this, open a command prompt and type these commands::"
msgstr "이렇게하려면 명령 프롬프트를 열고 다음 명령을 입력하십시오:"

#: ../../building.rst:847
msgid ""
"The result of the above is a complete development environment, on "
"Windows, with NSIS.  Use it to follow development, or to propose your "
"pull requests, and to build Windows installers."
msgstr ""
"위의 결과는 Windows에서 NSIS를 사용하는 완전한 개발 환경입니다. 이를 사용하여 개발을 따르거나 풀 요청을 제안하고 "
"Windows 설치 프로그램을 빌드하십시오."

#: ../../building.rst:851
msgid ""
"All subsequent steps are automated in the ``scripts\\build_win.bat`` "
"script.  Run it, and after a couple of minutes you should have a new "
"``dist\\ghini.desktop-<version>-setup.exe`` file, and a working, complete"
" relocatable directory named ``ghini-runtime``."
msgstr ""
"모든 후속 단계는``scripts \\ build_win.bat`` 스크립트에서 자동화됩니다. 그것을 실행하고 몇 분 후에 새로운``"
"dist \\ ghini.desktop- <version> -setup.exe`` 파일과``ghini-runtime``이라는 이름의 "
"작동하고 완전한 재배치 가능한 디렉토리가 있어야합니다."

#: ../../building.rst:856
msgid "Read the rest if you need details about the way the script works."
msgstr "스크립트 작동 방식에 대한 세부 정보가 필요하면 나머지를 읽으십시오."

#: ../../building.rst:858
msgid "The ``build_win.bat`` script"
msgstr "``build_win.bat`` 스크립트"

#: ../../building.rst:861
msgid ""
"A batch file is available that can complete the last few steps.  To use "
"it use this command::"
msgstr "마지막 몇 단계를 완료 할 수있는 배치 파일을 사용할 수 있습니다. 이를 사용하려면 다음 명령을 사용하십시오::"

#: ../../building.rst:866
msgid "``build_win.bat`` accepts 2 arguments:"
msgstr "``build_win.bat``는 2 개의 인수를받습니다:"

#: ../../building.rst:868
msgid "``/e`` — executable only."
msgstr "``/ e ''— 실행 만 가능합니다."

#: ../../building.rst:870
msgid ""
"Produce an executable only, skipping the extra step of building an "
"installer, and will copy ``win_gtk.bat`` into place."
msgstr "설치 프로그램 빌드의 추가 단계를 건너 뛰고 실행 파일 만 생성하고``win_gtk.bat``를 제자리에 복사합니다."

#: ../../building.rst:873
msgid "``venv_path`` — A path to the location for the virtual environment to use."
msgstr ""
"``venv_path`` — A path to the location for the virtual environment to use."

#: ../../building.rst:875
#, python-format
msgid ""
"Defaults to ``\"%HOMEDRIVE%%HOMEPATH%\"\\.virtualenvs\\%CHECKOUT%-exe``, "
"where ``CHECKOUT`` corresponds to the name of the branch you checked out."
msgstr ""
"기본값은`` \"% HOMEDRIVE %% HOMEPATH %\"\\. virtualenvs \\ % CHECKOUT % -exe``"
"이며, 여기서``CHECKOUT``은 체크 아웃 한 브랜치의 이름에 해당합니다."

#: ../../building.rst:879
msgid ""
"If you want to produce an executable only and use a virtual environment "
"in a folder beside where you have ghini.desktop, you could execute "
"``scripts\\build_win.bat /e ..\\ghi2exe``"
msgstr ""
"실행 파일 만 생성하고 ghini.desktop이있는 폴더 옆에있는 가상 환경을 사용하려면``scripts \\ build_win.bat "
"/ e .. \\ ghi2exe``를 실행할 수 있습니다"

#: ../../building.rst:884
msgid "py2exe will not work with eggs"
msgstr "py2exe는 계란과 함께 작동하지 않습니다"

#: ../../building.rst:887
msgid ""
"Building a Windows executable with py2exe requires packages **not** be "
"installed as eggs.  There are several methods to accomplish this, "
"including:"
msgstr ""
"py2exe로 Windows 실행 파일을 빌드하려면 달걀로 설치되지 ** 않는 ** 패키지가 필요합니다. 이를 수행하는 방법은 다음과 "
"같습니다:"

#: ../../building.rst:890
msgid ""
"Install using ``pip``.  The easiest method is to install into a virtual "
"environment that doesn't currently have any modules installed as eggs "
"using ``pip install .`` as described below.  If you do wish to install "
"over the top of an install with eggs (e.g. the environment created by "
"``devinstall.bat``) you can try ``pip install -I .`` but your mileage may"
" vary."
msgstr ""
"``pip ''를 사용하여 설치합니다. 가장 쉬운 방법은 아래에 설명 된대로``pip install .``을 사용하여 현재 계란으로 "
"설치된 모듈이없는 가상 환경에 설치하는 것입니다. 달걀을 사용하여 설치 위에 설치하려면 (예 :``devinstall.bat ''로 만든 "
"환경)``pip install -I .``를 시도 할 수 있지만 마일리지는 다를 수 있습니다."

#: ../../building.rst:897
msgid "By adding::"
msgstr "추가하여::"

#: ../../building.rst:902
msgid ""
"to setup.cfg (or similarly ``zip_safe = False`` to ``setuptools.setup()``"
" in ``setup.py``) you can use ``python setup.py install`` but you will "
"need to download and install `Microsoft Visual C++ Compiler for Python "
"2.7 <http://aka.ms/vcpython27>`_ to get any of the C extensions and will "
"need a fresh virtual environment with no dependent packages installed as "
"eggs."
msgstr ""
"setup.cfg (또는 유사하게``zip_safe = False``에서``setup.py ''의``setuptools.setup "
"()``으로)``python setup.py install``을 사용할 수 있지만 다음이 필요합니다. C 확장을 얻으려면`"
"Microsoft Visual C ++ Compiler for Python 2.7 <http://aka.ms/vcpython27>`_을 "
"다운로드하여 설치하고, 종속 패키지가 달걀로 설치되지 않은 새로운 가상 환경이 필요합니다."

#: ../../building.rst:908
msgid "The included ``build-win`` script uses the ``pip`` method."
msgstr "포함 된``build-win ''스크립트는``pip ''메소드를 사용합니다."

#: ../../building.rst:910
msgid "installing virtualenv and working with environments"
msgstr "virtualenv 설치 및 환경 작업"

#: ../../building.rst:913
msgid "Install virtualenv, create a virtual environment and activate it."
msgstr "virtualenv를 설치하고 가상 환경을 만들고 활성화합니다."

#: ../../building.rst:915
msgid ""
"With only Python 2.7 on your system (where ``<path-to-venv>`` is the path"
" to where you wish to keep the virtual environment) use::"
msgstr ""
"시스템에 Python 2.7 만있는 경우 (여기서``<path-to-venv>``는 가상 환경을 유지하려는 경로입니다) 다음을 "
"사용하십시오::"

#: ../../building.rst:922
msgid ""
"On systems where Python 3 is also installed you may need to either call "
"pip and virtualenv with absolute paths, e.g. "
"``C:\\Python27\\Scripts\\pip`` or use the Python launcher e.g. ``py -2.7 "
"-m pip`` (run ``python --version`` first to check.  If you get anything "
"other than version 2.7 you'll need to use one of these methods.)"
msgstr ""
"Python 3도 설치된 시스템에서는 절대 경로로 pip 및 virtualenv를 호출해야 할 수 있습니다. ``C : \\ "
"Python27 \\ Scripts \\ pip ''또는 Python 런처 (예 : ``py -2.7 -m pip ''(먼저``"
"python --version``을 실행하여 확인하십시오. 버전 2.7이 아닌 다른 것이 있으면이 방법 중 하나를 사용해야합니다.)"

#: ../../building.rst:928
msgid "Populate the virtual environment"
msgstr "가상 환경 채우기"

#: ../../building.rst:931
msgid "Install dependencies and ghini.desktop into the virtual environment::"
msgstr "가상 환경에 종속성 및 ghini.desktop을 설치합니다::"

#: ../../building.rst:936
msgid "Compile for Windows"
msgstr "Windows 용 컴파일"

#: ../../building.rst:939
msgid "Build the executable::"
msgstr "실행 파일 빌드 ::"

#: ../../building.rst:943
msgid ""
"The ``ghini-runtime`` folder will now contain a full working copy of the "
"software in a frozen, self contained state."
msgstr "이제``ghini-runtime ''폴더에는 고정 된 자체 포함 상태의 소프트웨어의 전체 작업 복사본이 포함됩니다."

#: ../../building.rst:946
msgid "This folder is what is packaged by NSIS."
msgstr "이 폴더는 NSIS에서 패키징 한 것입니다."

#: ../../building.rst:948
msgid ""
"This same folder can also be transferred however you like and will work "
"in place.  (e.g. placed on a USB flash drive for demonstration purposes "
"or copied manually to ``C:\\Program Files`` with a shortcut created on "
"the desktop).  To start ghini.desktop double click ``ghini.exe`` in "
"explorer (or create a shortcut to it)."
msgstr ""
"이 동일한 폴더도 원하는대로 전송할 수 있으며 제자리에서 작동합니다. (예 : 데모 목적으로 USB 플래시 드라이브에 배치하거나 바탕 "
"화면에 생성 된 바로 가기를 사용하여``C : \\ Program Files``에 수동으로 복사). ghini.desktop을 시작하려면 "
"탐색기에서``ghini.exe``를 두 번 클릭하거나 바로 가기를 만듭니다."

#: ../../building.rst:955
msgid "Fixing paths to GTK components."
msgstr "GTK 구성 요소에 대한 경로 수정."

#: ../../building.rst:958
msgid ""
"If you run the relocatable compiled program, unpackaged, you might "
"occasionally have trouble with the GUI not displaying correctly."
msgstr "재배치 가능한 컴파일 된 프로그램 (패키지 해제)을 실행하면 GUI가 올바르게 표시되지 않는 문제가 발생할 수 있습니다."

#: ../../building.rst:961
msgid ""
"Should this happen, you need to set up paths to the GTK components "
"correctly.  You can do this by running the ``win_gtk.bat``, from the "
"``ghini-runtime`` folder."
msgstr ""
"이 경우 GTK 구성 요소에 대한 경로를 올바르게 설정해야합니다. ``ghini-runtime ''폴더에서``win_gtk.bat``를 "
"실행하면됩니다."

#: ../../building.rst:965
msgid ""
"You will only need to run this once each time the location of the folder "
"changes.  Thereafter ``ghini.exe`` will run as expected."
msgstr "폴더 위치가 변경 될 때마다 한 번만 실행하면됩니다. 그 후``ghini.exe``가 예상대로 실행됩니다."

#: ../../building.rst:969
msgid "Finally, invoke NSIS"
msgstr "마지막으로 NSIS를 호출합니다"

#: ../../building.rst:972
msgid "Build the installer::"
msgstr "설치 프로그램 빌드 ::"

#: ../../building.rst:976
msgid ""
"This should leave a file named ``ghini.desktop-<version>-setup.exe`` in "
"the ``dist`` folder.  This is your Windows installer."
msgstr ""
"그러면``dist ''폴더에``ghini.desktop- <version> -setup.exe``라는 파일이 남습니다. 이것은 "
"Windows 설치 프로그램입니다."

#: ../../building.rst:979
msgid "about the installer"
msgstr "설치 프로그램에 대해"

#: ../../building.rst:982
msgid "Capable of single user or global installs."
msgstr "단일 사용자 또는 글로벌 설치가 가능합니다."

#: ../../building.rst:984
msgid ""
"At this point in time ghini.desktop installed this way will not check or "
"or notify you of any updated version.  You will need to check yourself."
msgstr "이 시점에서 이렇게 설치된 ghini.desktop은 업데이트 된 버전을 확인하거나 알리지 않습니다. 자신을 확인해야합니다."

#: ../../building.rst:988
msgid "Capable of downloading and installing optional extra components:"
msgstr "선택적 추가 구성 요소를 다운로드하고 설치할 수 있습니다:"

#: ../../building.rst:990
msgid ""
"Apache FOP - If you want to use xslt report templates install FOP. FOP "
"requires Java Runtime. If you do not currently have it installed the "
"installer will let you know and offer to open the Oracle web site for you"
" to download and install it from."
msgstr ""
"Apache FOP-xslt 보고서 템플릿을 사용하려면 FOP를 설치하십시오. FOP에는 Java 런타임이 필요합니다. 현재 설치되어 "
"있지 않은 경우 설치 프로그램이이를 알려주고 Oracle 웹 사이트를 열어 다운로드하여 설치할 수 있도록 제안합니다."

#: ../../building.rst:995
msgid ""
"MS Visual C runtime - You most likely don't need this but if you have any"
" trouble getting ghini.desktop to run try installing the MS Visual C "
"runtime (e.g. rerun the installer and select this component only)."
msgstr ""

#: ../../building.rst:1000
msgid ""
"Can be run silently from the commandline (e.g. for remote deployment) "
"with the following arguments:"
msgstr ""

#: ../../building.rst:1003
msgid "``/S`` for silent;"
msgstr ""

#: ../../building.rst:1005
msgid "``/AllUser`` (when run as administrator) or ``/CurrentUser``"
msgstr ""

#: ../../building.rst:1007
msgid "``/C=[gFC]`` to specify components where:"
msgstr ""

#: ../../building.rst:1009
msgid ""
"``g`` = Deselect the main ghini.desktop component (useful for adding "
"optional component after an initial install)"
msgstr ""

#: ../../building.rst:1012
msgid "``F`` = select Apache FOP"
msgstr ""

#: ../../building.rst:1014
msgid "``C`` = select MS Visual C runtime"
msgstr ""

#: ../../building.rst:1017
msgid "Debian"
msgstr ""

#: ../../building.rst:1019
msgid ""
"Between 2009 and 2010 someone packaged the then already obsolete Bauble "
"0.9.7 for Debian, and the package was included in Ubuntu.  That version "
"is `still being distributed "
"<https://packages.ubuntu.com/xenial/bauble>`_, regardless being it "
"impossible to install."
msgstr ""

#: ../../building.rst:1025
msgid ""
"Only recently has Mario Frasca produced a new bauble debian package, for "
"the latest bauble.classic version 1.0.56, and proposed for inclusion in "
"Debian. View it on `mentors "
"<https://mentors.debian.net/package/bauble>`_.  This version depends on "
"``fibra``, a package that was never added to Debian and which Mario also "
"has packaged and `proposed for inclusion in Debian "
"<https://mentors.debian.net/package/fibra>`_.  Mario has been trying to "
"activate some Debian Developer, to take action.  There's not much more we"
" can do, other than wait for a sponsor, and hoping the package will "
"eventually get all the way to Ubuntu."
msgstr ""

#: ../../building.rst:1035
msgid ""
"Once we get in contact with a `Debian Sponsor "
"<https://mentors.debian.net/sponsors>`_ who will review what we publish "
"on `mentors <https://mentors.debian.net/intro-maintainers>`_, then we "
"will be definitely expected to keep updating the debian package for "
"``ghini.desktop`` and ``fibra``."
msgstr ""

#: ../../building.rst:1040
msgid ""
"I am not going to explain in a few words the content of several books on "
"Debian packaging.  Please choose your sources.  For a very compact idea "
"of what you're expected to do, have a look at ``scripts/pubish.sh``."
msgstr ""

#: ../../editing.rst:4
msgid "Editing and Inserting Data"
msgstr ""

#: ../../editing.rst:6
msgid ""
"The main way that we add or change information in Ghini is by using the "
"editors.  Each basic type of data has its own editor.  For example there "
"is a Family editor, a Genus editor, an Accession editor, etc."
msgstr ""

#: ../../editing.rst:10
msgid ""
"To create a new record click on the :menuselection:`Insert` menu on the "
"menubar and then select the type of record your would like to create.  "
"This opens a new blank editor for the type."
msgstr ""

#: ../../editing.rst:14
msgid ""
"To edit an existing record in the database right click on an item in the "
"search results and select :menuselection:`Edit` from the popup menu.  "
"This opens an editor that allows you to change the values on the record "
"that you selected."
msgstr ""

#: ../../editing.rst:19
msgid ""
"Most types also have children which you can add by right clicking on the "
"parent and selecting \"Add ???...\" on the context menu.  For example, a "
"Family has Genus children: you can add a Genus to a Family by right "
"clicking on a Family and selecting \"Add genus\"."
msgstr ""

#: ../../editing.rst:26
msgid "Notes"
msgstr "주기"

#: ../../editing.rst:27
msgid ""
"Almost all of the editors in Ghini have a *Notes* tab which should work "
"the same regardless of which editor you are using."
msgstr ""

#: ../../editing.rst:30
msgid ""
"If you enter a web address in a note then the link shows up in the Links "
"box when the item your are editing is selected in the search results."
msgstr ""

#: ../../editing.rst:33
msgid ""
"You can browse the notes for an item in the database using the Notes box "
"at the bottom of the screen.  The Notes box is desensitized if the "
"selected item does not have any notes."
msgstr ""

#: ../../editing.rst:39
msgid "Family"
msgstr "과명"

#: ../../editing.rst:40
msgid "The Family editor allows you to add or change a botanical family."
msgstr ""

#: ../../editing.rst:42
msgid ""
"The *Family* field on the editor lets you change the epithet of the "
"family. The Family field is required."
msgstr ""

#: ../../editing.rst:45
msgid ""
"The *Qualifier* field lets you change the family qualifier.  The value "
"can either be *sensu lato*, *sensu stricto*, or nothing."
msgstr ""

#: ../../editing.rst:48
msgid ""
"*Synonyms* allow you to add other families that are synonyms with the "
"family you are currently editing.  To add a new synonyms type in a family"
" name in the entry.  You must select a family name from the list of "
"completions. Once you have selected a family name that you want to add as"
" a synonym click on the Add button next to the synonym list and the "
"software adds the selected synonym to the list.  To remove a synonym, "
"select the synonym from the list and click on the Remove button."
msgstr ""

#: ../../editing.rst:56 ../../editing.rst:91 ../../editing.rst:115
msgid "To cancel your changes without saving then click on the *Cancel* button."
msgstr ""

#: ../../editing.rst:58
msgid "To save the family you are working on then click *OK*."
msgstr ""

#: ../../editing.rst:60
msgid ""
"To save the family you are working on and add a genus to it then click on"
" the *Add Genera* button."
msgstr ""

#: ../../editing.rst:63
msgid ""
"To add another family when you are finished editing the current one click"
" on the *Next* button on the bottom.  This saves the current family and "
"opens a new blank family editor."
msgstr ""

#: ../../editing.rst:69
msgid "Genus"
msgstr "속명"

#: ../../editing.rst:71
msgid "The Genus editor allows you to add or change a botanical genus."
msgstr ""

#: ../../editing.rst:73
msgid ""
"The *Family* field on the genus editor allows you to choose the family "
"for the genus.  When you begin type a family name it will show a list of "
"families to choose from.  The family name must already exist in the "
"database before you can set it as the family for the genus."
msgstr ""

#: ../../editing.rst:78
msgid "The *Genus* field allows you to set the genus for this entry."
msgstr ""

#: ../../editing.rst:80
msgid ""
"The *Author* field allows you to set the name or abbreviation of the "
"author(s) for the genus."
msgstr ""

#: ../../editing.rst:83
msgid ""
"*Synonyms* allow you to add other genera that are synonyms with the genus"
" you are currently editing.  To add a new synonyms type in a genus name "
"in the entry.  You must select a genus name from the list of completions."
"  Once you have selected a genus name that you want to add as a synonym "
"click on the Add button next to the synonym list and it will add the "
"selected synonym to the list.  To remove a synonym select the synonym "
"from the list and click on the Remove button."
msgstr ""

#: ../../editing.rst:93
msgid "To save the genus you are working on then click *OK*."
msgstr ""

#: ../../editing.rst:95
msgid ""
"To save the genus you are working on and add a species to it then click "
"on the *Add Species* button."
msgstr ""

#: ../../editing.rst:98
msgid ""
"To add another genus when you are finished editing the current one click "
"on the *Next* button on the bottom.  This will save the current genus and"
" open a new blank genus editor."
msgstr ""

#: ../../editing.rst:104
msgid "Species/Taxon"
msgstr ""

#: ../../editing.rst:106
msgid ""
"For historical reasons called a `species`, but by this we mean a `taxon` "
"at rank `species` or lower.  It represents a unique name in the database."
"  The species editor allows you to construct the name as well as "
"associate metadata with the taxon such as its distribution, synonyms and "
"other information."
msgstr ""

#: ../../editing.rst:112
msgid ""
"The *Infraspecific parts* in the species editor allows you to specify the"
" `taxon` further than at `species` rank."
msgstr ""

#: ../../editing.rst:117
msgid "To save the species you are working on then click *OK*."
msgstr ""

#: ../../editing.rst:119
msgid ""
"To save the species you are working on and add an accession to it then "
"click on the *Add Accession* button."
msgstr ""

#: ../../editing.rst:122
msgid ""
"To add another species when you are finished editing the current one "
"click on the *Next* button on the bottom.  This will save the current "
"species and open a new blank species editor."
msgstr ""

#: ../../editing.rst:127
msgid "Accessions"
msgstr ""

#: ../../editing.rst:129
msgid ""
"The Accession editor allows us to add an accession to a species.  In "
"Ghini an accession represents a group of plants or clones that are of the"
" same taxon, are of the same propagule type (or treatment), were received"
" from the same source, were received at the same time."
msgstr ""

#: ../../editing.rst:134
msgid "Choose the Taxon name, add one if you forgot to do that in advance."
msgstr ""

#: ../../editing.rst:136
msgid ""
"You may note uncertainty in identification by adding an identification "
"qualifier, at the proper rank, so you can for example have a plant "
"initially identified as *Iris* cf. *florentina* by choosing *Iris "
"florentina* in the taxon name, identification qualifier 'cf.', qualified "
"rank 'species'."
msgstr ""

#: ../../editing.rst:141
msgid "Type the Accession ID, preferably also the Quantity received."
msgstr ""

#: ../../editing.rst:145
msgid "Accession Source"
msgstr ""

#: ../../editing.rst:147
msgid ""
"The source of the accessions lets you add more information about where "
"this accession came from.  Select a Contact from the drop-down list, or "
"choose \"Garden Propagation\", which is placed as a default first item in"
" the list of contacts."
msgstr ""

#: ../../editing.rst:152
msgid "A Garden Propagation is the result of successful Propagation."
msgstr ""

#: ../../editing.rst:154
msgid ""
"When accessing material from a Garden Propagation, you would initially "
"leave the first tab alone (General) and start from the second tab "
"(Source). Select as Contact \"Garden Propagation\", indicate which plant "
"is the parent plant and choose among the still not completely accessed "
"propagations the one you intend to add as an accession in your database."
msgstr ""

#: ../../editing.rst:160
msgid ""
"Once you select a propagation, the software will set several fields in "
"the General tab, which you can now review.  The Taxon (maybe you managed "
"to obtain something slightly different than the parent plant). The "
"Initial quantity (in case not all plants go in the same accession). The "
"Type of Material, inferred from the propagation type."
msgstr ""

#: ../../editing.rst:170 ../../use_cases-jbq.rst:669
#: ../../use_cases-jbq.rst:704
msgid "Plant"
msgstr ""

#: ../../editing.rst:172
msgid ""
"A ``Plant`` in the Ghini database describes an individual plant in your "
"collection. A plant belongs to an accession, and it has a specific "
"location."
msgstr ""

#: ../../editing.rst:176
msgid "Creating multiple plants"
msgstr ""

#: ../../editing.rst:178
msgid ""
"You can create multiple Plants by using ranges in the code entry. This is"
" only allowed when creating new plants and it is not possible when "
"editing existing Plants in the database."
msgstr ""

#: ../../editing.rst:182
msgid ""
"For example the range, 3-5 will create plant with code 3,4,5.  The range "
"1,4-7,25 will create plants with codes 1,4,5,6,7,25."
msgstr ""

#: ../../editing.rst:185
msgid ""
"When you enter the range in the plant code entry the entry will turn blue"
" to indicate that you are now creating multiple plants.  Any fields that "
"are set while in this mode will be copied to all the plants that are "
"created."
msgstr ""

#: ../../editing.rst:193
msgid "Pictures"
msgstr "사진"

#: ../../editing.rst:195
msgid ""
"Just as almost all objects in the Ghini database can have *Notes* "
"associated to them, Plants and Species can also have *Pictures*: next to "
"the tab for Notes, the Plant and the Species editors contain an extra tab"
" called \"Pictures\". You can associate as many pictures as you might "
"need to a plant and to a species object."
msgstr ""

#: ../../editing.rst:201
msgid ""
"When you associate a picture to an object, the file is copied in the "
"*pictures* folder, and a miniature (500x500) is generated and copied in "
"the `thumbnails` folder inside of the pictures folder."
msgstr ""

#: ../../editing.rst:205
msgid ""
"As of Ghini-1.0.62, Pictures are not kept in the database. To ensure "
"pictures are available on all terminals where you have installed and "
"configured Ghini, you can use a network drive, or a file sharing service "
"like Tresorit or Dropbox."
msgstr ""

#: ../../editing.rst:210
msgid ""
"Remember that you have configured the pictures root folder when you "
"specified the details of your database connection. Again, you should make"
" sure that the pictures root folder is shared with your file sharing "
"service of choice."
msgstr ""

#: ../../editing.rst:215
msgid ""
"When a Plant or a Species in the current selection is highlighted, its "
"pictures are displayed in the pictures pane, the pane left of the "
"information pane. When an Accession in the selection is highlighted, any "
"picture associated to the plants in the highlighted accession are "
"displayed in the pictures pane."
msgstr ""

#: ../../editing.rst:221
msgid ""
"In Ghini-1.0, pictures are special notes, with category \"<picture>\", "
"and text the path to the file, relative to the pictures root folder.  In "
"the Notes tab, Picture notes will show as normal notes, and you can edit "
"them without limitations."
msgstr ""

#: ../../editing.rst:226
msgid ""
"A Plant is a physical object, so you associate to it pictures taken of "
"that individual plant, taken at any relevant development stage of the "
"plant, possibly helping its identification."
msgstr ""

#: ../../editing.rst:230
msgid ""
"Species are abstract objects, so you would associate to it pictures "
"showing the characteristic elements of the species, so it makes sense to "
"associate a flora illustration to it. You can also do that by reference: "
"go to the Notes tab, add a note and specify as category \"<picture>\", "
"then in the text field you type the URL for the illustration of your "
"choice."
msgstr ""

#: ../../editing.rst:238
msgid "Locations"
msgstr ""

#: ../../editing.rst:240
msgid "The Location editor"
msgstr ""

#: ../../editing.rst:243
msgid "danger zone"
msgstr ""

#: ../../editing.rst:245
msgid ""
"The location editor contains an initially hidden section named *danger "
"zone*. The widgets contained in this section allow the user to merge the "
"current location into a different location, letting the user correct "
"spelling mistakes or implement policy changes."
msgstr ""

#: ../../ghini-family.rst:3
msgid "the Ghini family"
msgstr ""

#: ../../ghini-family.rst:5
msgid ""
"Let's start by recalling the composition of the Ghini family, as shown in"
" the diagram:"
msgstr ""

#: ../../ghini-family.rst:9
msgid ""
"You have learned how to use ghini.desktop, here we introduce the other "
"members of the family, and their interaction."
msgstr ""

#: ../../ghini-family.rst:20
msgid ""
"ghini.pocket is an Android app which you can install from the `play store"
" <https://play.google.com/store/apps/details?id=me.ghini.pocket>`_. "
"ghini.pocket is definitely the tool you will use most, next to "
"ghini.desktop."
msgstr ""

#: ../../ghini-family.rst:26
msgid ""
"With ghini.pocket you always have the latest snapshot of your database "
"with you."
msgstr ""

#: ../../ghini-family.rst:29
msgid "Type an accession number, or scan its barcode or QR label, and you know:"
msgstr ""

#: ../../ghini-family.rst:31
msgid "the identification of the plant,"
msgstr ""

#: ../../ghini-family.rst:32
msgid "whether it already has pictures,"
msgstr ""

#: ../../ghini-family.rst:33
msgid "when it entered the garden and"
msgstr ""

#: ../../ghini-family.rst:34
msgid "from which source."
msgstr ""

#: ../../ghini-family.rst:36
msgid "Apart as a quick data viewer, you can use ghini.pocket for..."
msgstr ""

#: ../../ghini-family.rst:38
msgid "data correction"
msgstr ""

#: ../../ghini-family.rst:41
msgid ""
"If by your judgement, some of the information is incorrect, or if the "
"plant is flowering and you want to immediately take a picture and store "
"it in the database, you do not need take notes on paper, nor follow "
"convolute procedures: ghini.pocket lets you write your corrections in a "
"log file, take pictures associated to the plant, and you will import this"
" information straight into the database, with further minimal user "
"intervention."
msgstr ""

#: ../../ghini-family.rst:49
msgid "inventory review"
msgstr ""

#: ../../ghini-family.rst:52
msgid ""
"The initial idea on which we based ghini.pocket is still one of its "
"functionalities: inventory review."
msgstr ""

#: ../../ghini-family.rst:55
msgid ""
"Using ghini.pocket, reviewing the inventory of a greenhouse, in "
"particular if you have QR codes on plant labels, goes as fast as you can "
"walk: simply enter the location code of your greenhouse, reset the log, "
"then one by one scan the plant codes of the plants in the greenhouse.  No"
" further data collection action is required."
msgstr ""

#: ../../ghini-family.rst:61
msgid ""
"When you're done, import the log in ghini.desktop.  The procedure "
"available in ghini.desktop includes adding unknown but labelled plants in"
" the database, marking as lost/dead all plants that the database reports "
"as alive and present in the inventoried location, but were not found "
"during the inventory."
msgstr ""

#: ../../ghini-family.rst:67
msgid "taxonomic support"
msgstr ""

#: ../../ghini-family.rst:70
msgid ""
"As a bonus, ghini.pocket contains a phonetic genus search, and a quite "
"complete database of botanic taxa with rank between order and genus, "
"including tribes, and synonymies."
msgstr ""

#: ../../ghini-family.rst:74 ../../ghini-family.rst:92
#: ../../ghini-family.rst:122
msgid "check further :any:`interaction among components`."
msgstr ""

#: ../../ghini-family.rst:84
msgid "ghini.web is a web server, written in nodejs."
msgstr ""

#: ../../ghini-family.rst:86
msgid ""
"Its most visible part runs at http://gardens.ghini.me and shows as a map "
"of the world, where you browse gardens and search their published "
"collection."
msgstr ""

#: ../../ghini-family.rst:90
msgid "It also serves configuration data to ghini.tour instances."
msgstr ""

#: ../../ghini-family.rst:103
msgid ""
"ghini.tour is an Android app which you can install from the `play store "
"<https://play.google.com/store/apps/details?id=me.ghini.tour>`_."
msgstr ""

#: ../../ghini-family.rst:107
msgid ""
"People visiting your garden will install ghini.tour on their phone or "
"tablet, enjoy having a map of the garden, knowing where they are, and "
"will be able to listen to audio files that you have placed as virtual "
"information panels in strategic spots in your garden."
msgstr ""

#: ../../ghini-family.rst:112
msgid "world view"
msgstr ""

#: ../../ghini-family.rst:115
msgid "at startup, you see the world and gardens.  select a garden, and enter."
msgstr ""

#: ../../ghini-family.rst:117
msgid "garden view"
msgstr ""

#: ../../ghini-family.rst:120
msgid "when viewing at garden level, you see panels.  select a panel, and listen."
msgstr ""

#: ../../ghini-family.rst:128
msgid "data streams between software components"
msgstr ""

#: ../../ghini-family.rst:130
msgid ""
"This section contains technical information for database managers and "
"software developers."
msgstr ""

#: ../../ghini-family.rst:136
msgid ""
"In the diagram showing the composition of the Ghini family, the alert "
"reader noticed how different arrows representing different data flows, "
"had different colours: some are deep green, some have a lighter tint."
msgstr ""

#: ../../ghini-family.rst:142
msgid ""
"Deeper green streams are constant flows of data, representing the core "
"activity of a component, eg: the interaction between ghini.desktop and "
"its database server, or your internet browser and ghini.web."
msgstr ""

#: ../../ghini-family.rst:146
msgid ""
"Lighter green streams are import/export actions, initiated by the user at"
" the command panel of ghini.desktop, or in the ghini.tour settings page."
msgstr ""

#: ../../ghini-family.rst:149
msgid ""
"This is the same graph, in which all import data streams have been given "
"an identifier."
msgstr ""

#: ../../ghini-family.rst:154
msgid "d2p: copy a snapshot of the desktop database to ghini.pocket"
msgstr ""

#: ../../ghini-family.rst:157
msgid "export the desktop database to a pocket snapshot"
msgstr ""

#: ../../ghini-family.rst:158
msgid "copy the snapshot to the handheld device"
msgstr ""

#: ../../ghini-family.rst:160
msgid ""
"ghini.pocket integrates closely with ghini.desktop, and it's not a tool "
"for the casual nor the external user.  One task of your garden database "
"manager is to regularly copy an updated database snapshot to your Android"
" device."
msgstr ""

#: ../../ghini-family.rst:165
msgid ""
"We advise enabling USB debugging on the device.  In perspective, this "
"will allow ghini.desktop writing directily into the ghini.pocket device."
msgstr ""

#: ../../ghini-family.rst:168
msgid ""
"Export the file from ghini.desktop, call the file pocket.db, copy it to "
"the phone::"
msgstr ""

#: ../../ghini-family.rst:172
msgid ""
"The above location is valid even if your phone does not have a memory "
"card."
msgstr ""

#: ../../ghini-family.rst:174
msgid ""
"Other options include bluetooth, or whatever other way you normally use "
"to copy regular files into your Android device."
msgstr ""

#: ../../ghini-family.rst:179
msgid ""
"p2d: import from the ghini.pocket log file and pictures into the central "
"database"
msgstr ""

#: ../../ghini-family.rst:182
msgid ""
"even if we're still calling it “inventory log”, ghini.pocket's log "
"contains more than just inventory corrections."
msgstr ""

#: ../../ghini-family.rst:185
msgid "produce a log on the handheld device"
msgstr ""

#: ../../ghini-family.rst:186
msgid "import the log in the desktop database"
msgstr ""

#: ../../ghini-family.rst:188
msgid ""
"first of all, copy the collected information from ghini.pocket into your "
"computer::"
msgstr ""

#: ../../ghini-family.rst:194
msgid "then use ghini.desktop to import this information into your database."
msgstr ""

#: ../../ghini-family.rst:197
msgid "d2w: send a selection of your garden data to ghini.web"
msgstr ""

#: ../../ghini-family.rst:200
msgid ""
"Offer a selection of your garden data to a central ghini.web site, so "
"online virtual visitors can browse it.  This includes plant "
"identification and their geographic location."
msgstr ""

#: ../../ghini-family.rst:204 ../../ghini-family.rst:219
#: ../../ghini-family.rst:231
msgid "content of this flow:"
msgstr ""

#: ../../ghini-family.rst:206
msgid "garden: coords, name, zoom level (for initial view)"
msgstr ""

#: ../../ghini-family.rst:207
msgid "plants: coords, identification, zoom level (for visibility)"
msgstr ""

#: ../../ghini-family.rst:208
msgid "species: binomial, phonetic approximation"
msgstr ""

#: ../../ghini-family.rst:212
msgid "g2w: add geographic non-botanic data to ghini.web"
msgstr ""

#: ../../ghini-family.rst:215
msgid ""
"Write geographic information about non-botanic data (ie: point of "
"interest within the garden, required by ghini.tour) in the central "
"ghini.web site."
msgstr ""

#: ../../ghini-family.rst:221
msgid "virtual panels: coords, title, audio file"
msgstr ""

#: ../../ghini-family.rst:222
msgid "photos: coords, title, picture"
msgstr ""

#: ../../ghini-family.rst:224
msgid ""
"virtual panels don't necessarily have an associated photo, photos don't "
"necessarily have an associated audio file."
msgstr ""

#: ../../ghini-family.rst:228
msgid "w2t: importing locations and POIs from ghini.web to tour"
msgstr ""

#: ../../ghini-family.rst:233
msgid "Garden (coords, name, zoom level)"
msgstr ""

#: ../../ghini-family.rst:234
msgid "Points of Interest (coords, title, audio file, photo)"
msgstr ""

#: ../../goal.rst:2
msgid "Ghini's goals and highlights"
msgstr ""

#: ../../goal.rst:4
msgid ""
"Should you use this software? This question is for you to answer. We "
"trust that if you manage a botanic collection, you will find Ghini overly"
" useful and we hope that this page will convince you about it."
msgstr ""

#: ../../goal.rst:8
msgid ""
"This page shows how Ghini makes software meet the needs of a botanic "
"garden."
msgstr ""

#: ../../goal.rst:10
msgid ""
"If you already know, and all you want is to do something practical, just"
"  `install the software <installing.html>`_, then check our `user-"
"contributed recipes <use_cases.html>`_."
msgstr ""

#: ../../goal.rst:13
msgid "Botanic Garden"
msgstr ""

#: ../../goal.rst:15
msgid ""
"According to the Wikipedia, »A botanic(al) garden is a garden dedicated "
"to the collection, cultivation and display of a wide range of plants "
"labelled with their botanical names«, and still according to the "
"Wikipedia, »a garden is a planned space, usually outdoors, set aside for "
"the display, cultivation, and enjoyment of plants and other forms of "
"nature.«"
msgstr ""

#: ../../goal.rst:21
msgid ""
"So we have in a botanic garden both the physical space, the garden, as "
"its dynamic, the activities to which the garden is dedicated, activities "
"which makes us call the garden a botanic garden."
msgstr ""

#: ../../goal.rst:27
msgid "**the physical garden**"
msgstr ""

#: ../../goal.rst:31
msgid "**collection related activities in the garden**"
msgstr ""

#: ../../goal.rst:36
msgid "Botanic Garden Software"
msgstr ""

#: ../../goal.rst:38
msgid ""
"At the other end of our reasoning we have the application program Ghini, "
"and again quoting the Wikipedia, »an application program is a computer "
"program designed to perform a group of coordinated functions, tasks, or "
"activities for the benefit of the user«, or, in short, »designed to help "
"people perform an activity«."
msgstr ""

#: ../../goal.rst:44
msgid ""
"Data and algorithms within Ghini have been designed to represent the "
"physical space and the dynamic of a botanic garden."
msgstr ""

#: ../../goal.rst:49 ../../searching.rst:160
msgid "**core structure of Ghini's database**"
msgstr ""

#: ../../goal.rst:51
msgid ""
"In the above figure, a simplified view on the database, the highlighted "
"blocks are those relative to objects you definitely need insert in the "
"database."
msgstr ""

#: ../../goal.rst:55
msgid ""
"We distinguish three main sections in the database.  Start reading the "
"graph from the right hand side, with the relevant **Taxonomy** "
"information, then step to administering your **Collection**, and finally "
"consider the physical **Garden**."
msgstr ""

#: ../../goal.rst:60
msgid ""
"The central element in Ghini's point of view is the ``Accession``. "
"Following its links to other database objects lets us better understand "
"the structure:"
msgstr ""

#: ../../goal.rst:63
msgid "**Accession links Planting to Species**"
msgstr ""

#: ../../goal.rst:65
msgid ""
"An ``Accession`` represents the action of receiving this specific plant "
"material in the garden. As such, ``Accession`` is an abstract concept, it"
" links physical living ``Plantings`` —groups of plants placed each at a "
"``Location`` in the garden— to the corresponding ``Species``. It is not "
"the same as an acquisition from a source, because in a single acquisition"
" you can access material of more than one species. In other words: a "
"single aquisition can embark multiple accessions. An ``Accession`` has "
"zero or more ``Plantings`` associated to it (0..n), and it is at all "
"times connected to exactly 1 ``Species``. Each ``Planting`` belongs to "
"exactly one ``Accession``, each ``Species`` may have multiple "
"``Accessions`` relating to it."
msgstr ""

#: ../../goal.rst:74
msgid ""
"An ``Accession`` stays in the database even if all of its ``Plantings`` "
"have been removed, sold, or have died. Identifying the ``Species`` of an "
"``Accession`` consistently connects all its ``Plantings`` to the "
"``Species``."
msgstr ""

#: ../../goal.rst:79
msgid "**Accession at the base of the history of your plants**"
msgstr ""

#: ../../goal.rst:81
msgid ""
"``Propagations`` and ``Contacts`` provide plant material for the garden; "
"this information is optional and smaller collectors might prefer to leave"
" this aside. A ``Propagation`` trial may be unsuccessful, most of the "
"time it will result in exactly one accession, but it may also produce "
"slightly different taxa, so the database allows for zero  or more "
"``Accessions`` per ``Propagation`` (0..n). Also a ``Contact`` may provide"
" zero or more ``Accessions`` (0..n)."
msgstr ""

#: ../../goal.rst:88
msgid "**Accession and Verification opinions**"
msgstr ""

#: ../../goal.rst:90
msgid ""
"Specialists may formulate their opinion about the ``Species`` to which an"
" ``Accession`` belongs, by providing a ``Verification``, signing it, and "
"stating the applicable level of confidence."
msgstr ""

#: ../../goal.rst:94
msgid "**Accessing your own Propagations**"
msgstr ""

#: ../../goal.rst:96
msgid ""
"If an ``Accession`` was obtained in the garden nursery from a successful "
"``Propagation``, the ``Propagation`` links the ``Accession`` and all of "
"its ``Plantings`` to a single parent ``Planting``, the seed or the "
"vegetative parent."
msgstr ""

#: ../../goal.rst:103
msgid ""
"Even after the above explanation, new users generally still ask why they "
"need pass through an ``Accession`` screen while all they want is to "
"insert a ``Plant`` in the collection, and again: what is this "
"\"accession\" thing anyway?  Most discussions on the net don't make the "
"concept any clearer. One of our users gave an example which I'm glad to "
"include in Ghini's documentation."
msgstr ""

#: ../../goal.rst
msgid "use case"
msgstr ""

#: ../../goal.rst:110
msgid ""
"At the beginning of 2007 we got five seedlings of *Heliconia longa* (a "
"plant ``Species``) from our neighbour (the ``Contact`` source). Since it "
"was the first acquisition of the year, we named them 2007.0001 (we gave "
"them a single unique ``Accession`` code, with quantity 5) and we planted "
"them all together at one ``Location`` as a single ``Planting``, also with"
" quantity 5."
msgstr ""

#: ../../goal.rst:118
msgid ""
"At the time of writing, nine years later, ``Accession`` 2007.0001 has 6 "
"distinct ``Plantings``, each at a different ``Locations`` in our garden, "
"obtained vegetatively (asexually) from the original 5 plants. Our only "
"intervention was splitting, moving, and of course writing this "
"information in the database. Total plant quantity is above 40."
msgstr ""

#: ../../goal.rst:125
msgid ""
"New ``Plantings`` obtained by (assisted) sexual ``Propagation`` come in "
"our database under different ``Accession`` codes, where our garden is the"
" ``Contact`` source and where we know which of our ``Plantings`` is the "
"seed parent."
msgstr ""

#: ../../goal.rst:130
msgid "the above three cases translate into several short usage stories:"
msgstr ""

#: ../../goal.rst:132
msgid ""
"activate the menu Insert → Accession, verify the existence and "
"correctness of the ``Species`` *Heliconia longa*, specify the initial "
"quantity of the ``Accession``; add its ``Planting`` at the desired "
"``Location``."
msgstr ""

#: ../../goal.rst:136
msgid ""
"edit ``Planting`` to correct the amount of living plants — repeat this as"
" often as necessary."
msgstr ""

#: ../../goal.rst:138
msgid ""
"edit ``Planting`` to split it at separate ``Locations`` — this produces a"
" different ``Planting`` under the same ``Accession``."
msgstr ""

#: ../../goal.rst:140
msgid "edit ``Planting`` to add a (seed) ``Propagation``."
msgstr ""

#: ../../goal.rst:141
msgid "edit ``Planting`` to update the status of the ``Propagation``."
msgstr ""

#: ../../goal.rst:142
msgid ""
"activate the menu Insert → Accession to associate an accession to a "
"successful ``Propagation`` trial; add the ``Planting`` at the desired "
"``Location``."
msgstr ""

#: ../../goal.rst:146
msgid ""
"In particular the ability to split a ``Planting`` at several different "
"``Locations`` and to keep all uniformly associated to one ``Species``, or"
" the possibility to keep information about ``Plantings`` that have been "
"removed from the collection, help justify the presence of the "
"``Accession`` abstraction level."
msgstr ""

#: ../../goal.rst:153
msgid "Hypersimplified view"
msgstr ""

#: ../../goal.rst:155
msgid ""
"People using Ghini only sporadically may prefer ignoring the database "
"structure and look at it as two nested sequences of objects, each element"
" of the sequence being necessary to add element at the next level."
msgstr ""

#: ../../goal.rst:159
msgid ""
"In order to get down to an Accession, you will need four levels, as in "
"this example:"
msgstr ""

#: ../../goal.rst:164
msgid ""
"A quite complete set of Families and Genera are inserted in your database"
" at the moment Ghini initializes it. So all you need is adding Species "
"and Accessions, in this order."
msgstr ""

#: ../../goal.rst:168
msgid ""
"When placing a physical Plant (relative to an Accession) somewhere in the"
" garden, you need to describe this \"somewhere\" digitally, as a Location"
" in the garden."
msgstr ""

#: ../../goal.rst:177
msgid "Highlights"
msgstr ""

#: ../../goal.rst:178
msgid "not-so-brief list of highlights, meant to whet your appetite."
msgstr ""

#: ../../goal.rst:181
msgid "taxonomic information"
msgstr ""

#: ../../goal.rst:183
msgid ""
"When you first start Ghini, and connect to a database, Ghini will "
"initialize the database not only with all tables it needs to run, but it "
"will also populate the taxon tables for ranks family and genus, using the"
" data from the “RBG Kew's Family and Genera list from Vascular Plant "
"Families and Genera compiled by R. K. Brummitt and published by the Royal"
" Botanic Gardens, Kew in 1992”.  In 2015 we have reviewed the data "
"regarding the Orchidaceae, using “Tropicos, botanical information system "
"at the Missouri Botanical Garden - www.tropicos.org” as a source."
msgstr ""

#: ../../goal.rst:193
msgid "importing data"
msgstr ""

#: ../../goal.rst:195
msgid ""
"Ghini will let you import any data you put in an intermediate json "
"format. What you import will complete what you already have in the "
"database. If you need help, you can ask some Ghini professional to help "
"you transform your data into Ghini's intermediate json format."
msgstr ""

#: ../../goal.rst:201
msgid "synonyms"
msgstr ""

#: ../../goal.rst:203
msgid ""
"Ghini will allow you define synonyms for species, genera, families. Also "
"this information can be represented in its intermediate json format and "
"be imported in an existing Ghini database."
msgstr ""

#: ../../goal.rst:208
msgid "scientific responsible"
msgstr ""

#: ../../goal.rst:210
msgid ""
"Ghini implements the concept of 'accession', intermediate between "
"physical plant (or a group thereof) and abstract taxon. Each accession "
"can associate the same plants to different taxa, if two taxonomists do "
"not agree on the identification: each taxonomist can have their say and "
"do not need overwrite each other's work. All verifications can be found "
"back in the database, with timestamp and signature."
msgstr ""

#: ../../goal.rst:218
msgid "helps off-line identification"
msgstr ""

#: ../../goal.rst:220
msgid ""
"Ghini allows you associate pictures to physical plants, this can help "
"recognize the plant in case a sticker is lost, or help taxonomic "
"identification if a taxonomist is not available at all times."
msgstr ""

#: ../../goal.rst:225
msgid "exports and reports"
msgstr ""

#: ../../goal.rst:227
msgid ""
"Ghini will let you export a report in whatever textual format you need. "
"It uses a powerful templating engine named 'mako', which will allow you "
"export the data in a selection to whatever format you need. Once "
"installed, a couple of examples are available in the mako subdirectory."
msgstr ""

#: ../../goal.rst:233
msgid "annotate your info"
msgstr ""

#: ../../goal.rst:235
msgid ""
"You can associate notes to plants, accessions, species, .... Notes can be"
" categorized and used in searches or reports."
msgstr ""

#: ../../goal.rst:239
msgid "garden or herbarium"
msgstr ""

#: ../../goal.rst:241
msgid "Management of plant locations."
msgstr ""

#: ../../goal.rst:244
msgid "database history"
msgstr ""

#: ../../goal.rst:246
msgid ""
"All changes in the database is stored in the database, as history log. "
"All changes are 'signed' and time-stamped.  Ghini makes it easy to "
"retrieve the list of all changes in the last working day or week, or in "
"any specific period in the past."
msgstr ""

#: ../../goal.rst:252
msgid "simple and powerful search"
msgstr ""

#: ../../goal.rst:254
msgid ""
"Ghini allows you search the database using simple keywords, e.g.: the "
"name of the location or a genus name, or you can write more complex "
"queries, which do not reach the complexity of SQL but allow you a decent "
"level of detail localizing your data."
msgstr ""

#: ../../goal.rst:260
msgid "database agnostic"
msgstr ""

#: ../../goal.rst:262
msgid ""
"Ghini is not a database management system, so it does not reinvent the "
"wheel. It works storing its data in a SQL database, and it will connect "
"to any database management system which accepts a SQLAlchemy connector. "
"This means any reasonably modern database system and includes MySQL, "
"PostgreSQL, Oracle. It can also work with sqlite, which, for single user "
"purposes is quite sufficient and efficient. If you connect Ghini to a "
"real database system, you can consider making the database part of a LAMP"
" system (Linux-Apache-MySQL-Php) and include your live data on your "
"institution web site."
msgstr ""

#: ../../goal.rst:273
msgid "language agnostic"
msgstr ""

#: ../../goal.rst:275
msgid ""
"The program was born in English and all its technical and user "
"documentation is first written in that language. Both technical and user "
"documentation use ``gettext``, an advanced tool for semi-automatic "
"translation."
msgstr ""

#: ../../goal.rst:279
msgid ""
"The program has been translated and can be used in various other "
"languages, including Spanish (97%), French (82%), Portuguese (71%), to "
"name some Southern American languages, as well as Ukrainian (100%) and "
"Czech (71%)."
msgstr ""

#: ../../goal.rst:283
msgid ""
"Translation of documentation goes a bit slower, with only Ukrainian, "
"Spanish and Italian at more than 50%."
msgstr ""

#: ../../goal.rst:287
msgid "platform agnostic"
msgstr ""

#: ../../goal.rst:289
msgid ""
"Installing Ghini on Windows is an easy and linear process, it will not "
"take longer than 10 minutes. Ghini was born on Linux and installing it on"
" ubuntu, fedora or debian is consequently even easier. MacOSX being based"
" on unix, it is possible to successfully run the Linux installation "
"procedure on any recent Apple computer, after a few preparation steps."
msgstr ""

#: ../../goal.rst:296
msgid "easily updated"
msgstr ""

#: ../../goal.rst:298
msgid ""
"The installation process will produce an updatable installation, where "
"updating it will take less than one minute. Depending on the amount of "
"feedback we receive, we will produce updates every few days or once in a "
"while."
msgstr ""

#: ../../goal.rst:304
msgid "unit tested"
msgstr ""

#: ../../goal.rst:306
msgid ""
"Ghini is continuously and extensively unit tested, something that makes "
"regression of functionality close to impossible. Every update is "
"automatically quality checked, on the Travis Continuous Integration "
"service. Integration of TravisCI with the github platform will make it "
"difficult for us to release anything which has a single failing unit "
"test."
msgstr ""

#: ../../goal.rst:312
msgid ""
"Most changes and additions we make, come with some extra unit test, which"
" defines the behaviour and will make any undesired change easily visible."
msgstr ""

#: ../../goal.rst:316
msgid "customizable/extensible"
msgstr ""

#: ../../goal.rst:318
msgid ""
"Ghini is extensible through plugins and can be customized to suit the "
"needs of the institution."
msgstr ""

#: ../../imex.rst:2
msgid "Importing and Exporting Data"
msgstr ""

#: ../../imex.rst:4
msgid ""
"Although Ghini can be extended through plugins to support alternate "
"import and export formats, by default it can only import and export comma"
" separated values files or CSV."
msgstr ""

#: ../../imex.rst:8
msgid ""
"There is some support for exporting to the Access for Biological "
"Collections Data it is limited."
msgstr ""

#: ../../imex.rst:11
msgid ""
"There is also limited support for exporting to an XML format that more or"
" less reflects exactly the tables and row of the database."
msgstr ""

#: ../../imex.rst:14
msgid "Exporting ABCD and XML will not be covered here."
msgstr ""

#: ../../imex.rst:16
msgid ""
"Importing files will most likely destroy any data you have in the "
"database so make sure you have backed up your data."
msgstr ""

#: ../../imex.rst:20
msgid "Importing from CSV"
msgstr ""

#: ../../imex.rst:21
msgid ""
"In general it is best to only import CSV files into Ghini that were "
"previously exported from Ghini. It is possible to import any CSV file but"
" that is more advanced that this doc will cover."
msgstr ""

#: ../../imex.rst:25
msgid ""
"To import CSV files into Ghini select "
":menuselection:`Tools-->Export-->Comma Separated Values` from the menu."
msgstr ""

#: ../../imex.rst:29
msgid ""
"After clicking OK on the dialog that ask if you are sure you know what "
"you're doing a file chooser will open.  In the file chooser select the "
"files you want to import."
msgstr ""

#: ../../imex.rst:35
msgid "Exporting to CSV"
msgstr ""

#: ../../imex.rst:37
msgid ""
"To export the Ghini data to CSV select "
":menuselection:`Tools-->Export-->Comma Separated Values` from the menu."
msgstr ""

#: ../../imex.rst:40
msgid ""
"This tool will ask you to select a directory to export the CSV data. All "
"of the tables in Ghini will be exported to files in the format "
"tablename.txt where tablename is the name of the table where the data was"
" exported from."
msgstr ""

#: ../../imex.rst:46
msgid "Importing from JSON"
msgstr ""

#: ../../imex.rst:48
msgid ""
"This is *the* way to import data into an existing database, without "
"destroying previous content. A typical example of this functionality "
"would be importing your digital collection into a fresh, just initialized"
" Ghini database. Converting a database into bauble json interchange "
"format is beyond the scope of this manual, please contact one of the "
"authors if you need any further help."
msgstr ""

#: ../../imex.rst:55
msgid ""
"Using the Ghini json interchange format, you can import data which you "
"have exported from a different Ghini installation."
msgstr ""

#: ../../imex.rst:59
msgid "Exporting to JSON"
msgstr ""

#: ../../imex.rst:61
msgid "This feature is still under development."
msgstr ""

#: ../../imex.rst:65
msgid ""
"when you activate this export tool, you are given the choice to specify "
"what to export. You can use the current selection to limit the span of "
"the export, or you can start at the complete content of a domain, to be "
"chosen among Species, Accession, Plant."
msgstr ""

#: ../../imex.rst:71
msgid ""
"Exporting *Species* will only export the complete taxonomic information "
"in your database. *Accession* will export all your accessions plus all "
"the taxonomic information it refers to: unreferred to taxa will not be "
"exported. *Plant* will export all living plants (some accession might not"
" be included), all referred to locations and taxa."
msgstr ""

#: ../../imex.rst:79
msgid "Importing from a Generic Database"
msgstr ""

#: ../../imex.rst:81
msgid ""
"This functionality is the object of `issue #127 "
"<https://github.com/Ghini/ghini.desktop/issues/127>`_, for which we have "
"no generic solution yet."
msgstr ""

#: ../../imex.rst:85
msgid ""
"If you're interested in importing data from some flat file (e.g.: Excel "
"spreadsheet) or from any database, contact the developers."
msgstr ""

#: ../../imex.rst:90
msgid "Importing a Pictures Collection"
msgstr ""

#: ../../imex.rst:92
msgid ""
"We can consider a collection of plant pictures as a particular form of "
"botanical database, in which each picture is clearly associated with one "
"specific plant."
msgstr ""

#: ../../imex.rst:96
msgid ""
"Even without using a photo collection software, you can associate "
"pictures to accessions by following one and the same clear rule when "
"naming picture files."
msgstr ""

#: ../../imex.rst:100
msgid ""
"For example, ``2018.0020.1 (4) Epidendrum.jpg`` would be the name of the "
"fourth picture for plant number 1 within accession 2018.0020, identified "
"to rank genus as an Epidendrum."
msgstr ""

#: ../../imex.rst:104
msgid ""
"The :menuselection:`Tools-->Import-->Pictures` functionality here "
"described is meant for importing an ordered collection of plant pictures "
"either to initialize a ghini database, or for periodically adding to it."
msgstr ""

#: ../../imex.rst:109
msgid ""
"Use :menuselection:`Tools-->Import-->Pictures` to activate this import "
"tool.  Import goes in several steps: parameter definition; data revision "
"and confirmation; the import step proper; finally review the import log."
"  At the first two steps you can confirm the data and go to the next step"
" by clicking on the ``next`` button, or you can go back to the previous "
"step by clicking on the ``prev`` button.  Once the import is done and "
"you're reviewing the log, you can only either confirm —or abort— the "
"whole transaction."
msgstr ""

#: ../../imex.rst:119
msgid ""
"In the \"parameter definition\" pane you: select the directory from which"
" you intend to import pictures; indicate whether to import pictures "
"recursively; select or create a location which will be used as default "
"location for new plants; inform the tool about the rule you've been "
"following when naming picture files."
msgstr ""

#: ../../imex.rst:127
msgid ""
"In the \"data revision\" pane you are shown a table with as many rows as "
"the pictures you are importing.  Each row holds as much information as "
"the tool managed to extract from the picture name.  You can review the "
"information, correct or confirm, and indicate whether or not the row "
"should be imported."
msgstr ""

#: ../../imex.rst:135
msgid ""
"In the final \"commit or rollback\" pane you read the logs relative to "
"your data import, and decide whether to keep them (commit them to the "
"database), or undo them (rollback the transaction)."
msgstr ""

#: ../../imex.rst:141
msgid ""
"When the Picture Collection importer creates or updates objects, it also "
"sets a Note that you can use for selecting the objects involved in the "
"import, and for reviewing if needed."
msgstr ""

#: ../../index.rst:2
msgid "Documentation for Ghini 1.0"
msgstr "Ghini 1.0에 대한 문서"

#: ../../index.rst:8
msgid ""
"Ghini is a suite of applications for managing botanical specimen "
"collections."
msgstr "Ghini는 식물 표본 수집을 관리하기위한 응용 프로그램 모음입니다."

#: ../../index.rst:10
msgid ""
"**ghini.desktop** lets you create and query a database representing "
"objects and events in your plant collection."
msgstr ""
"**ghini.desktop를** 사용하면 플랜트 컬렉션의 개체및 이벤트를 나타내는 데이터베이스를 만들고 쿼리할 수 있습니다."

#: ../../index.rst:11
msgid "**ghini.web** publishes highlights from your database on the web."
msgstr "**ghini.web는** 웹에 데이터베이스의 하이라이트를 게시합니다."

#: ../../index.rst:12
msgid "**ghini.pocket** puts a snapshot of your database in your handheld device."
msgstr "**ghini.pocket는** 핸드헬드 장치에 데이터베이스의 스냅샷을 넣습니다."

#: ../../index.rst:13
msgid ""
"**ghini.tour** assists garden visitors with a map and spoken virtual "
"panels."
msgstr "**ghini.tour는** 정원 방문객을 지도와 음성 가상 패널로 지원합니다."

#: ../../index.rst:17
msgid ""
"The bulk of this documentation focuses on ghini.desktop.  One final "
"chapter presents the rest of the Ghini family: :any:`ghini.pocket`, "
":any:`ghini.web`, :any:`ghini.tour`, and the :any:`interaction among "
"components`."
msgstr ""

#: ../../index.rst:21
msgid ""
"All Ghini software is `open <http://www.opensource.org>`_ and `free "
"<http://www.fsf.org>`_. Our standalone software is released under the "
"`GNU Public License <http://www.fsf.org/licensing/licenses/gpl.html>`_. "
"Our client-server software follows the `GNU Affero Public License "
"<http://www.fsf.org/licensing/licenses/agpl.html>`_."
msgstr ""

#: ../../index.rst:28
msgid "Statements"
msgstr ""

#: ../../index.rst:37
msgid "Installing Ghini"
msgstr ""

#: ../../index.rst:46
msgid "User's Guide"
msgstr ""

#: ../../index.rst:61
msgid "Cookbook"
msgstr ""

#: ../../index.rst:69
msgid "Administration"
msgstr ""

#: ../../index.rst:77
msgid "Ghini Family"
msgstr ""

#: ../../index.rst:85
msgid "Ghini Development"
msgstr ""

#: ../../index.rst:94
msgid "Supporting Ghini"
msgstr ""

#: ../../index.rst:96
msgid ""
"If you're using Ghini, or if you feel like helping its development "
"anyway, please consider donating."
msgstr ""

#: ../../installing.rst:2
msgid "Installation"
msgstr ""

#: ../../installing.rst:4
msgid ""
"ghini.desktop is a cross-platform program and it will run on unix "
"machines like GNU/Linux and MacOSX, as well as on Windows."
msgstr ""

#: ../../installing.rst:7
msgid "one-liner for hurried users."
msgstr ""

#: ../../installing.rst:10
msgid ""
"Linux users just download and run `the installation script "
"<https://raw.githubusercontent.com/Ghini/ghini.desktop/ghini-1.0-dev/scripts/devinstall.sh>`_."
" You may read the documentation later."
msgstr ""

#: ../../installing.rst:14
msgid ""
"Windows users in a real hurry don't the instructions and use a recent "
"`Windows installer <https://github.com/Ghini/ghini.desktop/releases/>`_."
"  You do not miss any functional feature, but you have less chances to "
"contribute to development."
msgstr ""

#: ../../installing.rst:18
msgid "Mac users are never in a hurry, are they?"
msgstr ""

#: ../../installing.rst:20
msgid ""
"Ghini is maintained by very few people, who focus on enhancing its "
"functional parts, more than on writing fancy installers. Instead of "
"several native installers we offer a single cross-platform installation "
"procedure. This has a few big advantages which you will learn to "
"appreciate as we go."
msgstr ""

#: ../../installing.rst:25
msgid "The installation is based on running a script."
msgstr ""

#: ../../installing.rst:27
msgid ""
"The GNU/Linux script takes care of everything, from dependecies to "
"installation for users in the ``ghini`` group."
msgstr ""

#: ../../installing.rst:29
msgid "The Windows script needs you to first install a couple things."
msgstr ""

#: ../../installing.rst:30
msgid ""
"On MacOSX we use the same script as on GNU/Linux. Since OSX has no "
"default package manager, we install one and we use it before we start the"
" script."
msgstr ""

#: ../../installing.rst:33
msgid ""
"Following our installation procedure, you will end with Ghini running "
"within a Python virtual environment, all Python dependencies installed "
"locally, non conflicting with any other Python program you may have on "
"your system."
msgstr ""

#: ../../installing.rst:37
msgid ""
"Dependencies that don't fit in a Python virtual environment are: Python, "
"virtualenv, GTK+, and PyGTK. Their installation varies per platform."
msgstr ""

#: ../../installing.rst:40
msgid ""
"If you later choose to remove Ghini, you simply remove the virtual "
"environment, which is a directory, with all of its content."
msgstr ""

#: ../../installing.rst:44
msgid "Installing on GNU/Linux"
msgstr ""

#: ../../installing.rst:46
msgid "Open a shell terminal window, and follow the following instructions."
msgstr ""

#: ../../installing.rst:48
msgid "Download the `devinstall.sh` script:"
msgstr ""

#: ../../installing.rst:50
msgid ""
"`devinstall.sh "
"<https://raw.githubusercontent.com/Ghini/ghini.desktop/ghini-1.0-dev/scripts/devinstall.sh>`_"
msgstr ""

#: ../../installing.rst:52
msgid ""
"Invoke the script from a terminal window, starting at the directory where"
" you downloaded it, like this::"
msgstr ""

#: ../../installing.rst:57
msgid "The script will produce quite some output, which you can safely ignore."
msgstr ""

#: ../../installing.rst:59
msgid "global installation"
msgstr ""

#: ../../installing.rst:62
msgid ""
"When almost ready, the installation script will ask you for your "
"password.  This lets it create a ``ghini`` user group, initialise it to "
"just yourself, make the just created ``ghini`` script available to the "
"whole ``ghini`` user group."
msgstr ""

#: ../../installing.rst:67
msgid ""
"If feeling paranoid, you can safely not give your password and interrupt "
"the script there."
msgstr ""

#: ../../installing.rst:70
msgid ""
"Possibly the main advantage of a global installation is being able to "
"find Ghini in the application menus of your graphic environment."
msgstr ""

#: ../../installing.rst:74
msgid "You can now start ghini by invoking the ``ghini`` script::"
msgstr ""

#: ../../installing.rst:78
msgid ""
"You use the same ``ghini`` script to update ghini to the latest released "
"production patch::"
msgstr ""

#: ../../installing.rst:83
msgid "This is what you would do when ghini shows you something like this:"
msgstr ""

#: ../../installing.rst:87
msgid ""
"Users of the global installation will also type ``ghini`` to invoke the "
"program, but they will get to a different script, located in "
"``/usr/local/bin``. This globally available ``ghini`` script cannot be "
"used to update a ghini installation."
msgstr ""

#: ../../installing.rst:92
msgid ""
"Again the same ``ghini`` script lets you install the optional database "
"connectors: option ``-p`` is for PostgreSQL, option ``-m`` is for "
"MySQL/MariaDB, but you can also install both at the same time::"
msgstr ""

#: ../../installing.rst:98
msgid ""
"Please beware: you might need solve dependencies. How to do so, depends "
"on which GNU/Linux flavour you are using. Check with your distribution "
"documentation."
msgstr ""

#: ../../installing.rst:102
msgid ""
"You can also use the ``ghini`` script to switch to a different production"
" line.  At the moment ``1.0`` is the stable one, but you can select "
"``1.1`` if you want to help us with its development::"
msgstr ""

#: ../../installing.rst:108
msgid "beginner's note"
msgstr ""

#: ../../installing.rst:111
msgid ""
"To run a script, first make sure you note down the name of the directory "
"to which you have downloaded the script, then you open a terminal window "
"and in that window you type `bash` followed by a space and the complete "
"name of the script including directory name, and hit on the enter key."
msgstr ""

#: ../../installing.rst:117
msgid "technical note"
msgstr ""

#: ../../installing.rst:120
msgid "You can study the script to see what steps if runs for you."
msgstr ""

#: ../../installing.rst:122
msgid ""
"In short it will install dependencies which can't be satisfied in a "
"virtual environment, then it will create a virtual environment named "
"``ghide``, use git to download the sources to a directory named "
"``~/Local/github/Ghini/ghini.desktop``, and connect this git checkout to "
"the ``ghini-1.0`` branch (this you can consider a production line), it "
"then builds ghini, downloading all remaining dependencies in the virtual "
"environment, and finally it creates the ``ghini`` startup script."
msgstr ""

#: ../../installing.rst:130
msgid ""
"If you have ``sudo`` permissions, it will be placed in "
"``/usr/local/bin``, otherwise in your ``~/bin`` folder."
msgstr ""

#: ../../installing.rst:134 ../../installing.rst:212 ../../installing.rst:359
msgid "Next..."
msgstr ""

#: ../../installing.rst:138
msgid "Installing on MacOSX"
msgstr ""

#: ../../installing.rst:140
msgid ""
"Being macOS a unix environment, most things will work the same as on "
"GNU/Linux (sort of)."
msgstr ""

#: ../../installing.rst:143
msgid ""
"First of all, you need things which are an integral part of a unix "
"environment, but which are missing in a off-the-shelf mac:"
msgstr ""

#: ../../installing.rst:146
msgid ""
"developers tools: xcode. check the wikipedia page for the version "
"supported on your mac."
msgstr ""

#: ../../installing.rst:148
msgid "package manager: homebrew (tigerbrew for older OSX versions)."
msgstr ""

#: ../../installing.rst:150
msgid "Installation on older macOS."
msgstr ""

#: ../../installing.rst:153
msgid ""
"Every time we tested, we could only solve all dependencies on the two or "
"three most recent macOS versions.  In April 2015 this excluded macOS 10.6"
" and older.  In September 2017 this excluded macOS 10.8 and older.  We "
"never had a problem with the lastest macOS."
msgstr ""

#: ../../installing.rst:158
msgid ""
"The problem lies with homebrew and some of the packages we rely on. The "
"message you have to fear looks like this::"
msgstr ""

#: ../../installing.rst:163
msgid "The only solution I can offer is: please update your system."
msgstr ""

#: ../../installing.rst:165
msgid ""
"On the bright side, if at any time in the past you did install "
"ghini.desktop on your older and now unsupported macOS, you will always be"
" able to update ghini.desktop to the latest version."
msgstr ""

#: ../../installing.rst:169
msgid "With the above installed, open a terminal window and run::"
msgstr ""

#: ../../installing.rst:173
msgid ""
"make sure you understand the problems it reports, and correct them. pygtk"
" will need xquartz and brew will not solve the dependency automatically. "
"either install xquartz using brew or the way you prefer::"
msgstr ""

#: ../../installing.rst:179
msgid "then install the remaining dependencies::"
msgstr ""

#: ../../installing.rst:184
msgid "follow all instructions on how to activate what you have installed."
msgstr ""

#: ../../installing.rst:186
msgid ""
"In particular, make sure you read and understand all reports starting "
"with ``If you need to have this software``."
msgstr ""

#: ../../installing.rst:189
msgid ""
"You will need at least the following four lines in your "
"``~/.bash_profile``::"
msgstr ""

#: ../../installing.rst:196
msgid "Activate the profile by sourcing it::"
msgstr ""

#: ../../installing.rst:200
msgid ""
"Before we can run ``devinstall.sh`` as on GNU/Linux, we still need "
"installing a couple of python packages, globally. Do this::"
msgstr ""

#: ../../installing.rst:205
msgid ""
"The rest is just as on a normal unix machine. Read the above GNU/Linux "
"instructions, follow them, enjoy."
msgstr ""

#: ../../installing.rst:207
msgid ""
"As an optional aesthetical step, consider packaging your ``~/bin/ghini`` "
"script in a `platypus <https://github.com/sveinbjornt/Platypus>`_ "
"application bundle.  The ``images`` directory contains a 128×128 icon."
msgstr ""

#: ../../installing.rst:216
msgid "Installing on Windows"
msgstr ""

#: ../../installing.rst:218
msgid ""
"The steps described here instruct you on how to install Git, Gtk, Python,"
" and the python database connectors. With this environment correctly set "
"up, the Ghini installation procedure runs as on GNU/Linux. The concluding"
" steps are again Windows specific."
msgstr ""

#: ../../installing.rst:223
msgid ""
"Ghini has been tested with and is known to work on W-XP, W-7 up to W-10. "
"Although it should work fine on other versions Windows it has not been "
"thoroughly tested."
msgstr ""

#: ../../installing.rst:233
msgid "The installation steps on Windows:"
msgstr ""

#: ../../installing.rst:235
msgid ""
"download and install ``git`` (comes with a unix-like ``sh`` and includes "
"``vi``). Grab it from `the Git download area <https://git-"
"scm.com/download/win>`_."
msgstr ""

#: ../../installing.rst:238
msgid ""
"all default options are fine, except we need git to be executable from "
"the command prompt:"
msgstr ""

#: ../../installing.rst:243
msgid ""
"download and install Python 2.x (32bit). Grab it from the `Python "
"official site <http://www.python.org>`_."
msgstr ""

#: ../../installing.rst:246
msgid "When installing Python, do put Python in the PATH:"
msgstr ""

#: ../../installing.rst:250
msgid ""
"download ``pygtk`` from `the official source "
"<http://ftp.gnome.org/pub/GNOME/binaries/win32/pygtk/>`_. (this requires "
"32bit python). be sure you download the \"all in one\" version."
msgstr ""

#: ../../installing.rst:254
msgid "Make a complete install, selecting everything:"
msgstr ""

#: ../../installing.rst:258
msgid ""
"(Possibly necessary, maybe superfluous) install lxml, you can grab this "
"from `the pypi archives <https://pypi.python.org/pypi/lxml/3.4.4>`_"
msgstr ""

#: ../../installing.rst:261
msgid "Remember you need the 32 bit version, for Python 2.7."
msgstr ""

#: ../../installing.rst:272
msgid ""
"(definitely optional) download and install a database connector other "
"than ``sqlite3``."
msgstr ""

#: ../../installing.rst:275
msgid ""
"If you plan using PostgreSQL, the best Windows binary library for Python "
"is `psycopg and is Made in Italy "
"<http://initd.org/psycopg/docs/install.html>`_."
msgstr ""

#: ../../installing.rst:279
msgid "**REBOOT**"
msgstr ""

#: ../../installing.rst:281
msgid "hey, this is Windows, you need to reboot for changes to take effect!"
msgstr ""

#: ../../installing.rst:283
msgid ""
"We're done with the dependecies, now we can download and run the batch "
"file:"
msgstr ""

#: ../../installing.rst:287
msgid ""
"Please don't just follow the above link.  Instead: right click, save link"
" as..."
msgstr ""

#: ../../installing.rst:291
msgid ""
"Also make sure you don't let Windows convert the script to a text "
"document."
msgstr ""

#: ../../installing.rst:295
msgid ""
"Now **Open** the script to run it.  Please note: in the below image, we "
"have saved the file twice, once letting Windows convert it to a text "
"document, and again as a Windows Batch File.  Opening the batch file will"
" run the script.  Opening the text document will show you the code of the"
" batch file, which isn't going to lead us anywhere."
msgstr ""

#: ../../installing.rst:303
msgid ""
"If you installed everything as described here, the first thing you should"
" see when you start the installation script is a window like this, and "
"your computer will be busy during a couple of minutes, showing you what "
"it is doing."
msgstr ""

#: ../../installing.rst:310
msgid ""
"Running ``devinstall.bat`` will pull the ``ghini.desktop`` repository "
"from github to your home directory, under ``Local\\github\\Ghini``, "
"checkout the ``ghini-1.0`` production line, create a virtual environment "
"and install ghini into it."
msgstr ""

#: ../../installing.rst:315
msgid ""
"You can also run ``devinstall.bat`` passing it as argument the numerical "
"part of the production line you want to follow."
msgstr ""

#: ../../installing.rst:318
msgid ""
"This is the last installation step that depends, heavily, on a working "
"internet connection."
msgstr ""

#: ../../installing.rst:321
msgid ""
"The operation can take several minutes to complete, depending on the "
"speed of your internet connection."
msgstr ""

#: ../../installing.rst:324
msgid ""
"the last installation step creates the Ghini group and shortcuts in the "
"Windows Start Menu, for all users. To do so, you need run a script with "
"administrative rights. The script is called ``devinstall-finalize.bat``, "
"it is right in your HOME folder, and has been created at the previous "
"step."
msgstr ""

#: ../../installing.rst:332
msgid ""
"Right-click on it, select run as administrator, confirm you want it to "
"make changes to your computer.  These changes are in the Start Menu only:"
" create the Ghini group, place the Ghini shortcut."
msgstr ""

#: ../../installing.rst:336
msgid "download the batch file, it will help you staying up-to-date:"
msgstr ""

#: ../../installing.rst:338
msgid ""
"`ghini-update.bat "
"<https://raw.githubusercontent.com/Ghini/ghini.desktop/ghini-1.0-dev/scripts"
"/ghini-update.bat>`_"
msgstr ""

#: ../../installing.rst:340
msgid ""
"If you are on a recent Ghini installation, each time you start the "
"program, Ghini will check on the development site and alert you of any "
"newer ghini release within your chosen production line."
msgstr ""

#: ../../installing.rst:344
msgid ""
"Any time you want to update your installation, just run the ``ghini-"
"update.bat`` script, it will hardly take one minute."
msgstr ""

#: ../../installing.rst:347
msgid ""
"How to save a batch file, and how to run it: check the the quite detailed"
" instructions given for ``devinstall.bat``."
msgstr ""

#: ../../installing.rst:350
msgid ""
"If you need to generate PDF reports, you can use the XLS based report "
"generator and you will need to download and install `Apache FOP "
"<http://xmlgraphics.apache.org/fop/>`_.  After extracting the FOP archive"
" you will need to include the directory you extracted to in your PATH."
msgstr ""

#: ../../installing.rst:355
msgid ""
"If you choose for PostScript reports, you can use the Mako based report "
"generator and there are no further dependencies."
msgstr ""

#: ../../installing.rst:363
msgid "Installing on Android"
msgstr ""

#: ../../installing.rst:365
msgid ""
"``ghini.desktop`` is a desktop program, obviously you don't install it on"
" a handheld device, but we do offer the option, for your Android phone or"
" tablet, to install ``ghini.pocket``."
msgstr ""

#: ../../installing.rst:368
msgid ""
"``ghini.pocket`` is a small data viewer, it comes handy if you want to "
"have a quick idea of a plant species, its source, and date it entered the"
" garden, just by scanning a plant label."
msgstr ""

#: ../../installing.rst:371
msgid ""
"Installation is as easy as it can be: just `look for it in Google Play "
"<https://play.google.com/store/apps/details?id=me.ghini.pocket>`_, and "
"install it."
msgstr ""

#: ../../installing.rst:374
msgid ""
"Export the data from ``ghini.desktop`` to pocket format, copy it to your "
"device, enjoy."
msgstr ""

#: ../../propagations.rst:4
msgid "Dealing with Propagations"
msgstr ""

#: ../../propagations.rst:6
msgid ""
"Ghini offers the possibility to associate Propagations trials to Plants "
"and to document their treatments and results. Treatments are integral "
"parts of the description of a Propagation trial. If a Propagation trial "
"is successful, Ghini lets you associate it to a new Accession. You can "
"only associate one Accession to a Propagation Trial."
msgstr ""

#: ../../propagations.rst:12
msgid "Here we describe how you use this part of the interface."
msgstr ""

#: ../../propagations.rst:15
msgid "Creating a Propagation"
msgstr ""

#: ../../propagations.rst:17
msgid ""
"A Propagation (trial) is obtained from a Plant. Ghini reflects this in "
"its interface: you select a plant, open the Plant Editor on it, activate "
"the Propagation Tab, click on Add."
msgstr ""

#: ../../propagations.rst:21
msgid ""
"When you do the above, you get a Propagation Editor window. Ghini does "
"not consider Propagation trials as independent entities. As a result, "
"Ghini treats the Propagation Editor as a special editor window, which you"
" can only reach from the Plant Editor."
msgstr ""

#: ../../propagations.rst:26
msgid ""
"For a new Propagation, you select the type of propagation (this becomes "
"an immutable property of the propagation) then insert the data describing"
" it."
msgstr ""

#: ../../propagations.rst:29
msgid ""
"You will be able to edit the propagation data via the same path: select a"
" plant, open the Plant Editor, identify the propagation you want to edit,"
" click on the corresponding Edit button. You will be able to edit all "
"properties of an existing Propagation trial, except its type."
msgstr ""

#: ../../propagations.rst:34
msgid ""
"In the case of a seed propagation trial, you have a pollen parent, and a "
"seed parent. You should always associate the Propagation trial to the "
"seed parent."
msgstr ""

#: ../../propagations.rst:38
msgid ""
"In Ghini-1.0 you specify the pollen parent plant in the \"Notes\" field, "
"while Ghini-1.1 has a (relation) field for it. According to ITF2, there "
"might be cases in seed propagation trials where it is not known which "
"Plant plays which role. Again, in Ghini-1.0 you should use a note to "
"indicate whether this is the case, Ghini-1.1 has a (boolean) field "
"indicating whether this is the case."
msgstr ""

#: ../../propagations.rst:47
msgid "Using a Propagation"
msgstr ""

#: ../../propagations.rst:49
msgid "A Propagation trial may be successful and result in a new Accession."
msgstr ""

#: ../../propagations.rst:51
msgid ""
"Ghini helps you reflect this in the database: create a new Accession, "
"immediately switch to the Source tab and select \"Garden Propagation\" in"
" the (admittedly somewhat misleading) Contact field."
msgstr ""

#: ../../propagations.rst:55
msgid ""
"Start typing the plant number and a list of matching plants with "
"propagation trials will appear for you to select from."
msgstr ""

#: ../../propagations.rst:58
msgid ""
"Select the plant, and the list of accessed and unaccessed propagation "
"trials will appear in the lower half of the window."
msgstr ""

#: ../../propagations.rst:61
msgid ""
"Select a still unaccessed propagation trial from the list and click on Ok"
" to complete the operation."
msgstr ""

#: ../../propagations.rst:64
msgid ""
"Using the data from the Propagation trial, Ghini completes some of the "
"fields in the General tab: Taxon name, Type of material, and possibly "
"Provenance. You will be able to edit these fields, but please note that "
"the software will not prevent introducing conceptual inconsistencies in "
"your database."
msgstr ""

#: ../../propagations.rst:70
msgid "You can associate a Propagation trial to only one Accession."
msgstr ""

#: ../../report.rst:2
msgid "Generating reports"
msgstr ""

#: ../../report.rst:4
msgid ""
"A database without exporting facilities is of little use.  Ghini lets you"
" export your data in table format (open them in your spreadsheet editor "
"of choice), as labels (to be printed or engraved), as html pages or pdf "
"or postscript documents."
msgstr ""

#: ../../report.rst:10
msgid "The Report Tool"
msgstr ""

#: ../../report.rst:12
msgid ""
"You activate the Report Tool from the main menu: "
":menuselection:`Tools-->Report`.  The Report Tools acts on a selection, "
"so first select something, then start the Report Tool."
msgstr ""

#: ../../report.rst:15
msgid "Report on the whole collection."
msgstr ""

#: ../../report.rst:18
msgid ""
"To produce a report on your whole plant collection, a shortcut would be "
"from the home screen, to click on the ``Families: in use`` cell."
msgstr ""

#: ../../report.rst:21
msgid ""
"If your focus is more on the garden location than on taxonomy and "
"accessions, you would click on the ``Locations: total`` cell."
msgstr ""

#: ../../report.rst:24
msgid ""
"Reports are produced by a report engine, making use of a report template."
"  Ghini relies upon two different report engines (Mako & XSL), and offers"
" several report templates, meant as usable examples."
msgstr ""

#: ../../report.rst:27
msgid ""
"Choose the report you need, specify parameters if required, and produce "
"the report.  Ghini will open the report in the associated application."
msgstr ""

#: ../../report.rst:30
msgid ""
"Configuring report templates, that's a task for who installs and "
"configures ghini at your institution. Basically, you create a template "
"name, indicating the report engine and specifying the template.  "
"Configured templates are static, once configured you are not expected to "
"alter them.  Only the special ``**scratch**`` template can be modified on"
" the fly."
msgstr ""

#: ../../report.rst:35
msgid ""
"The remainder of this page provides technical information and links "
"regarding the formatter engines, and gives hints on writing report "
"templates.  Writing templates comes very close to writing a computer "
"program, and that's beyond the scope of this manual, but we have hints "
"that will definitely be useful to the interested reader."
msgstr ""

#: ../../report.rst:42
msgid "Using the Mako Report Formatter"
msgstr ""

#: ../../report.rst:44
msgid ""
"The Mako report formatter uses the Mako template language for generating "
"reports. More information about Mako and its language can be found at "
"`makotemplates.org <http://www.makotemplates.org>`_."
msgstr ""

#: ../../report.rst:48
msgid ""
"The Mako templating system should already be installed on your computer "
"if Ghini is installed."
msgstr ""

#: ../../report.rst:51
msgid ""
"Creating reports with Mako is similar in the way that you would create a "
"web page from a template.  It is much simpler than the XSL Formatter(see "
"below) and should be relatively easy to create template for anyone with a"
" little but of programming experience."
msgstr ""

#: ../../report.rst:56
msgid ""
"The template generator will use the same file extension as the template "
"which should indicate the type of output the template with create.  For "
"example, to generate an HTML page from your template you should name the "
"template something like `report.html`.  If the template will generate a "
"comma separated value file you should name the template `report.csv`."
msgstr ""

#: ../../report.rst:63
msgid ""
"The template will receive a variable called `values` which will contain "
"the list of values in the current search."
msgstr ""

#: ../../report.rst:66
msgid ""
"The type of each value in `values` will be the same as the search domain "
"used in the search query.  For more information on search domains see "
":ref:`search-domains`."
msgstr ""

#: ../../report.rst:70
msgid ""
"If the query does not have a search domain then the values could all be "
"of a different type and the Mako template should prepared to handle them."
msgstr ""

#: ../../report.rst:76
msgid "Using the XSL Report Formatter"
msgstr ""

#: ../../report.rst:78
msgid ""
"The XSL report formatter requires an XSL to PDF renderer to convert the "
"data to a PDF file. Apache FOP is is a free and open-source XSL->PDF "
"renderer and is recommended."
msgstr ""

#: ../../report.rst:82
msgid ""
"If using Linux, Apache FOP should be installable using your package "
"manager.  On Debian/Ubuntu it is installable as ``fop`` in Synaptic or "
"using the following command::"
msgstr ""

#: ../../report.rst:90
msgid "Installing Apache FOP on Windows"
msgstr ""

#: ../../report.rst:92
msgid ""
"You have two options for installing FOP on Windows. The easiest way is to"
" download the prebuilt `ApacheFOP-0.95-1-setup.exe "
"<http://code.google.com/p/apache-fop-"
"installer/downloads/detail?name=ApacheFOP-0.95-1-setup.exe&can=2&q=#makechanges>`_"
" installer."
msgstr ""

#: ../../report.rst:95
msgid ""
"Alternatively you can download the `archive "
"<http://www.apache.org/dist/xmlgraphics/fop/binaries/>`_.  After "
"extracting the archive you must add the directory you extracted the "
"archive to to your PATH environment variable."
msgstr ""

#: ../../searching.rst:4
msgid "Searching in Ghini"
msgstr ""

#: ../../searching.rst:6
msgid ""
"Searching allows you to view, browse and create reports from your data. "
"You can perform searches by either entering the queries in the main "
"search entry or by using the Query Builder to create the queries for you."
" The results of Ghini searches are listed in the main window."
msgstr ""

#: ../../searching.rst:13
msgid "Search Strategies"
msgstr ""

#: ../../searching.rst:15
msgid "Ghini offers four distinct search strategies:"
msgstr ""

#: ../../searching.rst:17
msgid "by value — in all domains;"
msgstr ""

#: ../../searching.rst:18
msgid "by expression — in a few implicit fields in one explicit domain;"
msgstr ""

#: ../../searching.rst:19
msgid "by query — in one domain;"
msgstr ""

#: ../../searching.rst:20
msgid "by binomial name — only searches the Species domain."
msgstr ""

#: ../../searching.rst:22
msgid ""
"All search strategies —with the notable exception of the binomial name "
"search— are case insensitive."
msgstr ""

#: ../../searching.rst:27
msgid "Search by Value"
msgstr ""

#: ../../searching.rst:29
msgid ""
"Search by value is the simplest way to search. You enter one or more "
"strings and see what matches. The result includes objects of any type "
"(domain) where one or more of its fields contain one or more of the "
"search strings."
msgstr ""

#: ../../searching.rst:33
msgid ""
"You don't specify the search domain, all are included, nor do you "
"indicate which fields you want to match, this is implicit in the search "
"domain."
msgstr ""

#: ../../searching.rst:36
msgid ""
"The following table helps you understand the results and guides you in "
"formulating your searches."
msgstr ""

#: ../../searching.rst:42
msgid "search domain overview"
msgstr ""

#: ../../searching.rst:44
msgid "name and shorthands"
msgstr ""

#: ../../searching.rst:44
msgid "field"
msgstr ""

#: ../../searching.rst:44
msgid "result type"
msgstr ""

#: ../../searching.rst:49 ../../searching.rst:50 ../../searching.rst:54
#: ../../searching.rst:56
msgid "name"
msgstr ""

#: ../../searching.rst:59
msgid ""
"Examples of searching by value would be: Maxillaria, Acanth, 2008.1234, "
"2003.2.1, indica."
msgstr ""

#: ../../searching.rst:62
msgid ""
"Unless explicitly quoted, spaces separate search strings. For example if "
"you search for ``Block 10`` then Ghini will search for the strings Block "
"and 10 and return all the results that match either of these strings. If "
"you want to search for Block 10 as one whole string then you should quote"
" the string like ``\"Block 10\"``."
msgstr ""

#: ../../searching.rst:68
msgid "× Composite Primary Keys"
msgstr ""

#: ../../searching.rst:71
msgid ""
"A **species** epithet means little without the corresponding genus, "
"likewise a **planting** code is unique only within the accession to which"
" it belongs.  In database theory terminology, epithet and code are not "
"sufficient to form a **primary key** for respectively species and "
"planting. These domains need a **composite** primary key."
msgstr ""

#: ../../searching.rst:78
msgid ""
"Search by value lets you look for **plantings** by their complete "
"planting code, which includes the accession code. Taken together, "
"Accession code and Planting code do provide a **composite primary key** "
"for plantings.  For **species**, we have introduced the binomial search, "
"described below."
msgstr ""

#: ../../searching.rst:86
msgid "Search by Expression"
msgstr ""

#: ../../searching.rst:88
msgid ""
"Searching with expression gives you a little more control over what you "
"are searching for. You narrow the search down to a specific domain, the "
"software defines which fields to search within the domain you specified."
msgstr ""

#: ../../searching.rst:92
msgid ""
"An expression is built as ``<domain> <operator> <value>``. For example "
"the search: ``gen=Maxillaria`` would return all the genera that match the"
" name Maxillaria. In this case the domain is ``gen``, the operator is "
"``=`` and the value is ``Maxillaria``."
msgstr ""

#: ../../searching.rst:97
msgid ""
"The above search domain overview table tells you the names of the search "
"domains, and, per search domain, which fields are searched."
msgstr ""

#: ../../searching.rst:100
#, python-format
msgid ""
"The search string ``loc like block%`` would return all the Locations for "
"which name or code start with \"block\".  In this case the domain is "
"``loc`` (a shorthand for ``location``), the operator is ``like`` (this "
"comes from SQL and allows for \"fuzzy\" searching), the value is "
"``block%``, the implicitly matched fields are ``name`` and ``code``.  The"
" percent sign is used as a wild card so if you search for ``block%`` then"
" it searches for all values that start with ``block``.  If you search for"
" ``%10`` it searches for all values that end in ``10``.  The string "
"``%ck%10`` would search for all value that contain ``ck`` and end in "
"``10``."
msgstr ""

#: ../../searching.rst:110
msgid "When a query takes ages to complete"
msgstr ""

#: ../../searching.rst:113
msgid ""
"You give a query, it takes time to compute, the result contains "
"unreasonably many entries.  This happens when you intend to use a "
"strategy, but your strings do not form a valid expression.  In this case "
"Ghini falls back to *search by value*. For example the search string "
"``gen lik maxillaria`` will search for the strings ``gen``, ``lik``, and "
"``maxillaria``, returning all that match at least one of the three "
"criteria."
msgstr ""

#: ../../searching.rst:122
msgid "Binomial search"
msgstr ""

#: ../../searching.rst:124
msgid ""
"You can also perform a search in the database if you know the species, "
"just by placing a few initial letters of genus and species epithets in "
"the search engine, correctly capitalized, i.e.: **Genus epithet** with "
"one leading capital letter, **Species epithet** all lowercase."
msgstr ""

#: ../../searching.rst:129
msgid "This way you can perform the search ``So ha``."
msgstr ""

#: ../../searching.rst:131
msgid "These would be the initials for Solanum hayesii, or Solanum havanense."
msgstr ""

#: ../../searching.rst:133
msgid ""
"Binomial search comes to compensate the limited usefulness of the above "
"search by expression when trying to look for a species."
msgstr ""

#: ../../searching.rst:136
msgid ""
"It is the correct capitalization **Xxxx xxxx** that informs the software "
"of your intention to perform a binomial search.  The software's second "
"guess will be a search by value, which will possibly result in far more "
"matches than you had expected."
msgstr ""

#: ../../searching.rst:141
msgid ""
"The similar request ``so ha`` will return, in a fresh install, over 3000 "
"objects, starting at Family \"Acalyp(**ha**)ceae\", ending at Geography "
"\"Western (**So**)uth America\"."
msgstr ""

#: ../../searching.rst:147
msgid "Search by Query"
msgstr ""

#: ../../searching.rst:149
msgid ""
"Queries allow the most control over searching. With queries you can "
"search across relations, specific columns, combine search criteria using "
"boolean operators like ``and``, ``or``, ``not`` (and their shorthands "
"``&&``, ``||``, ``!``), enclose them in parentheses, and more."
msgstr ""

#: ../../searching.rst:154
msgid ""
"Please contact the authors if you want more information, or if you "
"volunteer to document this more thoroughly.  In the meanwhile you may "
"start familiarizing yourself with the core structure of Ghini's database."
msgstr ""

#: ../../searching.rst:162
msgid "A few examples:"
msgstr ""

#: ../../searching.rst:164
msgid "plantings of family Fabaceae in location Block 10::"
msgstr ""

#: ../../searching.rst:168
msgid "locations that contain no plants::"
msgstr ""

#: ../../searching.rst:172
msgid ""
"accessions associated to a species of known binomial name (e.g.: "
"Mangifera indica)::"
msgstr ""

#: ../../searching.rst:176
msgid "accessions we propagated in the year 2016::"
msgstr ""

#: ../../searching.rst:180
msgid "accessions we modified in the last three days::"
msgstr ""

#: ../../searching.rst:184
msgid ""
"Searching with queries requires some knowledge of a little syntax and an "
"idea of the extensive Ghini database table structure. Both you acquire "
"with practice, and with the help of the Query Builder."
msgstr ""

#: ../../searching.rst:190
msgid "The Query Builder"
msgstr ""

#: ../../searching.rst:192
msgid ""
"Ghini offers a Query Builder, that helps you build complex search queries"
" through a point and click interface.  To open the Query Builder click "
"the |querybuilder| icon to the left of the search entry or select "
":menuselection:`Tools-->Query Builder` from the menu."
msgstr ""

#: ../../searching.rst:201
msgid ""
"A window will show up, which will lead you through all steps necessary to"
" construct a correct query that is understood by Ghini's Query Search "
"Strategy."
msgstr ""

#: ../../searching.rst:210
msgid ""
"First of all you indicate the search domain, this will allow the Query "
"Builder complete its graphical user interface, then you add as many "
"logical clauses as you need, connecting them with a ``and`` or ``or`` "
"binary operator."
msgstr ""

#: ../../searching.rst:215
msgid ""
"Each clause is formed of three parts: a property that can be reached from"
" the starting search domain, a comparison operator that you select from "
"the drop-down list, a value that you can either type or select from the "
"list of valid values for the field."
msgstr ""

#: ../../searching.rst:220
msgid ""
"Add as many search properties as you need, by clicking on the plus sign. "
"Select and/or next to the property name to choose how the clauses will be"
" combined in the search query."
msgstr ""

#: ../../searching.rst:224
msgid "When you are done building your query click OK to perform the search."
msgstr ""

#: ../../searching.rst:226
msgid ""
"At this point the Query Builder writes the query in the search entry, and"
" executes it. You may now edit the string as if you had typed it "
"yourself. Notice how the left hand side values are interpreted by the "
"query builder and enclosed in single quotes if recognized as strings, "
"left alone if they look like numbers or the two reserved words ``None`` "
"and ``Empty``. You may edit the query and insert quotes if you need them,"
" eg if you need to literally look for the string ``Empty``."
msgstr ""

#: ../../searching.rst:234
msgid ""
"``None`` is the value of an empty field. It is not the same as the zero "
"lenght string ``''`` nor the numeric ``0`` nor the boolean ``False`` nor "
"the set ``Empty``, it indicates that the field has no value at all."
msgstr ""

#: ../../searching.rst:238
msgid ""
"``Empty`` is the empty set. Being it a set, it can be matched against "
"sets (eg: plants of an accession, or accessions of a species), not "
"against elements (eg: quantity of a plant or description of a location). "
"However, the Query Builder does not let you choose a left hand side value"
" stopping at a set, it expects you to select a field. Choose just any "
"field: at the moment of producing the query, when the Query Builder meets"
" a clause with right hand side value the literal string ``Empty``, it "
"will drop the field name and let you compare the set on the left with "
"``Empty`` on the right."
msgstr ""

#: ../../searching.rst:247
msgid ""
"We have no literals ``False`` and ``True``. These are typed values, and "
"the Query Builder does not know how to produce them. Instead of ``False``"
" type ``0``, and instead of ``True`` type ``1``."
msgstr ""

#: ../../searching.rst:253
msgid "Query Grammar"
msgstr ""

#: ../../searching.rst:255
msgid ""
"For those who don't fear a bit of formal precision, the following BNF "
"code gives you a rather precise idea of the grammar implemented by the "
"Query Search Strategy.  Some grammatical categories are informally "
"defined; any missing ones are left to your fertile imagination; literals "
"are included in single quotes; the grammar is mostly case insensitive, "
"unless otherwise stated::"
msgstr ""

#: ../../searching.rst:318
msgid ""
"Please be aware that Ghini's Query language is quite a bit more complex "
"than what the Query Builder can produce: Queries you can build with the "
"Query Builder form a proper subset of the queries recognized by the "
"software::"
msgstr ""

#: ../../started.rst:2
msgid "Initial Configuration"
msgstr ""

#: ../../started.rst:4
msgid ""
"After a successful installation, more complex organizations will need "
"configure their database, and configure Ghini according to their database"
" configuration. This page focuses on this task. If you don't know what "
"this is about, please do read the part relative to SQLite."
msgstr ""

#: ../../started.rst:12
msgid "Should you SQLite?"
msgstr ""

#: ../../started.rst:14
msgid ""
"Is this the first time you use Ghini, are you going to work in a stand-"
"alone setting, you have not the faintest idea how to manage a database "
"management system? If you answered yes to any of the previous, you "
"probably better stick with SQLite, the easy, fast, zero-administration "
"file-based database."
msgstr ""

#: ../../started.rst:20
msgid ""
"With SQLite, you do not need any preparation and you can continue with "
"`connecting`_."
msgstr ""

#: ../../started.rst:23
msgid ""
"On the other hand, if you want to connect more than one bauble "
"workstation to the same database, or if you want to make your data "
"available for other clients, as could be a web server in a LAMP setting, "
"you should consider keeping your database in a database management system"
" like `PostgreSQL <http://www.postgresql.org>`_ or `MySQL/MariaDB "
"<https://mariadb.org/>`_, both supported by Ghini."
msgstr ""

#: ../../started.rst:30
msgid ""
"When connecting to a database server as one of the above, you have to "
"manually do the following: Create at least one user; Create your "
"database; Give at least one user full permissions on your database; If "
"you plan having more database users: Give one of your users the "
"``CREATEROLE`` privilege; Consider the user with the ``CREATEROLE`` "
"privilege as a super-user, not meant to handle data directly; Keep your "
"super-user credentials in a very safe place."
msgstr ""

#: ../../started.rst:38
msgid ""
"When this is done, Ghini will be able to proceed, creating the tables and"
" importing the default data set.  The process is database-dependent and "
"it falls beyond the scope of this manual."
msgstr ""

#: ../../started.rst:42
msgid ""
"If you already got the chills or sick at your stomach, no need to worry, "
"just stick with SQLite, you do not miss on features nor performance."
msgstr ""

#: ../../started.rst:45
msgid "Some more hints if you need PostgreSQL"
msgstr ""

#: ../../started.rst:48
msgid ""
"Start simple, don't do all at the same time. Review `the online manual "
"<https://www.postgresql.org/docs/9.4/static/index.html>`_, or download "
"and study `the offline version "
"<https://www.postgresql.org/files/documentation/pdf/9.4/postgresql-9.4-A4.pdf>`_."
msgstr ""

#: ../../started.rst:53
msgid ""
"As said above, create a database, a user, make this user the owner of the"
" database, decide whether you're going to need multiple users, and "
"preferably reserve a user for database and normal user creation. This "
"super-user should be your only user with ``CREATEROLE`` privilege."
msgstr ""

#: ../../started.rst:59
msgid ""
"All normal users will need all privileges on all tables and sequences, "
"something you can do from the :menuselection:`Tools-->Users` menu.  If "
"you have any difficulty, please `open an issue "
"<https://github.com/Ghini/ghini.desktop/issues/new>`_ about it."
msgstr ""

#: ../../started.rst:65
msgid ""
"Connect using the ``psql`` interactive terminal.  Create a ``~/.pgpass`` "
"file (read more about it in `the manual "
"<https://www.postgresql.org/docs/9.4/static/libpq-pgpass.html>`_), tweak "
"your ``pg_hba.conf`` and ``postgresql.conf`` files, until you can connect"
" using the command::"
msgstr ""

#: ../../started.rst:73
msgid "With the above setup, connecting from ghini will be an obvious task."
msgstr ""

#: ../../started.rst:79
msgid "Connecting to a database"
msgstr ""

#: ../../started.rst:81
msgid ""
"When you start Ghini the first thing that comes up is the connection "
"dialog."
msgstr ""

#: ../../started.rst:84
msgid ""
"Quite obviously, if this is the first time you start Ghini, you have no "
"connections yet and Ghini will alert you about it."
msgstr ""

#: ../../started.rst:89
msgid ""
"This alert will show at first activation and also in the future if your "
"connections list becomes empty. As it says: click on **Add** to create "
"your first connection."
msgstr ""

#: ../../started.rst:95
msgid ""
"Just insert a name for your connection, something meaningful you "
"associate with the collection to be represented in the database (for "
"example: “my home garden”), and click on **OK**. You will be back to the "
"previous screen, but your connection name will be selected and the "
"Connection Details will have expanded."
msgstr ""

#: ../../started.rst:103
msgid "**specify the connection details**"
msgstr ""

#: ../../started.rst:105
msgid ""
"If you do not know what to do here, Ghini will help you stay safe. "
"Activate the **Use default locations** check box and create your first "
"connection by clicking on **Connect**."
msgstr ""

#: ../../started.rst:108
msgid ""
"You may safely skip the remainder of this section for the time being and "
"continue reading to the following section."
msgstr ""

#: ../../started.rst:111
msgid "**fine-tune the connection details**"
msgstr ""

#: ../../started.rst:113
msgid ""
"By default Ghini uses the file-based SQLite database.  During the "
"installation process you had the choice (and you still have after "
"installation), to add database connectors other than the default SQLite."
msgstr ""

#: ../../started.rst:117
msgid ""
"In this example, Ghini can connect to SQLite, PostgreSQL and MySQL, but "
"no connector is available for Oracle or MS SQL Server."
msgstr ""

#: ../../started.rst:122
msgid ""
"If you use SQLite, all you really need specify is the connection name. If"
" you let Ghini use the default filename then Ghini creates a database "
"file with the same name as the connection and ``.db`` extension, and a "
"pictures folder with the same name and no extension, both in "
"``~/.bauble`` on Linux/MacOSX or in ``AppData\\Roaming\\Bauble`` on "
"Windows."
msgstr ""

#: ../../started.rst:128
msgid ""
"Still with SQLite, you might have received or downloaded a bauble "
"database, and you want to connect to it. In this case you do not let "
"Ghini use the default filename, but you browse in your computer to the "
"location where you saved the Ghini SQLite database file."
msgstr ""

#: ../../started.rst:133
msgid ""
"If you use a different database connector, the dialog box will look "
"different and it will offer you the option to fine tune all parameters "
"needed to connect to the database of your choice."
msgstr ""

#: ../../started.rst:137
msgid ""
"If you are connecting to an existing database you can continue to :ref"
":`editing-and-inserting-data` and subsequently :ref:`searching-in-ghini`,"
" otherwise read on to the following section on initializing a database "
"for Ghini."
msgstr ""

#: ../../started.rst:142
msgid ""
"If you plan to associate pictures to plants, specify also the *pictures "
"root* folder. The meaning of this is explained in further detail at :ref"
":`plant-pictures` in :ref:`editing-and-inserting-data`."
msgstr ""

#: ../../started.rst:146
msgid "A sample SQLite database"
msgstr ""

#: ../../started.rst:149
msgid ""
"Indeed we have a sample database, from our pilot garden \"El Cuchubo\", "
"in Mompox, Colombia.  We have a zipped `sample database for ghini-1.0 "
"<http://www.ghini.me/cuchubo-1.0.zip>`_."
msgstr ""

#: ../../started.rst:153
msgid ""
"Download and unzip it to the location of your choice, then start Ghini, "
"create a connection named possibly ``cuchubo``, or ``sample``, and edit "
"the Connection Details.  Keep the connection type at the default SQLite, "
"but instead of using the default locations, make sure that Filename "
"points to your unpacked ``cuchubo.db`` file."
msgstr ""

#: ../../started.rst:162
msgid "Initialize a database"
msgstr ""

#: ../../started.rst:164
msgid ""
"First time you open a connection to a database which had never been seen "
"by Ghini before, Ghini will first display an alert:"
msgstr ""

#: ../../started.rst:169
msgid "immediately followed by a question:"
msgstr ""

#: ../../started.rst:173
msgid ""
"Be careful when manually specifying the connection parameters: the values"
" you have entered may refer to an existing database, not intended for use"
" with Ghini. By letting Ghini initialize a database, the database will be"
" emptied and all of its content be lost."
msgstr ""

#: ../../started.rst:178
msgid ""
"If you are sure you want to create a database at this connection then "
"select \"Yes\". Ghini will then start creating the database tables and "
"importing the default data. This can take a minute or two so while all of"
" the default data is imported into the database so be patient."
msgstr ""

#: ../../started.rst:183
msgid ""
"Once your database has been created, configured, initialized, you are "
"ready to start :ref:`editing-and-inserting-data` and subsequently :ref"
":`searching-in-bauble`."
msgstr ""

#: ../../statements.rst:2
msgid "Mission & Vision"
msgstr ""

#: ../../statements.rst:4
msgid ""
"Here we state who we are, what we think of our work, what you can expect "
"of this project."
msgstr ""

#: ../../statements.rst:8
msgid "Who is behind Ghini"
msgstr ""

#: ../../statements.rst:10
msgid ""
"Ghini is a small set of programs, meant to let collection managers manage"
" their collection also digitally."
msgstr ""

#: ../../statements.rst:13
msgid ""
"Ghini was born back in 2004 as Bauble, at the Belize Botanical Garden. It"
" was later adapted to the needs of a few more gardens. Brett Adams, the "
"original programmer, made this software a commons, by releasing it under "
"a GPL license."
msgstr ""

#: ../../statements.rst:18
msgid ""
"After years of stagnation Mario Frasca revived the project, and rebranded"
" it as Ghini in honour of Luca Ghini, founder of the first European "
"botanic garden and herbarium. Mario Frasca started advocating, "
"travelling, distributing, developing, expanding, redefining, documenting "
"it, and it is now Mario Frasca writing this, looking for users, "
"requesting feedback."
msgstr ""

#: ../../statements.rst:24
msgid ""
"Behind Ghini there's not only one developer, but a small but growing "
"global users community."
msgstr ""

#: ../../statements.rst:27
msgid ""
"Translations are provided by volunteers who mostly stay behind the "
"scenes, translating missing terms or sentences, and disappearing again."
msgstr ""

#: ../../statements.rst:30
msgid ""
"To make things clearer when we speak of Ghini, but should—and in this "
"document we will—indicate whether it's Ghini(the software), or Ghini(the "
"people), unless obviously we mean both things."
msgstr ""

#: ../../statements.rst:35
msgid "Mission"
msgstr ""

#: ../../statements.rst:37
msgid ""
"Our goal as Ghini Software is to provide free software, of proven "
"quality, and to let anybody install it if they feel like it.  We also aim"
" at facilitating access to functional knowledge, in the form of "
"documentation or by laying the contact among users or between users and "
"software professionals."
msgstr ""

#: ../../statements.rst:43
msgid ""
"All our sources, software and documentation, are open and free, and we "
"welcome and stimulate people to use and to contribute.  To facilitate "
"community forming, all our platforms can be consulted without "
"registration. Registration is obviously required if you want to "
"contribute."
msgstr ""

#: ../../statements.rst:48
msgid ""
"Ghini welcomes the formation of groups of users, bundling forces to "
"define and finance further development, and we welcome developers "
"contributing software, from any corner in the world, and we stimulate and"
" help them comply with the high quality requirements, before we accept "
"the contributed code in the software sources."
msgstr ""

#: ../../statements.rst:55
msgid "Vision"
msgstr ""

#: ../../statements.rst:57
msgid ""
"The Vision serves to indicate the way ahead and projects a future image "
"of what we want our organization to be, in a realistic and attractive "
"way.  It serves as motivation because it visualizes the challenge and "
"direction of necessary changes in order to grow and prosper."
msgstr ""

#: ../../statements.rst:62
msgid "by the year 2020"
msgstr ""

#: ../../statements.rst:63
msgid "reference point"
msgstr ""

#: ../../statements.rst:64
msgid "community"
msgstr ""

#: ../../statements.rst:65
msgid "development"
msgstr ""

#: ../../statements.rst:66
msgid "integration with web portal"
msgstr ""

#: ../../statements.rst:67
msgid "geographic information"
msgstr ""

#: ../../tagging.rst:2
msgid "Tagging"
msgstr ""

#: ../../tagging.rst:4
msgid ""
"Tagging is an easy way to give context to an object or create a "
"collection of object that you want to recall later."
msgstr ""

#: ../../tagging.rst:7
msgid ""
"The power in this tagging action is that you can share this selection "
"with colleagues, who can act on it, without the need to redo all your "
"collecting work."
msgstr ""

#: ../../tagging.rst:11
msgid ""
"For example if you need to print accession labels of otherwise unrelated "
"plants, you can group the objects by tagging them with the string "
"\"relabel\". You or one of your colleagues can then select \"relabel\" "
"from the tags menu, the search view will show all the objects you tagged,"
" and performing a report will act on the tagged objects."
msgstr ""

#: ../../tagging.rst:17
msgid ""
"Tagging acts on the active selection, that is the items in the search "
"results which you have selected."
msgstr ""

#: ../../tagging.rst:20
msgid ""
"Please remember: you can select all result rows by pressing ``Ctrl-A``, "
"you can deselect everything by pressing ``Ctrl-Shift-A``, you can toggle "
"tagging of a single row by ``Ctrl-Mouse click`` on it."
msgstr ""

#: ../../tagging.rst:24
msgid "Once you have an active selection, tagging can be done in two ways:"
msgstr ""

#: ../../tagging.rst:27
msgid "dialog box tagging"
msgstr ""

#: ../../tagging.rst:29
msgid ""
"Press ``Ctrl-T`` or select :menuselection:`Tag-->Tag Selection` from the "
"menu, this activates a window where you can create new tags and apply any"
" existing tag to the selection."
msgstr ""

#: ../../tagging.rst:33
msgid "The tag window is composed of three parts:"
msgstr ""

#: ../../tagging.rst:35
msgid ""
"The upper part mentions the list of objects in your active selection. "
"This is the list of object of which you are editing the tags;"
msgstr ""

#: ../../tagging.rst:37
msgid ""
"The middle part has a list of all available tags, with a checkbox that "
"you can activate for applying the tag to or removing the tag from the "
"selection;"
msgstr ""

#: ../../tagging.rst:40
msgid ""
"The lower part only holds a link to new tag creation, and the Ok button "
"for closing the dialog box."
msgstr ""

#: ../../tagging.rst:43
msgid ""
"If, when opening the tag dialog box, the active selection holds multiple "
"items, then only the tags that are common to all the selected items will "
"have a check next to it.  Tags that only apply to a proper subset of the "
"active selection will show with an 'undecided' status.  Tags that don't "
"apply to any object in the active selection will show blank."
msgstr ""

#: ../../tagging.rst:49
msgid ""
"The most recently created tag, or the most recently selected tag becomes "
"the active tag, and it shows with a check next to it in the tags menu."
msgstr ""

#: ../../tagging.rst:53
msgid "windowless tagging"
msgstr ""

#: ../../tagging.rst:55
msgid ""
"Once you have an active tag, pressing ``Ctrl-Y`` applies the active tag "
"to all objects in the active selection.  ``Ctrl-Shift-Y`` removes the "
"active tag from all objects in the active selection."
msgstr ""

#: ../../template-letters.rst:2
msgid "Template Letters"
msgstr ""

#: ../../template-letters.rst:4
msgid ""
"The reader getting to this point in the documentation probably understood"
" that this Ghini project is above all a very open and collaborative "
"project."
msgstr ""

#: ../../template-letters.rst:7
msgid ""
"Here in this page you find some template letters, used to welcome new "
"users, or that you can correct, print, and go with it to a garden, and "
"propose them to adopt Ghini, or share with a group of your local friends,"
" so you can make Ghini become a (voluntary, or paid) part-time job for "
"you."
msgstr ""

#: ../../template-letters.rst:12
msgid "Dear conservator or scientist,"
msgstr ""

#: ../../template-letters.rst:14
msgid ""
"You are reading Ghini's presentation letter. Ghini is a libre software "
"project on GitHub, focusing on botany. Brought to you by a small "
"community of coders, botanists, translators, and supported by a few "
"institutions around the world, among which, gardens that have adopted it "
"for all their collection management needs."
msgstr ""

#: ../../template-letters.rst:19
msgid ""
"The Ghini family is a software suite composed of standalone programs, "
"data servers and handheld clients, for data management, and publication:"
msgstr ""

#: ../../template-letters.rst:24
msgid "Ghini's core, ``ghini.desktop``, lets you"
msgstr ""

#: ../../template-letters.rst:26
msgid "enter and correct your data"
msgstr ""

#: ../../template-letters.rst:27
msgid "navigate its links,"
msgstr ""

#: ../../template-letters.rst:28
msgid "produce reports"
msgstr ""

#: ../../template-letters.rst:29
msgid "import and or export using several standard or ad-hoc formats"
msgstr ""

#: ../../template-letters.rst:30
msgid "review your taxonomy using online sources"
msgstr ""

#: ../../template-letters.rst:32
msgid ""
"all according best practices suggested by top gardens, formalized in "
"standard formats like ABCD, ITF2, but also as elaborated by our "
"developers, based on the feedback of Ghini users."
msgstr ""

#: ../../template-letters.rst:36
msgid ""
"``ghini.desktop`` is developed and continously tested on GNU/Linux, but "
"runs equally well on Windows, or OSX. [1]"
msgstr ""

#: ../../template-letters.rst:39
msgid ""
"``ghini.pocket`` is your full time garden companion, an Android app "
"installed from the Play Store,"
msgstr ""

#: ../../template-letters.rst:42
msgid "assisting you in collecting or correcting data while in the field,"
msgstr ""

#: ../../template-letters.rst:43
msgid "associate pictures to your plants, and verify taxonomic information."
msgstr ""

#: ../../template-letters.rst:44
msgid ""
"Import your collected data into the desktop client when back in the "
"office,"
msgstr ""

#: ../../template-letters.rst:46
msgid ""
"``ghini.pocket`` reduces the time spent in front of your desktop PC to a "
"true minimum."
msgstr ""

#: ../../template-letters.rst:48
msgid ""
"``ghini.web`` is a web server and a courtesy data hub service, offering "
"you world wide visibility: Export a selection of your data from your "
"desktop database, and handle it for publication to the Ghini project, and"
" we will include it at http://gardens.ghini.me/, at no cost while we're "
"able to do that, or for a guaranteed minimal amount of time if you are "
"able to support our hosting costs. ``ghini.web`` serves a world map to "
"help locate participating gardens, and within each garden, its "
"contributed georeferenced plants."
msgstr ""

#: ../../template-letters.rst:56
msgid ""
"``ghini.tour``, a geographic tour Android app aimed at visitors, using "
"OpenStreetMap as a base map, retrieving its data, gardens and virtual "
"panels, from the web data aggregator ``ghini.web``."
msgstr ""

#: ../../template-letters.rst:60
msgid ""
"All software within the Ghini family is either licensed GNU Public "
"License v2+ or v3+. It is a strong copyleft license.  In short, the GPL "
"translates the ethical scientific need to share knowledge, into legal "
"terms. If you want to read more about it, please refer to "
"https://www.gnu.org/licenses/copyleft.html"
msgstr ""

#: ../../template-letters.rst:65
msgid ""
"Ghini's idea about knowledge and software ownership is that software is "
"procedural knowledge and as such, should be made a \"commons\": With "
"software as a commons, \"libre software\" and more specifically "
"\"Copylefted software\", you not only get the source code, you receive "
"the right to adapt it, and the invitation to study and learn from it, and"
" to share it, both share forward to colleagues, and share back to the "
"source.  With proprietary software, you are buying your own ignorance, "
"and with that, your dependency."
msgstr ""

#: ../../template-letters.rst:72
msgid ""
"This fancy term \"copyleft\" instead of just \"libre software\", means "
"the software you received is libre software with one extra freedom, "
"guaranteeing every right you were granted upon receiving the software is "
"never lost."
msgstr ""

#: ../../template-letters.rst:76
msgid ""
"With copylefted software you are free —actually welcome— to employ local "
"software developers in your neighbourhood to alter the software according"
" to your needs, please do this on GitHub, fork the code, develop just as "
"openly as the common practice within Ghini, and whenever you want, open a"
" pull request so your edits can be considered for inclusion in the main "
"branch. Ghini is mostly continuously unit tested, so before your code is "
"added to the main branch, it should follow our quality guidelines for "
"contributions. With libre software you acquire freedom and contribute to "
"it, something that earns you visibility: Your additions stays yours, you "
"share them back to the community, and will see them completed and made "
"better by others. Having your code added to the main branch simplifies "
"your upgrade procedure."
msgstr ""

#: ../../template-letters.rst:86
msgid ""
"You can also contribute to the software by helping translate it into your"
" native language. [5]"
msgstr ""

#: ../../template-letters.rst:88
msgid ""
"Some videos are published on YouTube, highlighting some of the software "
"capabilities. [6]"
msgstr ""

#: ../../template-letters.rst:90
msgid ""
"Share back with the community. Several developers have spent cumulatively"
" many thousand hours developing this software, and we're sharing with the"
" community. We hope by this to stimulate a community sentiment in whoever"
" starts using what we have produced."
msgstr ""

#: ../../template-letters.rst:94
msgid ""
"Thanks for your consideration; please let me know if you have any "
"questions,"
msgstr ""

#: ../../template-letters.rst:96
msgid ""
"In case you're interested in publishing your tree collection on the net, "
"I would be happy to include your plants, species, coordinates to "
"http://gardens.ghini.me. Georeferenced textual information panels are "
"also very welcome, all offered as a courtesy: We're still defining the "
"offer. The idea behind this is allowing visitors to explore aggregated "
"garden collections, and the current focus is on trees."
msgstr ""

#: ../../template-letters.rst:103
#, python-format
msgid "A small example: http://gardens.ghini.me/#garden=Jardín%20el%20Cuchubo"
msgstr ""

#: ../../template-letters.rst:105
msgid "Mario Frasca MSc"
msgstr ""

#: ../../template-letters.rst:107
msgid "[1] http://ghini.readthedocs.io/ - http://ghini.github.io/"
msgstr ""

#: ../../template-letters.rst:108
msgid "[2] https://play.google.com/store/apps/details?id=me.ghini.pocket"
msgstr ""

#: ../../template-letters.rst:109
msgid "[3] http://gardens.ghini.me/"
msgstr ""

#: ../../template-letters.rst:110
msgid "[4] https://play.google.com/store/apps/details?id=me.ghini.tour"
msgstr ""

#: ../../template-letters.rst:111
msgid "[5] https://hosted.weblate.org/projects/ghini/#languages"
msgstr ""

#: ../../template-letters.rst:112
msgid ""
"[6] "
"https://www.youtube.com/playlist?list=PLtYRCnAxpinU_8WEDuRlgsYnNVe4J_4kv"
msgstr ""

#: ../../template-letters.rst:115
msgid "free botanic data management systems"
msgstr ""

#: ../../template-letters.rst:117
msgid ""
"Many institutions still consider software an investment, an asset that is"
" not to be shared with others, as if it was some economic good that can't"
" be duplicated, like gold."
msgstr ""

#: ../../template-letters.rst:120
msgid ""
"As of right now, very few copylefted programs exist for botanic data "
"management:"
msgstr ""

#: ../../template-letters.rst:122
msgid ""
"``ghini.desktop``, born as ``bauble.classic`` and made a commons by the "
"Belize Botanical Garden.  ``ghini.desktop`` has three more components, a "
"pocket data collecting Android app, a Node.js web server, aggregating "
"data from different gardens and presenting it geographically, again a "
"geographic tour app aimed at visitors using the web data aggregator as "
"its data source. You can find every Ghini component on GitHub: "
"http://github.com/Ghini"
msgstr ""

#: ../../template-letters.rst:129
msgid ""
"Specify 6 and 7, made a Commons by the Kansas University. A bit complex "
"to set up, very difficult to configure and tricky to update. The "
"institutions I've met who tried it, only the bigger ones, with in-house "
"software management capabilities manage to successfully use it. They use "
"it for very large collections. Specify is extremely generic, it adapts to"
" herbaria, seed collections, but also to collections of eggs, organic "
"material, fossils, preserved dead animals, possibly even viruses, I'm not"
" sure. It is this extreme flexibility that makes its configuration such a"
" complex task. Specify is also on GitHub: https://github.com/specify and "
"is licensed as GPLv2+."
msgstr ""

#: ../../template-letters.rst:138
msgid ""
"Botalista, a French/Swiss cooperation, is GPL as far as rumours go. Its "
"development has yet to go public."
msgstr ""

#: ../../template-letters.rst:141
#, python-format
msgid ""
"``bauble.web`` is an experimental web server by the author of "
"``bauble.classic``. ``bauble.classic`` has been included into Ghini, to "
"become ``ghini.desktop``. Bauble uses a very permissive license, making "
"it libre, but not copylefted. As much as 50% of bauble.web and possibly "
"30% of ghini.desktop is shared between the two projects. Bauble seems to "
"be stagnating, and has not yet reached a production-ready stage."
msgstr ""

#: ../../template-letters.rst:147
msgid ""
"``Taxasoft-BG``, by Eric Gouda, a Dutch botanist, specialist in "
"Bromeliaceae, collection manager at the Utrecht botanical garden.  It was"
" Mario Frasca who convinced Eric to publish what he was doing, licensing "
"it under the GPL, but the repository was not updated after 2016, April "
"13th and Eric forgot to explicitly specify the license.  You find it on "
"github: https://github.com/Ejgouda/Taxasoft-BG"
msgstr ""

#: ../../template-letters.rst:153
msgid ""
"``BG-Recorder``, by the BGCI, runs on Windows, and requires Access.  "
"Developed mostly between 1997 and 2003, it has not been maintained ever "
"since and isn't actively distributed by the BGCI.  I've not managed to "
"find a download link nor its license statement.  It is still mentioned as"
" *the free option* for botanic database management."
msgstr ""

#: ../../template-letters.rst:158
msgid ""
"Of the above, only ``ghini.desktop`` satisfies these conditions: "
"Copylefted, available, documented, maintained, easy to install and "
"configure.  Moreover: Cross platform and internationalized."
msgstr ""

#: ../../template-letters.rst:164
msgid "Welcome to Ghini/Bauble"
msgstr ""

#: ../../template-letters.rst:166
msgid "Dear new user,"
msgstr ""

#: ../../template-letters.rst:168
msgid "Welcome to Ghini/Bauble."
msgstr ""

#: ../../template-letters.rst:170
msgid ""
"As the maintainer, I have received your registration for "
"bauble.classic/ghini.desktop, many thanks for taking your time to fill in"
" the form."
msgstr ""

#: ../../template-letters.rst:173
msgid ""
"I see you are using bauble.classic-1.0.55, whereas 1.0.55 is the last "
"released version of bauble.classic, however, bauble.classic is now "
"unmaintained and superseded by the fully compatible, but slightly "
"aesthetically different ghini.desktop. Install it following the "
"instructions found at http://ghini.rtfd.io"
msgstr ""

#: ../../template-letters.rst:176
msgid ""
"The registration service says you're not yet using the newest Python2 "
"version available. As of 2018-05-01, that is 2.7.15. Using any older "
"version does not necessitate problems, but in case anything strange "
"happens, please update your Python (and PyGTK) before reporting any "
"errors."
msgstr ""

#: ../../template-letters.rst:178
msgid ""
"Also thank you for enabling the \"sentry\" errors and warnings handler. "
"With that enabled, Ghini/Bauble will send any error or warning you might "
"encounter to a central server, where a developer will be able to examine "
"it. If the warning was caused by an error in the software, its solution "
"will be present in a subsequent release of the software"
msgstr ""

#: ../../template-letters.rst:181
msgid ""
"If you haven't already, to enable the sentry and warnings handler, open "
"the \":config\" page in Ghini and double click on the row "
"\"bauble.use_sentry_client\"."
msgstr ""

#: ../../template-letters.rst:183
msgid ""
"I hope Ghini already matches your expectations, if this is not the case, "
"the whole Ghini community would be very thankful if you took the time to "
"report your experience with it."
msgstr ""

#: ../../template-letters.rst:187
msgid ""
"The above is one way to contribute to Ghini's development. Others are: - "
"contribute ideas, writing on the bauble google forum "
"(https://groups.google.com/forum/#!forum/bauble), - contribute "
"documentation, or translations "
"(https://hosted.weblate.org/projects/ghini/), - give private feedback, "
"writing to ghini@anche.no, - rate and discuss Ghini openly, and promote "
"its adoption by other institutions, - open an issue on GitHub "
"(https://github.com/Ghini/ghini.desktop/issues/), - contribute code on "
"GitHub (fork the project on (https://github.com/Ghini/ghini.desktop/), - "
"hire a developer and have a set of GitHub issues solved, per-haps your "
"own - let me include your garden on the still experimental worldmap "
"(http://gardens.ghini.me)"
msgstr ""

#: ../../template-letters.rst:197
msgid "I sincerely hope you will enjoy using this copylefted, libre software"
msgstr ""

#: ../../template-letters.rst:199
msgid "Best regards, Mario Frasca"
msgstr ""

#: ../../template-letters.rst:202
msgid "https://ghini.github.io https://github.com/Ghini/ghini.desktop/issues/"
msgstr ""

#: ../../template-letters.rst:206
msgid "Do you want to join Ghini?"
msgstr ""

#: ../../template-letters.rst:208
msgid ""
"I generally send a note similar to the following, to GitHub members who "
"\"star\" the project, or to WebLate contributors doing more than one "
"line, and at different occasions.  If it's from GitHub, and if they "
"stated their geographic location in their profile, I alter the letter by "
"first looking on `institutos botánicos "
"<http://umap.openstreetmap.fr/en/map/institutos-"
"botanicos_47038#2/18.0/12.0>`_ if there's any relevant garden in their "
"neighbourhood."
msgstr ""

#: ../../template-letters.rst:215
msgid "Dear GitHub member, student, colleague, translator, botanist,"
msgstr ""

#: ../../template-letters.rst:217
msgid "Thank you warmly for your interest in the Ghini project!"
msgstr ""

#: ../../template-letters.rst:219
msgid ""
"From your on-line profile on github, I see you're located in Xxxx, is "
"that correct?"
msgstr ""

#: ../../template-letters.rst:221
msgid ""
"If you are indeed in Xxxx, you live very close to gardens Yyyy and Zzzz."
"  Maybe you would consider the following proposition?  All would start by"
" contacting the botanical garden there, and get to know what software "
"they use (what it offers, and at which price) and if they're interested "
"in switching to ghini.desktop+pocket+tour+web."
msgstr ""

#: ../../template-letters.rst:226
msgid ""
"The business model within Ghini is that the software is free and you get "
"it for free, but time is precious and if a garden needs help, they should"
" be ready to contribute.  Maybe you already have a full-time job and "
"don't need more things to do, but in case you're interested, or you have "
"friends who would be, I'm sure we can work something out."
msgstr ""

#: ../../template-letters.rst:231
msgid "Let me know where you stand."
msgstr ""

#: ../../template-letters.rst:233
msgid "best regards, and again thanks for all your contributed translations."
msgstr ""

#: ../../template-letters.rst:235
msgid "Mario Frasca"
msgstr ""

#: ../../use_cases-jbq.rst:2
msgid "Quito Botanical Garden"
msgstr ""

#: ../../use_cases-jbq.rst:4
msgid ""
"At the JBQ, Quito Botanical Garden, we have adopted the Ghini software in"
" April 2015. Since that time, we have accumulated experience with the "
"program, and we are ourselves in need to document it, in order to secure "
"the knowledge to the institution. We are happy to share it."
msgstr ""

#: ../../use_cases-jbq.rst:10
msgid "Technical"
msgstr ""

#: ../../use_cases-jbq.rst:12
msgid ""
"We work on GNU/Linux, a platform that many users don't master, and our "
"database is inside of a remote database management system. This implies "
"steps that are not obvious to the casual end user."
msgstr ""

#: ../../use_cases-jbq.rst:16
msgid "How to start a program"
msgstr ""

#: ../../use_cases-jbq.rst:19
msgid ""
"To start a program given its name, hit the |loose_png| key next to Alt, "
"or click on |10000000000000300000002F89E0224ADF9EC09E_png|, then start "
"typing the name of the program, in our case “Ghini” or just click on the "
"program symbol |100000000000003100000031BB54CBDFA885EBAC_png|, appearing "
"near the left margin of your display."
msgstr ""

#: ../../use_cases-jbq.rst:25
msgid "Database server"
msgstr ""

#: ../../use_cases-jbq.rst:28
msgid ""
"We chose for a centralised PostgreSQL database server. This way we are "
"protected from concurrent conflicting changes, and all changes are "
"simultaneously available on all ghini clients.  We did need to outsource "
"database server management."
msgstr ""

#: ../../use_cases-jbq.rst:33
msgid "adding a new user"
msgstr ""

#: ../../use_cases-jbq.rst:36
msgid ""
"Ghini keeps track of the user performing all sort of edits to the "
"database, and at the garden, apart from the stable users, we have all "
"sorts of temporary users writing to the database, that we decided we "
"would let Ghini help us keep track of database events."
msgstr ""

#: ../../use_cases-jbq.rst:41
msgid ""
"Since we work using PostgreSQL, the users that Ghini stores in the "
"database history are the database users, not the system users."
msgstr ""

#: ../../use_cases-jbq.rst:44
msgid ""
"Each user knows their own password, and only knows that one. Our super-"
"user, responsible for the database content, also has the ``bauble`` "
"fictional user password, which we only only use to create other users."
msgstr ""

#: ../../use_cases-jbq.rst:49
msgid ""
"We do not use account names like ``voluntario``, because such accounts do"
" not help us associate the name to the person."
msgstr ""

#: ../../use_cases-jbq.rst:52
msgid "— adding a new system user (linux/osx)"
msgstr ""

#: ../../use_cases-jbq.rst:55
msgid ""
"Adding a system user is not strictly necessary, as ghini does not use it "
"in the logs, however, adding a system user allows for separation of "
"preferences, configured connections, search history. On some of our "
"systems we have a single shared account with several configured "
"connections, on other systems we have one account per user."
msgstr ""

#: ../../use_cases-jbq.rst:62
msgid ""
"On systems with one account per user, our users have a single configured "
"connection, and we hold the database password in the "
"``/home/<account>/.pgpass`` file.  This file is only readable for the "
"``<account>`` owner."
msgstr ""

#: ../../use_cases-jbq.rst:67
msgid ""
"On systems with a shared account, the user must select their own "
"connection and type the corresponding password."
msgstr ""

#: ../../use_cases-jbq.rst:70
msgid "These are the steps to add system users::"
msgstr ""

#: ../../use_cases-jbq.rst:76
msgid "— adding a new database user"
msgstr ""

#: ../../use_cases-jbq.rst:79
msgid ""
"Ghini has a very minimal interface to user management, it only works with"
" postgresql and it very much lacks maintainance.  We have opened issues "
"that will allow us use it, for the time being we use the ``create-"
"role.sh`` script::"
msgstr ""

#: ../../use_cases-jbq.rst:96
msgid ""
"The redundant ``alter role`` following the ``create role`` lets us apply "
"the same script also for correcting existing accounts."
msgstr ""

#: ../../use_cases-jbq.rst:99
msgid ""
"Our ghini database is called ``bauble``, and ``bauble`` is also the name "
"of our database super user, the only user with ``CREATEROLE`` privilege."
msgstr ""

#: ../../use_cases-jbq.rst:103
msgid ""
"For example, the following invocation would create the user ``willem`` "
"with password ``orange``, on the ``bauble`` database hosted at "
"192.168.5.6::"
msgstr ""

#: ../../use_cases-jbq.rst:109
msgid "Understanding when to update"
msgstr ""

#: ../../use_cases-jbq.rst:111
msgid "Updating the system"
msgstr ""

#: ../../use_cases-jbq.rst:114
msgid ""
"Ubuntu updates are a lot lighter and easier than with Windows. So "
"whenever the system suggests an update, we let it do that. Generally, "
"there's no need to wait during the update nor to reboot after it's done."
msgstr ""

#: ../../use_cases-jbq.rst:119
msgid "Updating ghini"
msgstr ""

#: ../../use_cases-jbq.rst:122
msgid ""
"The first window presented by Ghini looks like this. Normally, you don't "
"need do anything in this window, just press enter and get into the main "
"program screen."
msgstr ""

#: ../../use_cases-jbq.rst:128
msgid ""
"Occasionally, at the top of the screen an information text will appear, "
"telling you that a newer version is available on-line."
msgstr ""

#: ../../use_cases-jbq.rst:133
msgid ""
"The update procedure is simple, and it depends on the operating system "
"you use, we're not explaining here again."
msgstr ""

#: ../../use_cases-jbq.rst:136
msgid ""
"It is generally a good idea updating the software.  If in doubt, contact "
"the author, or write to the group."
msgstr ""

#: ../../use_cases-jbq.rst:139
msgid "understanding ghini initial screen"
msgstr ""

#: ../../use_cases-jbq.rst:141
msgid "Complete screen"
msgstr ""

#: ../../use_cases-jbq.rst:144
msgid "At the moment of writing, our initial screen looked like this:"
msgstr ""

#: ../../use_cases-jbq.rst:148
msgid ""
"Apart from the main application menu, Ghini offers three special "
"interface sections with information and tools to explore the database."
msgstr ""

#: ../../use_cases-jbq.rst:152
msgid "Numeric overview"
msgstr ""

#: ../../use_cases-jbq.rst:155
msgid ""
"The table in the right half of the screen presents a summary of all the "
"registered plants can be observed.  Each entry printed in bold is a link "
"to the query selecting the corresponding objects."
msgstr ""

#: ../../use_cases-jbq.rst:161
msgid "Stored queries"
msgstr ""

#: ../../use_cases-jbq.rst:164
msgid ""
"The lower half of the right hand side contains a set of stored queries.  "
"While you can edit them to your liking, our hints include selecting those"
" accessions that have not been identified at rank species.  And one for "
"the database history."
msgstr ""

#: ../../use_cases-jbq.rst:171
msgid "Query and action buttons"
msgstr ""

#: ../../use_cases-jbq.rst:174
msgid ""
"At the top of this screen you can find the field in which you would enter"
" your searches."
msgstr ""

#: ../../use_cases-jbq.rst:179
msgid ""
"With the |100000000000001C00000020F4C7873186014F2F_png| button, in the "
"form of a house, you can return from your searches to the main screen."
msgstr ""

#: ../../use_cases-jbq.rst:182
msgid ""
"With the |100000000000001B000000207EC6F9075C9D3669_png| button, in the "
"form of an arrow, you can return to your last search."
msgstr ""

#: ../../use_cases-jbq.rst:184
msgid ""
"With the |100000000000001C0000001FB8A1F75F7A5EF877_png| button, in the "
"form of a gear, you can start the \"Query Builder\", which helps you "
"compose complex searches in a simple, graphical way."
msgstr ""

#: ../../use_cases-jbq.rst:189
msgid ""
"We often have volunteers who only work at the garden for a very short "
"time. It was with them in mind that we have developed a `hyper-simplified"
" view <goal.html#hypersimplified-view>`_ on the ghini database structure."
msgstr ""

#: ../../use_cases-jbq.rst:193 ../../use_cases-jbq.rst:597
msgid "Details"
msgstr "상세"

#: ../../use_cases-jbq.rst:196
msgid ""
"The two figures here show all that our temporary collaborators need to "
"know."
msgstr ""

#: ../../use_cases-jbq.rst:199
msgid "Taxonomy & Collection"
msgstr ""

#: ../../use_cases-jbq.rst:199
msgid "Garden"
msgstr ""

#: ../../use_cases-jbq.rst:204
msgid ""
"At times, the program gives error messages. |dontpanic_png|, retry, or "
"report to the developers."
msgstr ""

#: ../../use_cases-jbq.rst:207
msgid "Network problems"
msgstr ""

#: ../../use_cases-jbq.rst:210
msgid ""
"In order to work, the program needs a stable network connection to the "
"database server. It can happen: you start the program, and it can't "
"connect to our database server. You would then get a rather explicit but "
"very badly typeset error message."
msgstr ""

#: ../../use_cases-jbq.rst:217
msgid "Just ignore it and try again."
msgstr ""

#: ../../use_cases-jbq.rst:219
msgid "Search fails with error"
msgstr ""

#: ../../use_cases-jbq.rst:222
msgid ""
"Sometimes and without any apparent cause, a search will not run "
"successfully, and a window with an error message will be displayed. In "
"this case you only have to try to perform the same search again."
msgstr ""

#: ../../use_cases-jbq.rst:227
msgid "An example of such an error message:"
msgstr ""

#: ../../use_cases-jbq.rst:231
msgid "Search does not return something I just inserted"
msgstr ""

#: ../../use_cases-jbq.rst:234
msgid ""
"Accession codes starting with zero and composed of just numbers, as for "
"example ``016489`` are considered by the software as numbers, so if you "
"don't enclose the search string in quotes, any leading 0 will be stripped"
" and the value will not be found."
msgstr ""

#: ../../use_cases-jbq.rst:239
msgid "Try again, but enclose your search string in single or double quotes."
msgstr ""

#: ../../use_cases-jbq.rst:243
msgid "Number on the label"
msgstr ""

#: ../../use_cases-jbq.rst:243
msgid "corresponding search"
msgstr ""

#: ../../use_cases-jbq.rst:248
msgid ""
"Please note: when you look for a Plant code, not an Accession, the "
"leading zero becomes optional, so in the above example it's maybe easier "
"to type ``16489.1``."
msgstr ""

#: ../../use_cases-jbq.rst:252
msgid ""
"A serious situation happened once, and we absolutely want to prevent it "
"from happening again: a user deleted a genus, with everything that was "
"below it, species and accessions, and synonyms."
msgstr ""

#: ../../use_cases-jbq.rst:256
msgid "Solving it with user permissions"
msgstr ""

#: ../../use_cases-jbq.rst:259
msgid ""
"We propose to have different connection profiles, associated to different"
" database users, each user with all needed permissions."
msgstr ""

#: ../../use_cases-jbq.rst:263
msgid "Full permission (BD-JBQ)"
msgstr ""

#: ../../use_cases-jbq.rst:263
msgid "Only qualified personnel get this kind of access."
msgstr ""

#: ../../use_cases-jbq.rst:268
msgid "Insert and update (BD-JBQ-limitado)"
msgstr ""

#: ../../use_cases-jbq.rst:266
msgid ""
"We use this one for those users who come help us for a limited time, and "
"who did not get a complete introduction to database concepts. It is meant"
" to prevent costly mistakes."
msgstr ""

#: ../../use_cases-jbq.rst:271
msgid "Read only (BD-JBQ-lectura)"
msgstr ""

#: ../../use_cases-jbq.rst:271
msgid "it can be shared with anyone visiting the garden"
msgstr ""

#: ../../use_cases-jbq.rst:273
msgid ""
"You select the connection at start-up, and the software asks you for the "
"password corresponding to the connection you selected."
msgstr ""

#: ../../use_cases-jbq.rst:278
msgid ""
"If you want to review the details of the connection, click on the ▶ next "
"to 'Connection Details', it will change to ▼, and the connection window "
"will be displayed as one of the following:"
msgstr ""

#: ../../use_cases-jbq.rst:286
msgid ""
"As you can see, we are connecting to the same database server, each "
"connection uses the same database on the server, but with different user."
msgstr ""

#: ../../use_cases-jbq.rst:290
msgid "Thinking further about it"
msgstr ""

#: ../../use_cases-jbq.rst:293
msgid ""
"On the other hand, we are questioning if it is at all appropriate, "
"letting any user delete something at such high level as a family, or a "
"genus, or, for that matters, of anything connected to accessions in the "
"collection."
msgstr ""

#: ../../use_cases-jbq.rst:298
msgid ""
"The ghini way to question the software features, is by opening a "
"`corresponding issue "
"<https://github.com/Ghini/ghini.desktop/issues/218>`_."
msgstr ""

#: ../../use_cases-jbq.rst:302
msgid ""
"When contacting the developers, they will definitely ask for technical "
"information, or at least to see a screen-shot.  Help them help you."
msgstr ""

#: ../../use_cases-jbq.rst:305
msgid "Taking a screen-shot"
msgstr ""

#: ../../use_cases-jbq.rst:308
msgid ""
"On Linux there are three ways to create a screen-shot, all involve "
"hitting the 'PrtSc' key.  The most practical one is possibly hitting the "
"'PrtSc' key in combination with Ctrl and Shift. This will start an "
"interactive screen copy tool. You select a rectangle and the area is "
"copied in the clipboard.  Paste it in the email you're writing, or in the"
" chat line where the developers are trying to help you."
msgstr ""

#: ../../use_cases-jbq.rst:316
msgid "Where are the logs"
msgstr ""

#: ../../use_cases-jbq.rst:319
msgid ""
"Ghini continuously saves a very informative log file, in the "
"``~/.bauble/bauble.log`` file.  Don't bother opening it, just send it "
"over.  It contains loads of technical information."
msgstr ""

#: ../../use_cases-jbq.rst:323
msgid "Continuous unmanned alerting"
msgstr ""

#: ../../use_cases-jbq.rst:326
msgid ""
"An other option is to activate the sentry handler. It will notify our "
"sentry server of any serious situations in the software.  If you "
"registered, the developers will know how to contact you if necessary."
msgstr ""

#: ../../use_cases-jbq.rst:331
msgid ""
"To the healthy paranoid: we're not monitoring what you're doing, we're "
"monitoring how our software works.  You can always opt out."
msgstr ""

#: ../../use_cases-jbq.rst:334
msgid ""
"You activate the Sentry handler in the ``:prefs`` page: look for the row "
"with name ``bauble.use_sentry_handler``, if the value is not what you "
"wish, double click on the line and it will change to the other value."
msgstr ""

#: ../../use_cases-jbq.rst:340
msgid "Taxonomy"
msgstr ""

#: ../../use_cases-jbq.rst:342
msgid "Introduction"
msgstr ""

#: ../../use_cases-jbq.rst:344
msgid "Orchidaceae taxonomic complexity"
msgstr ""

#: ../../use_cases-jbq.rst:347
msgid ""
"At the JBQ, we work most of all with orchids, family Orchidaceae, one of "
"the largest plant families, with no less than 850 genera, organized "
"—according to Dressler— in approximately 70 subtribes, 22 tribes, 5 "
"subfamilies.  How we represent this information is not obvious and needs "
"be explained."
msgstr ""

#: ../../use_cases-jbq.rst:352
msgid ""
"The taxonomy of the Orchidaceae family is continuously being reviewed. "
"Genera get added, refused, reorganized, recognized as synonyms, some "
"taxonomists prefer grouping species or genera in a new way, others split "
"them again and differently, botanists of different nationalities may have"
" different views on the matter.  All this sounds very complex and "
"specialistic, but it's part of our daily routine, and it can all be "
"stored in our Ghini database."
msgstr ""

#: ../../use_cases-jbq.rst:360
msgid "Identifying at rank Genus, or Family"
msgstr ""

#: ../../use_cases-jbq.rst:362
msgid "At rank genus"
msgstr ""

#: ../../use_cases-jbq.rst:365
msgid ""
"Ghini-1.0 prescribes that an accession is identified at rank species, in "
"all cases. The current maintainer acknowledges that this is a mistake, "
"coming from the early Bauble days, and which Ghini-1.0 has in common with"
" other botanic software. Until this is fixed, we rely on established "
"practices."
msgstr ""

#: ../../use_cases-jbq.rst:371
msgid ""
"If an accession is identified at rank genus, we add a fictive species in "
"that genus, we don't specify its species epithet (we don't know that) and"
" we add an unranked epithet in the infraspecific information section, "
"like this:"
msgstr ""

#: ../../use_cases-jbq.rst:378
msgid "When displayed in a search result, it shows like this:"
msgstr ""

#: ../../use_cases-jbq.rst:382
msgid "At rank family"
msgstr ""

#: ../../use_cases-jbq.rst:385
msgid ""
"If an accession is only identified at rank family, we need a fictive "
"genus, to which we can add the fictive species. Since our garden is "
"primarily focusing on Orchidaceae, we use the very short name **Zzz** for"
" the fictive genus within the family, like this:"
msgstr ""

#: ../../use_cases-jbq.rst:392
msgid ""
"The current maintainer suggests to use the prefix **Zzz-** and behind the"
" prefix to write the family name, possibly removing the trailing **e**.  "
"Removal of the trailing **e** is useful in order not to get results that "
"include genus names when you as for stuff ending in **aceae**."
msgstr ""

#: ../../use_cases-jbq.rst:398
msgid ""
"Apart from the aforementioned **Zzz** genus in the Orchidaceae family, we"
" follow this suggested practice, so for example our collection would "
"include *Zzz-cactacea* or *Zzz-bromeliacea*."
msgstr ""

#: ../../use_cases-jbq.rst:402
msgid ""
"Remember: our **Zzz** genus is a fictive genus in the **Orchidaceae** "
"family, do not use it as unspecified genus in other families."
msgstr ""

#: ../../use_cases-jbq.rst:406
msgid ""
"Identifying at a rank that is not allowed by the software (eg: Subtribe, "
"or Subfamily)"
msgstr ""

#: ../../use_cases-jbq.rst:408
msgid "At rank subtribe"
msgstr ""

#: ../../use_cases-jbq.rst:411
msgid ""
"We sometimes can't identify a taxon at rank genus, but we do manage to be"
" more precise than just \"it's an orchid\". Quite often we are able to "
"indicate the subtribe, this is useful when you want to produce hybrids."
msgstr ""

#: ../../use_cases-jbq.rst:416
msgid ""
"The software does not let us store ranks which are intermediate between "
"family and genus, so we need to invent something, and this is what we do:"
msgstr ""

#: ../../use_cases-jbq.rst:420
msgid ""
"We insert a fictive genus, naming it as the subtribe, prefixing it with "
"'Zzx-', like in this example:"
msgstr ""

#: ../../use_cases-jbq.rst:425
msgid "This Zzx-Laeliinae is some genus in the Laeliinae subtribe."
msgstr ""

#: ../../use_cases-jbq.rst:427
msgid ""
"In order to be able to select genera by subtribe, we also add a note to "
"the Zzx-Laeliinae fictive genus as well as for all real genera in that "
"subtribe, note category subtribus, note value the subtribe name."
msgstr ""

#: ../../use_cases-jbq.rst:432
msgid "This allows for queries like:"
msgstr ""

#: ../../use_cases-jbq.rst:436
msgid ""
"We are very much looking forward to seeing that `issue-9 "
"<https://github.com/Bauble/bauble.classic/issues/9>`_ solved!"
msgstr ""

#: ../../use_cases-jbq.rst:439
msgid "At rank subfamily, tribe"
msgstr ""

#: ../../use_cases-jbq.rst:442
msgid ""
"Just as we reserved the prefix Zzx- for subtribe, we reserve the prefixes"
" Zzy- for tribe, Zzw- for subfamily."
msgstr ""

#: ../../use_cases-jbq.rst:445
msgid ""
"In particular, the subfamily information is relevant, because there are "
"subfamilies within the Orchidaceae family which are not further "
"separated."
msgstr ""

#: ../../use_cases-jbq.rst:449
msgid "Editing the Accession identification - the Species details"
msgstr ""

#: ../../use_cases-jbq.rst:451
msgid "Placeholder species for individual accessions"
msgstr ""

#: ../../use_cases-jbq.rst:454
msgid ""
"Scenario one describes the identification of a single accession, which "
"had been associated to a \"generic\", placeholder species, something like"
" “*Zzz* sp” or “*Vanda* sp”;"
msgstr ""

#: ../../use_cases-jbq.rst:458
msgid ""
"In this case, when the plant species becomes known, we change the "
"association in the accession, selecting a different species."
msgstr ""

#: ../../use_cases-jbq.rst:463
msgid ""
"We do not edit the species, because there might be totally unrelated "
"accessions connected to the same placeholder species."
msgstr ""

#: ../../use_cases-jbq.rst:466
msgid "Unknown species for multiple accessions"
msgstr ""

#: ../../use_cases-jbq.rst:469
msgid ""
"A different case is when we have a whole batch of accessions, all "
"obviously the same species, but we haven't been able to identify it. In "
"this case, we associate the accessions with an incompletely specified "
"species, something like “*Zzz* sp-59”, preferably adding the taxonomist's"
" name, who made the association."
msgstr ""

#: ../../use_cases-jbq.rst:475
msgid ""
"A species like “*Vanda* sp-018599” is not a placeholder species, it is a "
"very concrete species, which we haven't yet identified."
msgstr ""

#: ../../use_cases-jbq.rst:480
msgid ""
"In this case, when the species gets identified (and it could even be a "
"species nova), we directly edit the species, so all accessions that refer"
" to it get the change."
msgstr ""

#: ../../use_cases-jbq.rst:484
msgid "A new plants is relative to a species not yet in our collection."
msgstr ""

#: ../../use_cases-jbq.rst:486
msgid "Last minute species"
msgstr ""

#: ../../use_cases-jbq.rst:489
msgid ""
"We start this from the Accession window and it's very simple, just click "
"on the **+** next to the species name, we get into the Species window."
msgstr ""

#: ../../use_cases-jbq.rst:493
msgid "Adding a species and using online taxonomic services"
msgstr ""

#: ../../use_cases-jbq.rst:495
msgid "Adding a new species — the plant list."
msgstr ""

#: ../../use_cases-jbq.rst:498
msgid ""
"We start the obvious way: type the genus epithet, possibly select it from"
" the completion list, then type the species epithet, or at least your "
"best guess."
msgstr ""

#: ../../use_cases-jbq.rst:504
msgid ""
"Next to the species epithet field there's a small button, |green_ball|, "
"which connects us to the plant list.  Click on it, a message area appears"
" at the top of the window."
msgstr ""

#: ../../use_cases-jbq.rst:510
msgid ""
"Depending on the speed of your internet connection, but also on how close"
" your best guess is to a correct published name, the top area will change"
" to something like this:"
msgstr ""

#: ../../use_cases-jbq.rst:516
msgid "Accept the hint and it will be as if you had typed the data yourself."
msgstr ""

#: ../../use_cases-jbq.rst:520
msgid "Reviewing a whole selection — TNRS."
msgstr ""

#: ../../use_cases-jbq.rst:523
msgid ""
"This is described in the manual, it's extremely useful, don't forget "
"about it."
msgstr ""

#: ../../use_cases-jbq.rst:528
msgid "Let the database fit the garden"
msgstr ""

#: ../../use_cases-jbq.rst:530
msgid ""
"A never-ending task is reviewing what we have in the garden and have it "
"match what we have in the database."
msgstr ""

#: ../../use_cases-jbq.rst:533
msgid "Initial status and variable resources"
msgstr ""

#: ../../use_cases-jbq.rst:536
msgid ""
"When we adopted ghini, we imported into it all that was properly "
"described in a filemaker database. That database focused solely on "
"Orchids and even so it was far from complete.  In practice, we still meet"
" labeled plants in the garden which have never been inserted in the "
"database."
msgstr ""

#: ../../use_cases-jbq.rst:542
msgid ""
"From time to time, we manage to get resources to review the garden, "
"comparing it to the collection in the database, and the main activity is "
"to insert accession codes to the database, take pictures of the plant in "
"question, and note its location, all tasks that are described in the "
"remainder of this section."
msgstr ""

#: ../../use_cases-jbq.rst:548
msgid ""
"The small Android app ghini.pocket was added to the Ghini family while a "
"Ghini programmer was here in Quito.  It helps us take a snapshot of the "
"database in our pocket while walking in the garden, but it also allows "
"for a very swift inventory procedure."
msgstr ""

#: ../../use_cases-jbq.rst:553
msgid "Inventory procedure"
msgstr ""

#: ../../use_cases-jbq.rst:556
msgid ""
"We start ghini.pocket, we write down the name of the location where we "
"will be conducting the inventory, for example (INV 1) for greenhouse 1.  "
"We enter (type or scan if the plant has bar code or QR code) the "
"accession code and we look it up in ghini.pocket."
msgstr ""

#: ../../use_cases-jbq.rst:561
msgid ""
"A side effect of performing the search is that ghini.pocket writes the "
"date with time, location and the code looked for in a text file that can "
"later be imported into the database."
msgstr ""

#: ../../use_cases-jbq.rst:565
msgid ""
"For a greenhouse with around 1000 plants our estimates suggest you will "
"need two days, working at relaxed pace, from 8:00 am to 5:00 pm."
msgstr ""

#: ../../use_cases-jbq.rst:569
msgid ""
"After having imported the file generated by ghini.pocket, it is easy to "
"reveal which plants are missing. For example: If we did the inventory of "
"the INV3 from 4 to 5 September, this is the corresponding search::"
msgstr ""

#: ../../use_cases-jbq.rst:576
msgid ""
"All of these plants can be marked as dead, or lost, according to garden "
"policy."
msgstr ""

#: ../../use_cases-jbq.rst:579
msgid "Visualizing the need of taxonomic attention"
msgstr ""

#: ../../use_cases-jbq.rst:582
msgid ""
"Our protocol includes one more detail intended to visually highlight "
"plants that need the attention of a taxonomist."
msgstr ""

#: ../../use_cases-jbq.rst:587
msgid ""
"A plant that only appears in our data base identified at family level or "
"that wasn't yet the database receives a visual signal (e.g.: a wooden or "
"plastic stick, for ice cream or french fries), to highlight that it is "
"not identified. In this way the taxonomist in charge, when making a tour "
"of the greenhouse can quickly spot them and possibly proceed to add their"
" identification in the database."
msgstr ""

#: ../../use_cases-jbq.rst:595
msgid "Naming convention in garden locations"
msgstr ""

#: ../../use_cases-jbq.rst:601
msgid "description"
msgstr ""

#: ../../use_cases-jbq.rst:603
msgid "Reserved to cactus plants next to the orchids exposition glasshouses."
msgstr ""

#: ../../use_cases-jbq.rst:606
msgid "Nepenthaceae exibition"
msgstr ""

#: ../../use_cases-jbq.rst:608
msgid ""
"orquidearios de calor en el jardín (1A a 9C son lugares especificos entre"
" del orquideario)"
msgstr ""

#: ../../use_cases-jbq.rst:611
msgid ""
"orquidearios de frío en el jardín (1A a 5I son lugares específicos dentro"
" del orquideario)"
msgstr ""

#: ../../use_cases-jbq.rst:614
msgid "invernadero 1 (calor)"
msgstr ""

#: ../../use_cases-jbq.rst:616
msgid "invernadero 2 (frío)"
msgstr ""

#: ../../use_cases-jbq.rst:618
msgid "invernadero 3 (calor)"
msgstr ""

#: ../../use_cases-jbq.rst:621
msgid "Adding an Accession for a Plant"
msgstr ""

#: ../../use_cases-jbq.rst:623
msgid ""
"Obviously we keep increasing our collection, with plants coming from "
"commercial sources, or collected from the wild, more rarely coming from "
"expeditions to remote areas of our country, or we receive plants which "
"were illegally collected."
msgstr ""

#: ../../use_cases-jbq.rst:628
msgid ""
"Sometimes we have to add plants to the digital collection, just because "
"we have them physically, found in the garden, with or without its label, "
"but without their digital counterpart."
msgstr ""

#: ../../use_cases-jbq.rst:632
msgid "Existing plant, found in the garden with its own label"
msgstr ""

#: ../../use_cases-jbq.rst:635
msgid ""
"This activity starts with a plant, which was found at a specific garden "
"location, an accession label, and the knowledge that the accession code "
"is not in the database."
msgstr ""

#: ../../use_cases-jbq.rst:647
msgid ""
"For this example, let's assume we are going to insert this information in"
" the database."
msgstr ""

#: ../../use_cases-jbq.rst:651
msgid "Accession"
msgstr "억세션"

#: ../../use_cases-jbq.rst:651
msgid "Species"
msgstr "종명"

#: ../../use_cases-jbq.rst:651
msgid "Location"
msgstr "위치명"

#: ../../use_cases-jbq.rst:653
msgid "Invernadero 1 (calor)"
msgstr ""

#: ../../use_cases-jbq.rst:656
msgid ""
"We go straight into the Accession Editor, start typing the species name "
"in the corresponding field.  Luckily, the species was already in the "
"database, otherwise we would use the **Add** button next to the entry "
"field."
msgstr ""

#: ../../use_cases-jbq.rst:663
msgid ""
"We select the correct species, and we fill in a couple more fields, "
"leaving the rest to the default values:"
msgstr ""

#: ../../use_cases-jbq.rst:667 ../../use_cases-jbq.rst:702
msgid "Accession ID"
msgstr "억세션 ID"

#: ../../use_cases-jbq.rst:667 ../../use_cases-jbq.rst:702
msgid "Type of Material"
msgstr ""

#: ../../use_cases-jbq.rst:667 ../../use_cases-jbq.rst:702
msgid "Quantity"
msgstr "수량"

#: ../../use_cases-jbq.rst:667
msgid "Provenance"
msgstr "도입처, 원산지"

#: ../../use_cases-jbq.rst:669
msgid "Unknown"
msgstr "모름"

#: ../../use_cases-jbq.rst:672 ../../use_cases-jbq.rst:707
msgid ""
"After this, we continue to the Plant editor, by clicking on **Add "
"Plants**."
msgstr ""

#: ../../use_cases-jbq.rst:675
msgid ""
"We do not fill in the Accession's \"**Intended Locations**\", because we "
"don't know what was the original intention when the plant was first "
"acquired."
msgstr ""

#: ../../use_cases-jbq.rst:679
msgid ""
"In the Plant Editor, we insert the Quantity and the Location.  And we're "
"done."
msgstr ""

#: ../../use_cases-jbq.rst:682
msgid "The plant is now part of the database:"
msgstr ""

#: ../../use_cases-jbq.rst:686
msgid "New accession: plant just entering the garden"
msgstr ""

#: ../../use_cases-jbq.rst:689
msgid ""
"This activity starts with a new Plant, just acquired from a known Source,"
" a plant label, and an intended Location in the garden."
msgstr ""

#: ../../use_cases-jbq.rst:692
msgid ""
"We mostly do the same as for the case that a plant is found in the "
"garden, there are two differences: (1) we know the source of the plant; "
"(2) acquiring this plant was a planned action, and we intend to place it "
"at a specific location in the garden."
msgstr ""

#: ../../use_cases-jbq.rst:697
msgid ""
"Again, we go straight into the Accession Editor, start typing the species"
" and we either select if from the completion list or we add it on the "
"fly."
msgstr ""

#: ../../use_cases-jbq.rst:702
msgid "Source"
msgstr "소스"

#: ../../use_cases-jbq.rst:704
msgid "specified"
msgstr ""

#: ../../use_cases-jbq.rst:710
msgid "In the Plant Editor, we insert the Quantity and the Location."
msgstr ""

#: ../../use_cases-jbq.rst:712
msgid ""
"Please note that the plant may be initially placed in a greenhouse, "
"before it reaches its intended location in the garden."
msgstr ""

#: ../../use_cases-jbq.rst:715
msgid "Existing plant, found in the garden without its label"
msgstr ""

#: ../../use_cases-jbq.rst:718
msgid ""
"When this happens, we can't be sure the plant had never been in the "
"collection, so we act as if we were re-labeling the plant.  This is "
"discussed in the next section, but we fall back to the case of a new "
"accession."
msgstr ""

#: ../../use_cases-jbq.rst:723
msgid ""
"When we physically associate a label to a plant, there's always the "
"chance that something happens either to the plant (it may die) or to the "
"label (it may become unreadable), or to the association (they may be "
"separated). We have software-aided protocols for these events."
msgstr ""

#: ../../use_cases-jbq.rst:728
msgid "We find a dead plant"
msgstr ""

#: ../../use_cases-jbq.rst:731
msgid ""
"Whenever a plant is found dead, we collect its label and put it in a box "
"next to the main data insertion terminal, the box is marked “dead "
"plants”."
msgstr ""

#: ../../use_cases-jbq.rst:734
msgid ""
"Definitely at least once a week, the box is emptied and the database is "
"updated with this information."
msgstr ""

#: ../../use_cases-jbq.rst:737
msgid ""
"Dead plants aren't *removed* from the database, they stay there but get a"
" **quantity** zero. If the cause of death is known, this is also written "
"in the database."
msgstr ""

#: ../../use_cases-jbq.rst:741
msgid ""
"Please once again remember that a **Plant** is not an **Accession** and "
"please remember we do not remove objects from the database, we just add "
"to their history."
msgstr ""

#: ../../use_cases-jbq.rst:745
msgid ""
"Insert the complete plant code (something like ``012345.1``, or "
"``2017.0001.3``, and you don't need leading zeros nor quotes), right "
"click on the corresponding row, and click on **edit**. change the "
"quantity to 0, fill in the reason and preferably also the date of change."
msgstr ""

#: ../../use_cases-jbq.rst:750
msgid ""
"If you need add any details about the plant death, please use a **note**,"
" and re-use the note category \"death_cause\"."
msgstr ""

#: ../../use_cases-jbq.rst:753
msgid ""
"Plants with **quantity** zero are shown with a different colour in the "
"results view.  This helps distinguish them from live plants."
msgstr ""

#: ../../use_cases-jbq.rst:756
msgid "We find a plant without a label"
msgstr ""

#: ../../use_cases-jbq.rst:759
msgid ""
"We can't be sure the plant had ever been in the collection or not. We "
"assume it had, and that its label was lost."
msgstr ""

#: ../../use_cases-jbq.rst:762
msgid ""
"Losing a plant label is unfortunate, but it just sometimes happens. What "
"we do is to put a new label to the plant, and to clearly state that the "
"label is a replacement of an original one."
msgstr ""

#: ../../use_cases-jbq.rst:766
msgid ""
"We then handle the case as if it was a new accession, plus we add a note "
"to the accession, category “label”, text “relabeled”."
msgstr ""

#: ../../use_cases-jbq.rst:770
msgid "Keeping track of different sources of plant material"
msgstr ""

#: ../../use_cases-jbq.rst:772
msgid "What different sources we can have"
msgstr ""

#: ../../use_cases-jbq.rst:775
msgid ""
"In this botanical garden, we receive plants from different types of "
"origin. It could be from expeditions (plants coming from nature, "
"collected with legal permission from MAE - Ecuadorian Environment "
"Ministry), donated plants mostly coming as gifts from collectors or "
"orchid commercialization enterprises, purchased, or confiscated plants "
"(usually coming from MAE raids around the country)."
msgstr ""

#: ../../use_cases-jbq.rst:783
msgid "If the plant comes from a wild source"
msgstr ""

#: ../../use_cases-jbq.rst:786
msgid ""
"The accession editor offers the option \"origin\" option. When a plant is"
" traceable to a wild source, we can specified its specific origin. We "
"want to comply with ITF2, and ghini-1.0 only partly respects that "
"standard. The ITF2 complying options are:"
msgstr ""

#: ../../use_cases-jbq.rst:791
msgid "Wild: Accession of wild source."
msgstr ""

#: ../../use_cases-jbq.rst:792
msgid "Cultivated: Propagule(s) from a wild source plant."
msgstr ""

#: ../../use_cases-jbq.rst:793
msgid "Not Wild: Accession not traceable to a wild source."
msgstr ""

#: ../../use_cases-jbq.rst:794
msgid "Insufficient data"
msgstr ""

#: ../../use_cases-jbq.rst:796
msgid ""
"In the case of a donated plant, it is better to put detail information "
"just as a note in the plant accession; in the case of a plant with an "
"unknown origin, we select the Insufficient data option."
msgstr ""

#: ../../use_cases-jbq.rst:800
msgid "Using the source tab in the accession editor"
msgstr ""

#: ../../use_cases-jbq.rst:803
msgid ""
"In this section we can create or use a contact, our source of plant "
"material. It could be from an expedition to a collecting place, and in "
"this case we would specify the region and the expedition name, or could "
"be the name of the person or enterprise donating a specific batch of "
"plants."
msgstr ""

#: ../../use_cases-jbq.rst:811
msgid ""
"Once you choose or create the contact information, this section deploys "
"more options, here you can specify the region, where you can choose the "
"country of origin, and a specific location within the region, "
"georeferencing information (including the GPS data), habitat description "
"collector name. For the last one, I recommend also to write the specific "
"date next to the collector name (eg. Luis Baquero 11/10/2016)."
msgstr ""

#: ../../use_cases-jbq.rst:819
msgid "Donated, bought or confiscated plants"
msgstr ""

#: ../../use_cases-jbq.rst:822
msgid ""
"However useful for expeditions or for donors where the main information "
"is geographic, this source tab is not very practical in our remaining "
"cases: we handle three more categories: confiscated, purchased and "
"donated, for these categories the options available in the source tab do "
"not apply: too much information and not to the point."
msgstr ""

#: ../../use_cases-jbq.rst:828
msgid "In these cases, we add a set of notes, according to the case."
msgstr ""

#: ../../use_cases-jbq.rst:830
msgid "— Donated plants"
msgstr ""

#: ../../use_cases-jbq.rst:833
msgid ""
"If the plant was donated by individual, we add the individual among our "
"contacts and specify it as source, then we add the notes:"
msgstr ""

#: ../../use_cases-jbq.rst:837 ../../use_cases-jbq.rst:850
#: ../../use_cases-jbq.rst:864
msgid "category"
msgstr ""

#: ../../use_cases-jbq.rst:837 ../../use_cases-jbq.rst:850
#: ../../use_cases-jbq.rst:864
msgid "text"
msgstr ""

#: ../../use_cases-jbq.rst:839
msgid "gift"
msgstr ""

#: ../../use_cases-jbq.rst:840
msgid "Contribución científica al JBQ"
msgstr ""

#: ../../use_cases-jbq.rst:843
msgid "— Bought plants"
msgstr ""

#: ../../use_cases-jbq.rst:846
msgid ""
"If the plant was bought, we add the previous owner among our contacts and"
" specify it as source, then we add the notes:"
msgstr ""

#: ../../use_cases-jbq.rst:852
msgid "purchase"
msgstr ""

#: ../../use_cases-jbq.rst:853
msgid "optional, free text"
msgstr ""

#: ../../use_cases-jbq.rst:854
msgid "the invoice number"
msgstr ""

#: ../../use_cases-jbq.rst:857
msgid "— Confiscated plants"
msgstr ""

#: ../../use_cases-jbq.rst:860
msgid ""
"If the plant was confiscated, we add the previous owner among our "
"contacts and specify it as source, then we add the notes:"
msgstr ""

#: ../../use_cases-jbq.rst:866
msgid "confiscated"
msgstr ""

#: ../../use_cases-jbq.rst:867
msgid "possibly, legal details, law number ..."
msgstr ""

#: ../../use_cases-jbq.rst:871
msgid "Producing or reproducing labels"
msgstr ""

#: ../../use_cases-jbq.rst:873
msgid "Refreshing plant labels"
msgstr ""

#: ../../use_cases-jbq.rst:876
msgid ""
"Sometimes we refresh the labels, for example all that is in a greenhouse,"
" or maybe just a set of plants because their labels risk becoming "
"unreadable."
msgstr ""

#: ../../use_cases-jbq.rst:880
msgid ""
"In the first case it's easy selecting all plants in the Location, we just"
" type the location name, or give the search ``location like <location "
"name>``."
msgstr ""

#: ../../use_cases-jbq.rst:884
msgid ""
"The second case it's a bit trickier.  What we do is to create a temporary"
" **Tag**, and use it to tag all plants that were found in need for a new "
"label."
msgstr ""

#: ../../use_cases-jbq.rst:888
msgid ""
"Given the selection, we start the report tool, using the mako "
"``accession-label.svg`` template.  We reset its options to default "
"values, and since we're using a simple printer, we set the colour to "
"``black`` instead of ``blue``, which is meant for engraving."
msgstr ""

#: ../../use_cases-jbq.rst:893
msgid "Preparing labels for non-database plants"
msgstr ""

#: ../../use_cases-jbq.rst:896
msgid ""
"To prepare the batch of 72 labels, we use a mako report template, named "
"``accession-label.svg``.  This template accepts parameters, this is an "
"example that would produce labels from 025801 all the way to 025872."
msgstr ""

#: ../../use_cases-jbq.rst:903
msgid ""
"Labels come for us in two flavours: (1) either new plants just being "
"acquired by the garden; (2) or plants in the garden, found without a "
"label. We distinguish the two cases by adding a 'ret' extra text for "
"relabeled plants."
msgstr ""

#: ../../use_cases-jbq.rst:908
msgid "We keep two boxes with labels of the two types, ready to be used."
msgstr ""

#: ../../use_cases-jbq.rst:910
msgid ""
"Our garden has two exposition greenhouses, and several warm and cold "
"greenhouses where we keep the largest part of our collection.  Plants are"
" moved to the exposition when flowering and back to the \"warehouse\" "
"when less interesting for the exposition. For each plant in our "
"collection we need to know its current locations and history of "
"movements."
msgstr ""

#: ../../use_cases-jbq.rst:916
msgid "Planned action"
msgstr ""

#: ../../use_cases-jbq.rst:919
msgid ""
"The action starts by moving the plants around, and collecting the plant "
"code either on paper, or in our mobile app, if we had one."
msgstr ""

#: ../../use_cases-jbq.rst:922
msgid ""
"We then go to the desktop terminal and revise all plants one by one "
"changing their location in the database.  It is important that the date "
"of the location change is correctly memorized, because this tells us how "
"long a plant stays in the exposition."
msgstr ""

#: ../../use_cases-jbq.rst:927
msgid ""
"If we had a mobile app, we would just upload the info to the server and "
"we would be done."
msgstr ""

#: ../../use_cases-jbq.rst:930
msgid "Ex-post correction"
msgstr ""

#: ../../use_cases-jbq.rst:933
msgid ""
"While revising the garden, we find a plant at a location that is not what"
" the database says.  We update the database information."
msgstr ""

#: ../../use_cases-jbq.rst:936
msgid ""
"For example, the plant belonging to accession “012142”, species "
"“*Acineta* sp”, was found in “Invernadero 1”, while the database says it "
"is in “ICAlm3”."
msgstr ""

#: ../../use_cases-jbq.rst:939
msgid ""
"All we do is find the Plant in the database and update its information.  "
"We do not change anything in the initial Accession information, just the "
"current Plant information."
msgstr ""

#: ../../use_cases-jbq.rst:943
msgid ""
"We type the accession code in the search entry field, with quotes, hit "
"enter. The search results now shows the accession, and it tells us how "
"many plants belong to it.  Click on the squared **+** in the results row,"
" so we now also see a row for the plant belonging to the accession."
msgstr ""

#: ../../use_cases-jbq.rst:948
msgid ""
"Right click on the Plant row, the three options will show: “Edit, Split, "
"Delete”, select Edit, you land in the Plant Editor."
msgstr ""

#: ../../use_cases-jbq.rst:951
msgid "Just correct the Location field, and click on OK."
msgstr ""

#: ../../use_cases-jbq.rst:953
msgid "The InfoBox contains information about the last change to the object:"
msgstr ""

#: ../../use_cases-jbq.rst:958
msgid ""
"For plants, even more interesting, it builds a history of changes, list "
"that includes Location changes, or Quantity changes."
msgstr ""

#: ../../use_cases-jbq.rst:963
msgid ""
"As plants enter the flowering stage, we can review their identification "
"directly, or we take pictures of details of the flower, hoping that a "
"visiting specialist could help completing the identification."
msgstr ""

#: ../../use_cases-jbq.rst:967
msgid "Adding pictures"
msgstr ""

#: ../../use_cases-jbq.rst:970
msgid ""
"We are practicing with ODK Collect, a small program running on hand-held "
"android devices.  Ghini's use of ODK Collect hasn't yet frozen to a best "
"practice.  Do have a look at the `corresponding issue "
"<https://github.com/Ghini/ghini.desktop/issues/243>`_ on github."
msgstr ""

#: ../../use_cases-jbq.rst:976
msgid ""
"Regularly, we need producing reports about our collection that the "
"Ecuadorian Environment Ministry (MAE) requires and that justify the very "
"existence of the garden."
msgstr ""

#: ../../use_cases-jbq.rst:980
msgid "Producing reports"
msgstr ""

#: ../../use_cases-jbq.rst:983
msgid ""
"Each year the botanic garden has to submit a report (annual report of "
"management and maintenance of orchids collection) complying to the "
"requirements of the Ecuadorian Ministry of the Environment."
msgstr ""

#: ../../use_cases-jbq.rst:987
msgid ""
"To this end, we start selecting the plants we have to include in the "
"report. It might be all acquisition in the past year::"
msgstr ""

#: ../../use_cases-jbq.rst:992
msgid ""
"or all plants within a location, or all plants belonging to a species, or"
" just everything (but this will take time)::"
msgstr ""

#: ../../use_cases-jbq.rst:999
msgid ""
"Having selected the database objects which we want in the report, we "
"start the report tool, which acts on the selection."
msgstr ""

#: ../../use_cases-jbq.rst:1003
msgid "Searching the database"
msgstr ""

#: ../../use_cases-jbq.rst:1005
msgid ""
"You search the database in order to edit the data further, or because you"
" want to produce a report. Anyway you start with typing something in the "
"search field"
msgstr ""

#: ../../use_cases-jbq.rst:1011
msgid "and you hope to see your result in the search result view."
msgstr ""

#: ../../use_cases-jbq.rst:1013
msgid "Search in order to edit (plant or accession)"
msgstr ""

#: ../../use_cases-jbq.rst:1016
msgid ""
"When searching in order to edit, you want to be very specific, and select"
" as few objects as possible. The most fine-tuned search is the one based "
"on plant number: you know the code, you get one object."
msgstr ""

#: ../../use_cases-jbq.rst:1020
msgid "If your plant is not there, the screen would look like this:"
msgstr ""

#: ../../use_cases-jbq.rst:1024
msgid "Other example, plant ``007701.1`` is in the database:"
msgstr ""

#: ../../use_cases-jbq.rst:1028
msgid ""
"All fields with a darker background in the infobox on the right hand side"
" are hyperlinks to other objects in the database. Clicking on them will "
"either replace the text in the search field and execute the query, or "
"will simply add the object to the results."
msgstr ""

#: ../../use_cases-jbq.rst:1033
msgid "Clicking on the accession does the latter."
msgstr ""

#: ../../use_cases-jbq.rst:1037
msgid ""
"We now have both Plant or Accession in the search result view and we can "
"now edit either or both."
msgstr ""

#: ../../use_cases-jbq.rst:1040
msgid "Search in order to report"
msgstr ""

#: ../../use_cases-jbq.rst:1043
msgid ""
"When searching in order to create a report, you want to be both specific "
"(you don't want to report about irrelevant objects) and broad (you don't "
"want to report about a single object)."
msgstr ""

#: ../../use_cases-jbq.rst:1047
msgid ""
"Sometimes the report itself suggests the query, as for example: all "
"plants in greenhouse 3; or: all plants belonging to endangered species "
"(we store this information in a note associated to the species); or: all "
"plants added to the collection this year; ::"
msgstr ""

#: ../../use_cases-jbq.rst:1056
msgid "Otherwise a flexible way to achieve this is to work with **Tags**."
msgstr ""

#: ../../use_cases-jbq.rst:1058
msgid "Using **Tags** as enhanced searching"
msgstr ""

#: ../../use_cases-jbq.rst:1061
msgid ""
"Sometimes we have to take the same action on objects of the same type, "
"but we don't manage to quickly think of a search query that would group "
"all that we need and exclude all we do not need."
msgstr ""

#: ../../use_cases-jbq.rst:1065
msgid ""
"This is one possible use of **Tags**.  We start with a selection, we tag "
"all objects in the selection under a new temporary tag. Let's say we call"
" it \"temporary\"."
msgstr ""

#: ../../use_cases-jbq.rst:1069
msgid ""
"We continue searching and adding objects to the temporary tag until the "
"tag identifies all that we need."
msgstr ""

#: ../../use_cases-jbq.rst:1072
msgid ""
"Finally from the Tags menu we select the one we just created (in our "
"example this corresponds to the search ``tag=\"temporary\"``) and we can "
"invoke the report."
msgstr ""

#: ../../use_cases-jbq.rst:1076
msgid ""
"When we're done with a temporary tag, there's no point in leaving it "
"around, so we just delete it."
msgstr ""

#: ../../use_cases-jbq.rst:1081
msgid "Be aware of the available search strategies"
msgstr ""

#: ../../use_cases-jbq.rst:1084
msgid ""
"This is nicely documented, \"più non dimandare\" and `read the docs "
"<searching.html>`_."
msgstr ""

#: ../../use_cases.rst:2
msgid "Contributed recipes collection"
msgstr ""

#: ../../use_cases.rst:4
msgid ""
"This page presents lists of use cases. If you're looking for straight, "
"practical information, you are at the right place. If you prefer a "
"thorough presentation of the software and database structure, check the "
"section `software for botanical gardens <goal.html#botanic-garden-"
"software>`_"
msgstr ""

#: ../../use_cases.rst:9
msgid ""
"All material here has been contributed by gardens using the software and "
"sharing their experiences back to the user community."
msgstr ""

#: ../../use_cases.rst:12
msgid "The authors of the software wish to thank all dearly."
msgstr ""

#: ../../use_cases-zadenbank.rst:2
msgid "using ghini for a seed database"
msgstr ""

#: ../../use_cases-zadenbank.rst:4
msgid ""
"We keep getting involved in groups focusing on endagered plant seeds.  "
"They want to note down when seeds come in, but also when they go out to "
"people that order the seed."
msgstr ""

#: ../../use_cases-zadenbank.rst:8
msgid ""
"In ghini, we keep speaking of ›Plants‹, ›Locations‹, while such user "
"groups focus on ›Seeds‹ and ›Jars‹ and ›Drawers‹ and ›Boxes‹ and "
"›Envelopes‹.  So people wonder whether ghini could be adapted to their "
"use case, or for directions on how to develop their own database."
msgstr ""

#: ../../use_cases-zadenbank.rst:13
msgid "Does ghini need being adapted for such a seed database?"
msgstr ""

#: ../../use_cases-zadenbank.rst:16
msgid ""
"no it doesn't need any adaptation, it's just that you need to read some "
"of its terms differently."
msgstr ""

#: ../../use_cases-zadenbank.rst:19
msgid ""
"the taxonomy part is just taxonomy, plant species information, no need to"
" explain that, no way to interpret it otherwise."
msgstr ""

#: ../../use_cases-zadenbank.rst:22
msgid ""
"›Accessions‹ and ›Plants‹, you know what an ›Accession‹ is, but since "
"you're consistently handling ›Plants‹ still only in seed form, the "
"Wikipedia explanation of an accession sounds like this: it is a seed or "
"group of seeds that are of the same taxon, are of the same propagule type"
" (or treatment), were received from the same source, were received at the"
" same time."
msgstr ""

#: ../../use_cases-zadenbank.rst:29
msgid ""
"If you hold seeds in jars, or in other sort of containers that is able to"
" hold hundreds of seeds, please make sure that a jar contains seeds of "
"just one accession, as above described: same taxon, same treatment, same "
"source, same time."
msgstr ""

#: ../../use_cases-zadenbank.rst:34
msgid ""
"Each one of your ›Jars‹ of seeds is in ghini speak a ›Plant‹, and the "
"amount of seeds in the ›Jar‹ is the ›Plant‹ ›quantity‹.  An ›Envelope‹ is"
" just the same as a ›Jar‹: a container of seeds from the same "
"›Accession‹, just presumably smaller."
msgstr ""

#: ../../use_cases-zadenbank.rst:39
msgid ""
"A ›Box‹ (where you keep several ›Envelopes‹) or a ›Drawer‹ (where you "
"keep several ›Jars‹) are in ghini speak a ›Location‹."
msgstr ""

#: ../../use_cases-zadenbank.rst:42
msgid ""
"Since a ›Jar‹ or an ›Envelope‹ contains seeds from an ›Accession‹, you "
"will clearly label it with its ›Accession‹ code (and trailing ›Plant‹ "
"number).  You might write the amount of seeds, too, but this would be "
"repeating information from the database, and repeating information "
"introduces an inconsistency risk factor."
msgstr ""

#: ../../use_cases-zadenbank.rst:48
msgid "How do I handle receiving a batch of seeds?"
msgstr ""

#: ../../use_cases-zadenbank.rst:51
msgid ""
"When we receive seeds, we either collect them ourselves, or we receive it"
" from an other seed collector.  We handle receiving them possibly on the "
"spot, or with a small delay. Even when handled together with several "
"other batches of seeds we received, each batch keeps its individuality."
msgstr ""

#: ../../use_cases-zadenbank.rst:57
msgid ""
"We want to be later able to find back, for example, how many seeds we "
"still have from a specific batch, or when we last received seeds from a "
"specific source."
msgstr ""

#: ../../use_cases-zadenbank.rst:61
msgid ""
"As long as you put this information in the database, as long as you "
"follow the same convention when doing so, you will be able to write and "
"execute such queries using ghini."
msgstr ""

#: ../../use_cases-zadenbank.rst:65
msgid ""
"One possibility, the one described here, is based on ›Notes‹.  (Ghini "
"does not, as yet, implement the concept \"Acquisition\". There is an "
"issue related to the Acquisition and Donation objects, but we haven't "
"quite formalized things yet.)"
msgstr ""

#: ../../use_cases-zadenbank.rst:70
msgid ""
"You surely already use codes to identify a batch of seeds entering the "
"seed bank.  Just copy this code in a ›Note‹, category 'received', to each"
" ›Accession‹ in the received batch.  This will let you select the "
"›Accessions‹ by the query::"
msgstr ""

#: ../../use_cases-zadenbank.rst:77
msgid ""
"Use the 'Source' tab if you think so, it offers space for indicating an "
"external source, or an expedition.  When receiving from an external "
"source, you can specify the code internal to their organization.  This "
"will be useful when requesting an extra batch."
msgstr ""

#: ../../use_cases-zadenbank.rst:82
msgid "How do I handle sending seeds?"
msgstr ""

#: ../../use_cases-zadenbank.rst:85
msgid ""
"what you physically do is to grab the desired amount of seeds of the "
"indicated species from a jar, put it in an envelope and send it.  what "
"you do from a point of view of the database is exactly the same, but "
"precisely described in a protocol:"
msgstr ""

#: ../../use_cases-zadenbank.rst:90
msgid ""
"Use the database to identify the ›Jar‹ containing the desired amount of "
"the right seeds."
msgstr ""

#: ../../use_cases-zadenbank.rst:92
msgid "remove that amount of seeds from the ›Jar‹ (decrement the quantity),"
msgstr ""

#: ../../use_cases-zadenbank.rst:93
msgid "put the seeds in an ›Envelope‹ (yes, that's a database object)."
msgstr ""

#: ../../use_cases-zadenbank.rst:94
msgid "send the envelope (but keep it in the database)."
msgstr ""

#: ../../use_cases-zadenbank.rst:96
msgid "this in short."
msgstr ""

#: ../../use_cases-zadenbank.rst:98
msgid ""
"When I send seeds, it's not just one bag, how does ghini              "
"help me keeping things together?"
msgstr ""

#: ../../use_cases-zadenbank.rst:102
msgid ""
"There's two levels of keeping things together: one is while you're "
"preparing the sending, and then for later reference."
msgstr ""

#: ../../use_cases-zadenbank.rst:105
msgid ""
"While preparing the sending, we advise you use a temporary ›Tag‹ on the "
"objects being edited."
msgstr ""

#: ../../use_cases-zadenbank.rst:108
msgid ""
"For later reference, you will have common ›Note‹ texts, to identify "
"received and sent batches."
msgstr ""

#: ../../use_cases-zadenbank.rst:111
msgid "Can you give a complete example?"
msgstr ""

#: ../../use_cases-zadenbank.rst:114
msgid "Right.  Quite fair.  Let's see…"
msgstr ""

#: ../../use_cases-zadenbank.rst:116
msgid ""
"Say you were requested to deliver 50 seeds of Parnassia palustris, 30 of "
"Gentiana pneumonanthe, 80 of Fritillaria meleagris, and 30 of Hypericum "
"pulchrum."
msgstr ""

#: ../../use_cases-zadenbank.rst:120
msgid "**step 1**"
msgstr ""

#: ../../use_cases-zadenbank.rst:122
msgid ""
"The first step is to check the quantities you have in house, and if you "
"do have enough, where you have them.  You do this per requested species::"
msgstr ""

#: ../../use_cases-zadenbank.rst:128
msgid ""
"Expand in the results pane the ›Accession‹ from which you want to grab "
"the seeds, so you see the corresponding ›Jars‹, highlight one, and tag it"
" with a new ›Tag‹.  To do this the first time, go through the steps, just"
" once, of creating a new ›Tag‹.  The new tag becomes the active tag, and "
"subsequent tagging will be speedier.  I would call the tag ›sending‹, but"
" that's only for ease of exposition and further completely irrelevant."
msgstr ""

#: ../../use_cases-zadenbank.rst:136
msgid ""
"Repeat the task for Gentiana pneumonanthe, Fritillaria meleagris, "
"Hypericum pulchrum::"
msgstr ""

#: ../../use_cases-zadenbank.rst:143
msgid ""
"Again highilight the accession from which you can grab seeds, and hit "
"Ctrl-Y (this tags the highighted row with the active tag).  Don't worry "
"if nothing seems to happen when you hit Ctrl-Y, this is a silent "
"operation."
msgstr ""

#: ../../use_cases-zadenbank.rst:148
msgid "**step 2**"
msgstr ""

#: ../../use_cases-zadenbank.rst:150
msgid ""
"Now we prepare to go to the seeds bank, with the envelopes we want to "
"fill."
msgstr ""

#: ../../use_cases-zadenbank.rst:153
msgid ""
"Select the ›sending‹ ›Tag‹ from the tags menu, this will bring back in "
"the results pane all the tagged ›Plants‹ (›Jars‹ or ›Envelopes‹), and "
"will tell you in which ›Location‹ (›Drawer‹ or ›Box‹) they are to be "
"found.  Write this information on each of your physical envelopes. Write "
"also the ›Species‹ name, and the quantity you can provide."
msgstr ""

#: ../../use_cases-zadenbank.rst:159
msgid ""
"Walk now to your seeds bank and, for each of the envelopes you just "
"prepared, open the ›Location‹, grab the ›Plant‹, extract the correct "
"amount of seeds, put them in your physical envelope."
msgstr ""

#: ../../use_cases-zadenbank.rst:163
msgid "And back to the database!"
msgstr ""

#: ../../use_cases-zadenbank.rst:165
msgid "**step 3**"
msgstr ""

#: ../../use_cases-zadenbank.rst:167
msgid ""
"If nobody used your workstation, you still have the Tag in the results "
"pane, and it's expanded so you see all the individual plants you tagged."
msgstr ""

#: ../../use_cases-zadenbank.rst:171
msgid ""
"One by one, you have to ›split‹ the plant.  This is a standard operation "
"that you activate by right-clicking on the plant."
msgstr ""

#: ../../use_cases-zadenbank.rst:174
msgid "A plant editor window comes in view, in 'split mode'."
msgstr ""

#: ../../use_cases-zadenbank.rst:176
msgid ""
"Splitting a plant lets you create a database image of the plant group you"
" just physically created, eg: it lets you subtract 30 items from the "
"Gentiana pneumonanthe plant (group number one, that is the one in the "
"jar), and create a new plant group for the same accession.  A good "
"practice would be to specify as ›Location‹ for this new plant the 'out "
"box', that is, the envelope is on its way to leave the garden."
msgstr ""

#: ../../use_cases-zadenbank.rst:183
msgid "Don't forget to delete the temporary 'sending' ›Tag‹."
msgstr ""

#: ../../use_cases-zadenbank.rst:185
msgid "**step 4**"
msgstr ""

#: ../../use_cases-zadenbank.rst:187
msgid ""
"Final step, it represents the physical step of sending the envelope, "
"possibly together with several other envelopes, in a single sending, "
"which should have a code."
msgstr ""

#: ../../use_cases-zadenbank.rst:191
msgid ""
"Just as you did when you received a batch of plants, you work with notes,"
" this time the category is 'sent', and the note text is whatever you "
"normally do to identify a sending.  So suppose you're doing a second "
"sending to Pino in 2018, you add the note to each of the newly created "
"envelopes: category 'sent', text: '2018-pino-002'."
msgstr ""

#: ../../use_cases-zadenbank.rst:197
msgid ""
"When you finally do send the envelopes, these stop being part of your "
"collection.  You still want to know that they have existed, but you do "
"not want to count them among the seeds that are available to you."
msgstr ""

#: ../../use_cases-zadenbank.rst:201
msgid "Bring back all the plants in the sending '2018-pino-002'::"
msgstr ""

#: ../../use_cases-zadenbank.rst:205
msgid ""
"You now need to edit them one by one, mark the ›quantity‹ to zero, and "
"optionally specify the reason of the change, which would be ›given away‹,"
" and the recipient is already specified in the 'sent' ›Note‹."
msgstr ""

#: ../../use_cases-zadenbank.rst:209
msgid ""
"This last operation could be automated, we're thinking of it, it would "
"become a script, acting on a selection.  Stay tuned."
msgstr ""

#: ../../users.rst:2
msgid "Managing Users"
msgstr ""

#: ../../users.rst:4
msgid "The Ghini users plugin is only available on PostgreSQL based databases."
msgstr ""

#: ../../users.rst:7
msgid ""
"The Ghini Users Plugin will allow you to create and manage the "
"permissions of users for your Ghini database."
msgstr ""

#: ../../users.rst:10
msgid ""
"You must log in to your database as a user with ``CREATEROLE`` privilege "
"in order to manage other users."
msgstr ""

#: ../../users.rst:14
msgid "Creating Users"
msgstr ""

#: ../../users.rst:15
msgid "To create a new user..."
msgstr ""

#: ../../users.rst:19
msgid "Permissions"
msgstr "권한"

#: ../../users.rst:20
msgid "Ghini allows read, write and execute permissions."
msgstr ""
