# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2012, Brett Adams; 2012-2015, Mario Frasca
# This file is distributed under the same license as the Ghini package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ghini 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-06-22 16:15-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../administration.rst:2
msgid "Database Administration"
msgstr "Administración de bases de datos"

#: ../../administration.rst:4
msgid ""
"If you are using a real DBMS to hold your botanic data, then you need do "
"something about database administration. While database adnimistration is"
" far beyond the scope of this document, we make our users aware of it."
msgstr ""
"Si está utilizando un verdadero sistema de manejo de base de datos (un "
"DBMS) para guardar sus datos, es preciso saber algo de como se administra"
" una base de datos. Esto está muy fuera del alcance de la documentación "
"de Ghini, sin embargo es importante que los usuarios sean conscientes de "
"la necesidad."

#: ../../administration.rst:9
msgid "SQLite"
msgstr ""

#: ../../administration.rst:11
msgid ""
"SQLite is not what one would consider a real DBMS: each SQLite database "
"is just in one file. Make safety copies and you will be fine. If you "
"don't know where to look for your database files, consider that, per "
"default, bauble puts its data in the ``~/.bauble/`` directory."
msgstr ""
"De SQLite no se puede decir que sea un verdadero DBMS: cada database "
"SQLite no es más que un archivo. De estos archivo haganse copias de "
"seguridad y estará bien. Si no sabe donde buscar los archivos SQLite "
"representantes sus colecciones, considere que, por defecto, Ghini pone "
"sus datos en la carpeta ``~/.bauble``."

#: ../../administration.rst:16
msgid ""
"In Windows it is somewhere in your ``AppData`` directory, most likely in "
"``AppData\\Roaming\\Bauble``. Do keep in mind that Windows does its best "
"to hide the ``AppData`` directory structure to normal users."
msgstr ""
"En Windows estaría en algún lugar en su carpeta ``AppData``, muy "
"probablemente en ``AppData\\Roaming\\Bauble``. Windows hace todo lo "
"posible para no hacer visible la estructura ``AppData`` a sus usuarios."

#: ../../administration.rst:20
msgid ""
"The fastest way to open it is with the file explorer: type ``%APPDATA%` "
"and hit enter."
msgstr ""

#: ../../administration.rst:24
msgid "MySQL"
msgstr ""

#: ../../administration.rst:26
msgid "Please refer to the official documentation."
msgstr ""

#: ../../administration.rst:29
msgid "PostgreSQL"
msgstr ""

#: ../../administration.rst:31
msgid ""
"Please refer to the official documentation. A very thorough discussion of"
" your backup options starts at `chapter_24`_."
msgstr ""

#: ../../administration.rst:37
msgid "Ghini Configuration"
msgstr ""

#: ../../administration.rst:39
msgid ""
"Ghini uses a configuration file to store values across invocations. This "
"file is associated to a user account and every user will have their own "
"configuration file."
msgstr ""

#: ../../administration.rst:43
msgid ""
"To review the content of the Ghini configuration file, type ``:prefs`` in"
" the text entry area where you normally type your searches, then hit "
"enter."
msgstr ""

#: ../../administration.rst:46
msgid ""
"You normally do not need tweaking the configuration file, but you can do "
"so with a normal text editor program. Ghini configuration file is at the "
"default location for SQLite databases."
msgstr ""

#: ../../administration.rst:51
msgid "Reporting Errors"
msgstr ""

#: ../../administration.rst:53
msgid ""
"Should you notice anything unexpected in Ghini's behaviour, please "
"consider filing an issue on the Ghini development site."
msgstr ""

#: ../../administration.rst:56
msgid "Ghini development site can be accessed via the Help menu."
msgstr ""

#: ../../api.rst:2
msgid "API Documentation"
msgstr ""

#: ../../api.rst:5
msgid ":mod:`bauble`"
msgstr ""

#: ../../api.rst:17
msgid ":mod:`bauble.db`"
msgstr ""

#: ../../api.rst:24
msgid ""
"All tables/mappers in Ghini which use the SQLAlchemy declarative plugin "
"for declaring tables and mappers should derive from this class."
msgstr ""

#: ../../api.rst:28
msgid "An instance of :class:`sqlalchemy.ext.declarative.Base`"
msgstr ""

#: ../../api.rst:33
msgid "The default metadata for all Ghini tables."
msgstr ""

#: ../../api.rst:35
msgid "An instance of :class:`sqlalchemy.schema.MetaData`"
msgstr ""

#: ../../api.rst:49
msgid ":mod:`bauble.connmgr`"
msgstr ""

#: ../../api.rst:57
msgid ":mod:`bauble.editor`"
msgstr ""

#: ../../api.rst:78
msgid ":mod:`bauble.i18n`"
msgstr ""

#: ../../api.rst:83
msgid ":mod:`bauble.ui`"
msgstr ""

#: ../../api.rst:91
msgid ":mod:`bauble.meta`"
msgstr ""

#: ../../api.rst:99
msgid ":mod:`bauble.paths`"
msgstr ""

#: ../../api.rst:108
msgid ":mod:`bauble.pluginmgr`"
msgstr ""

#: ../../api.rst:122
msgid ":mod:`bauble.prefs`"
msgstr ""

#: ../../api.rst:133
msgid ":mod:`bauble.task`"
msgstr ""

#: ../../api.rst:141
msgid ":mod:`bauble.types`"
msgstr ""

#: ../../api.rst:154
msgid ":mod:`bauble.utils`"
msgstr ""

#: ../../api.rst:204
msgid ":mod:`bauble.view`"
msgstr ""

#: ../../api.rst:230
msgid ":mod:`bauble.search`"
msgstr ""

#: ../../api.rst:243
msgid ":mod:`bauble.plugins.plants`"
msgstr ""

#: ../../api.rst:278
msgid ":mod:`bauble.plugins.garden`"
msgstr ""

#: ../../api.rst:316
msgid ":mod:`bauble.plugins.abcd`"
msgstr ""

#: ../../api.rst:325
msgid ":mod:`bauble.plugins.imex`"
msgstr ""

#: ../../api.rst:329
msgid ":mod:`bauble.plugins.report`"
msgstr ""

#: ../../api.rst:333
msgid ":mod:`bauble.plugins.report.xsl`"
msgstr ""

#: ../../api.rst:337
msgid ":mod:`bauble.plugins.report.mako`"
msgstr ""

#: ../../api.rst:341
msgid ":mod:`bauble.plugins.tag`"
msgstr ""

#: ../../building.rst:2
msgid "Developer's Manual"
msgstr ""

#: ../../building.rst:5
msgid "Helping Ghini development"
msgstr ""

#: ../../building.rst:7
msgid ""
"Installing Ghini always includes downloading the sources, connected to "
"the github repository. This is so because in our eyes, every user is "
"always potentially also a developer."
msgstr ""

#: ../../building.rst:11
msgid ""
"If you want to contribute to Ghini, you can do so in quite a few "
"different ways:"
msgstr ""

#: ../../building.rst:13
msgid ""
"Use the software, note the things you don't like, `open an issue "
"<http://github.com/Ghini/ghini.desktop/issues/new>`_ for each of them. A "
"developer will react sooner than you can imagine."
msgstr ""

#: ../../building.rst:16
msgid ""
"If you have an idea of what you miss in the software but can't quite "
"formalize it into separate issues, you could consider hiring a "
"professional. This is the best way to make sure that something happens "
"quickly on Ghini. Do make sure the developer opens issues and publishes "
"their contribution on github."
msgstr ""

#: ../../building.rst:21
msgid ""
"Translate! Any help with translations will be welcome, so please do! you "
"can do this without installing anything on your computer, just using the "
"on-line translation service offered by http://hosted.weblate.org/"
msgstr ""

#: ../../building.rst:24
msgid ""
"fork the respository, choose an issue, solve it, open a pull request. See"
" the `bug solving workflow`_ below."
msgstr ""

#: ../../building.rst:27
msgid ""
"If you haven't yet installed Ghini, and want to have a look at its code "
"history, you can open our `github project page "
"<http://github.com/Ghini/ghini.desktop>`_ and see all that has been going"
" on around Ghini since its inception as Bauble, back in the year 2004."
msgstr ""

#: ../../building.rst:33
msgid "Software source, versions, branches"
msgstr ""

#: ../../building.rst:35
msgid ""
"If you want a particular version of Ghini, we release and maintain "
"versions as branches. You should ``git checkout`` the branch "
"corresponding to the version of your choice."
msgstr ""

#: ../../building.rst:40 ../../devdl.rst:32
msgid "production line"
msgstr ""

#: ../../building.rst:42
msgid ""
"Branch names for Ghini stable (production) versions are of the form "
"``ghini-x.y`` (eg: ghini-1.0); branch names where Ghini testing versions "
"are published are of the form ``ghini-x.y-dev`` (eg: ghini-1.0-dev)."
msgstr ""

#: ../../building.rst:47 ../../devdl.rst:29
msgid "Development Workflow"
msgstr ""

#: ../../building.rst:49
msgid ""
"Our workflow is to continuously commit to the testing branch, to often "
"push them to github, to let travis-ci and coveralls.io check the quality "
"of the pushed testing branches, finally, from time to time, to merge the "
"testing branch into the corresponding release."
msgstr ""

#: ../../building.rst:54
msgid ""
"When working at larger issues, which seem to take longer than a couple of"
" days, I might open a branch associated to the issue. I don't do this "
"very often."
msgstr ""

#: ../../building.rst:59 ../../devdl.rst:51
msgid "larger issues"
msgstr ""

#: ../../building.rst:61
msgid ""
"When facing a single larger issue, create a branch tag at the tip of a "
"main development line (e.g.: ``ghini-1.0-dev``), and follow the workflow "
"described at"
msgstr ""

#: ../../building.rst:65 ../../devdl.rst:56
msgid "https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging"
msgstr ""

#: ../../building.rst:67 ../../devdl.rst:58
msgid "in short::"
msgstr ""

#: ../../building.rst:73
msgid ""
"Work on the new temporary branch. When ready, go to github, merge the "
"branch with the main development line from which you branched, solve "
"conflicts where necessary, delete the temporary branch."
msgstr ""

#: ../../building.rst:77
msgid ""
"When ready for publication, merge the development line into the "
"corresponding production line."
msgstr ""

#: ../../building.rst:81 ../../devdl.rst:70
msgid "Updating the set of translatable strings"
msgstr ""

#: ../../building.rst:83 ../../devdl.rst:72
msgid ""
"From time to time, during the process of updating the software, you will "
"be adding or modifying strings in the python sources, in the "
"documentation, in the glade sources. Most of our strings are "
"translatable, and are offered to weblate for people to contribute, in the"
" form of several ``.po`` files. These ``po`` files receive contributions "
"from weblate, and offer lines without translation from new lines of code."
msgstr ""

#: ../../building.rst:90 ../../devdl.rst:79
msgid ""
"We have organized the translation of ghini as two separate repositories "
"in github, each repository being associated to sections of the same "
"project on weblate. Translation of the software is in ghini.desktop, the "
"software project, while translation of the documentation —itself part of "
"the software— is in a separate project, ghini.desktop-docs.i18n."
msgstr ""

#: ../../building.rst:96 ../../devdl.rst:85
msgid ""
"To update the ``po`` files relative to the software, you run a script "
"from the project root dir::"
msgstr ""

#: ../../building.rst:101 ../../devdl.rst:90
msgid ""
"This will update your ``po`` files, something you need commit and push to"
" github."
msgstr ""

#: ../../building.rst:104
msgid ""
"We haven't yet defined a workflow for publishing translated documentation"
" on readthedocs. If you have experience with it please have a go at it. "
"Thank you in advance."
msgstr ""

#: ../../building.rst:110 ../../devdl.rst:102
msgid "Adding missing unit tests"
msgstr ""

#: ../../building.rst:112 ../../devdl.rst:104
msgid ""
"If you are interested contributing to development of Ghini, a good way to"
" do so would be by helping us finding and writing the missing unit tests."
msgstr ""

#: ../../building.rst:115 ../../devdl.rst:107
msgid ""
"A well tested function is one whose behaviour you cannot change without "
"breaking at least one unit test."
msgstr ""

#: ../../building.rst:118 ../../devdl.rst:110
msgid ""
"We all agree that in theory theory and practice match perfectly and that "
"one first writes the tests, then implements the function. In practice, "
"however, practice does not match theory and we have been writing tests "
"after writing and even publishing the functions."
msgstr ""

#: ../../building.rst:123 ../../devdl.rst:115
msgid ""
"This section describes the process of adding unit tests for "
"``bauble.plugins.plants.family.remove_callback``."
msgstr ""

#: ../../building.rst:127 ../../devdl.rst:119
msgid "What to test"
msgstr ""

#: ../../building.rst:129 ../../devdl.rst:121
msgid ""
"First of all, open the coverage report index, and choose a file with low "
"coverage."
msgstr ""

#: ../../building.rst:132 ../../devdl.rst:124
msgid ""
"For this example, run in October 2015, we landed on "
"``bauble.plugins.plants.family``, at 33%."
msgstr ""

#: ../../building.rst:135 ../../devdl.rst:127
#, python-format
msgid "https://coveralls.io/builds/3741152/source?filename=bauble%2Fplugins%2Fplants%2Ffamily.py"
msgstr ""

#: ../../building.rst:137 ../../devdl.rst:129
msgid ""
"The first two functions which need tests, ``edit_callback`` and "
"``add_genera_callback``, include creation and activation of an object "
"relying on a custom dialog box. We should really first write unit tests "
"for that class, then come back here."
msgstr ""

#: ../../building.rst:142 ../../devdl.rst:134
msgid ""
"The next function, ``remove_callback``, also activates a couple of dialog"
" and message boxes, but in the form of invoking a function requesting "
"user input via yes-no-ok boxes. These functions we can easily replace "
"with a function mocking the behaviour."
msgstr ""

#: ../../building.rst:148 ../../devdl.rst:140
msgid "how to test"
msgstr ""

#: ../../building.rst:150 ../../devdl.rst:142
msgid ""
"So, having decided what to describe in unit test, we look at the code and"
" we see it needs discriminate a couple of cases:"
msgstr ""

#: ../../building.rst:156 ../../devdl.rst:148
msgid "**parameter correctness**"
msgstr ""

#: ../../building.rst:154 ../../devdl.rst:146
msgid "the list of families has no elements."
msgstr ""

#: ../../building.rst:155 ../../devdl.rst:147
msgid "the list of families has more than one element."
msgstr ""

#: ../../building.rst:156 ../../devdl.rst:148
msgid "the list of families has exactly one element."
msgstr ""

#: ../../building.rst:160 ../../devdl.rst:152
msgid "**cascade**"
msgstr ""

#: ../../building.rst:159 ../../devdl.rst:151
msgid "the family has no genera"
msgstr ""

#: ../../building.rst:160 ../../devdl.rst:152
msgid "the family has one or more genera"
msgstr ""

#: ../../building.rst:164 ../../devdl.rst:156
msgid "**confirm**"
msgstr ""

#: ../../building.rst:163 ../../devdl.rst:155
msgid "the user confirms deletion"
msgstr ""

#: ../../building.rst:164 ../../devdl.rst:156
msgid "the user does not confirm deletion"
msgstr ""

#: ../../building.rst:168 ../../devdl.rst:160
msgid "**deleting**"
msgstr ""

#: ../../building.rst:167 ../../devdl.rst:159
msgid "all goes well when deleting the family"
msgstr ""

#: ../../building.rst:168 ../../devdl.rst:160
msgid "there is some error while deleting the family"
msgstr ""

#: ../../building.rst:170 ../../devdl.rst:162
msgid ""
"I decide I will only focus on the **cascade** and the **confirm** "
"aspects. Two binary questions: 4 cases."
msgstr ""

#: ../../building.rst:174 ../../devdl.rst:166
msgid "where to put the tests"
msgstr ""

#: ../../building.rst:176 ../../devdl.rst:168
msgid ""
"Locate the test script and choose the class where to put the extra unit "
"tests."
msgstr ""

#: ../../building.rst:178 ../../devdl.rst:170
#, python-format
msgid "https://coveralls.io/builds/3741152/source?filename=bauble%2Fplugins%2Fplants%2Ftest.py#L273"
msgstr ""

#: ../../building.rst:180 ../../devdl.rst:172
msgid ""
"The ``FamilyTests`` class contains a skipped test, implementing it will "
"be quite a bit of work because we need rewrite the FamilyEditorPresenter,"
" separate it from the FamilyEditorView and reconsider what to do with the"
" FamilyEditor class, which I think should be removed and replaced with a "
"single function."
msgstr ""

#: ../../building.rst:187 ../../devdl.rst:179
msgid "writing the tests"
msgstr ""

#: ../../building.rst:189 ../../devdl.rst:181
msgid ""
"After the last test in the FamilyTests class, I add the four cases I want"
" to describe, and I make sure they fail, and since I'm lazy, I write the "
"most compact code I know for generating an error::"
msgstr ""

#: ../../building.rst:206 ../../devdl.rst:198
msgid "One test, step by step"
msgstr ""

#: ../../building.rst:208 ../../devdl.rst:200
msgid "Let's start with the first test case."
msgstr ""

#: ../../building.rst:210 ../../devdl.rst:202
msgid "When writing tests, I generally follow the pattern:"
msgstr ""

#: ../../building.rst:212 ../../devdl.rst:204
msgid "T₀ (initial condition),"
msgstr ""

#: ../../building.rst:213 ../../devdl.rst:205
msgid "action,"
msgstr ""

#: ../../building.rst:214 ../../devdl.rst:206
msgid "T₁ (testing the result of the action given the initial conditions)"
msgstr ""

#: ../../building.rst:216 ../../devdl.rst:208
msgid ""
"There's a reason why unit tests are called unit tests. Please never test "
"two actions in one test."
msgstr ""

#: ../../building.rst:219 ../../devdl.rst:211
msgid ""
"So let's describe T₀ for the first test, a database holding a family "
"without genera::"
msgstr ""

#: ../../building.rst:227 ../../devdl.rst:219
msgid ""
"We do not want the function being tested to invoke the interactive "
"``utils.yes_no_dialog`` function, we want ``remove_callback`` to invoke a"
" non-interactive replacement function. We achieve this simply by making "
"``utils.yes_no_dialog`` point to a ``lambda`` expression which, like the "
"original interactive function, accepts one parameter and returns a "
"boolean. In this case: ``False``::"
msgstr ""

#: ../../building.rst:245 ../../devdl.rst:237
msgid "Next we test the result."
msgstr ""

#: ../../building.rst:247 ../../devdl.rst:239
msgid ""
"Well, we don't just want to test whether or not the object Arecaceae was "
"deleted, we also should test the value returned by ``remove_callback``, "
"and whether ``yes_no_dialog`` and ``message_details_dialog`` were invoked"
" or not."
msgstr ""

#: ../../building.rst:252 ../../devdl.rst:244
msgid ""
"A ``lambda`` expression is not enough for this. We do something "
"apparently more complex, which will make life a lot easier."
msgstr ""

#: ../../building.rst:255 ../../devdl.rst:247
msgid "Let's first define a rather generic function::"
msgstr ""

#: ../../building.rst:261 ../../devdl.rst:253
msgid ""
"and we grab ``partial`` from the ``functools`` standard module, to "
"partially apply the above ``mockfunc``, leaving only ``msg`` unspecified,"
" and use this partial application, which is a function accepting one "
"parameter and returning a value, to replace the two functions in "
"``utils``. The test function now looks like this::"
msgstr ""

#: ../../building.rst:283 ../../devdl.rst:275
msgid ""
"The test section checks that ``message_details_dialog`` was not invoked, "
"that ``yes_no_dialog`` was invoked, with the correct message parameter, "
"that Arecaceae is still there::"
msgstr ""

#: ../../building.rst:299 ../../devdl.rst:291
msgid "And so on"
msgstr ""

#: ../../building.rst:301 ../../devdl.rst:293
msgid ""
"`there are two kinds of people, those who complete what they start, and "
"so on`"
msgstr ""

#: ../../building.rst:304 ../../devdl.rst:296
msgid ""
"Next test is almost the same, with the difference that the "
"``utils.yes_no_dialog`` should return ``True`` (this we achieve by "
"specifying ``result=True`` in the partial application of the generic "
"``mockfunc``)."
msgstr ""

#: ../../building.rst:309 ../../devdl.rst:301
msgid ""
"With this action, the value returned by ``remove_callback`` should be "
"``True``, and there should be no Arecaceae Family in the database any "
"more::"
msgstr ""

#: ../../building.rst:339 ../../devdl.rst:331
msgid ""
"have a look at commit 734f5bb9feffc2f4bd22578fcee1802c8682ca83 for the "
"other two test functions."
msgstr ""

#: ../../building.rst:343
msgid "Testing logging"
msgstr ""

#: ../../building.rst:345
msgid ""
"Our ``bauble.test.BaubleTestCase`` objects use handlers of the class "
"``bauble.test.MockLoggingHandler``.  Every time an individual unit test "
"is started, the ``setUp`` method will create a new ``handler`` and "
"associate it to the root logger.  The ``tearDown`` method takes care of "
"removing it."
msgstr ""

#: ../../building.rst:350
#, python-format
msgid ""
"You can check for presence of specific logging messages in "
"``self.handler.messages``. ``messages`` is a dictionary, initially empty,"
" with two levels of indexation. First the name of the logger issuing the "
"logging record, then the name of the level of the logging record. Keys "
"are created when needed. Values hold lists of messages, formatted "
"according to whatever formatter you associate to the handler, defaulting "
"to ``logging.Formatter(\"%(message)s\")``."
msgstr ""

#: ../../building.rst:358
msgid ""
"You can explicitly empty the collected messages by invoking "
"``self.handler.clear()``."
msgstr ""

#: ../../building.rst:363 ../../devdl.rst:335
msgid "Putting all together"
msgstr ""

#: ../../building.rst:365 ../../devdl.rst:337
msgid "From time to time you want to activate the test class you're working at::"
msgstr ""

#: ../../building.rst:369 ../../devdl.rst:341
msgid "And at the end of the process you want to update the statistics::"
msgstr ""

#: ../../building.rst:375 ../../extending.rst:2
msgid "Structure of user interface"
msgstr ""

#: ../../building.rst:377
msgid ""
"The user interface is built according to the **Model** — **View** — "
"**Presenter** architectural pattern.  For much of the interface, "
"**Model** is a SQLAlchemy database object, but we also have interface "
"elements where there is no corresponding database model.  In general:"
msgstr ""

#: ../../building.rst:382
msgid ""
"The **View** is described as part of a **glade** file. This should "
"include the signal-callback and ListStore-TreeView associations. Just "
"reuse the base class ``GenericEditorView`` defined in ``bauble.editor``. "
"When you create your instance of this generic class, pass it the "
"**glade** file name and the root widget name, then hand this instance "
"over to the **presenter** constructor."
msgstr ""

#: ../../building.rst:389
msgid ""
"In the glade file, in the ``action-widgets`` section closing your "
"GtkDialog object description, make sure every ``action-widget`` element "
"has a valid ``response`` value.  Use `valid GtkResponseType values "
"<http://gtk.php.net/manual/en/html/gtk/gtk.enum.responsetype.html>`_, for"
" example:"
msgstr ""

#: ../../building.rst:395
msgid "GTK_RESPONSE_OK, -5"
msgstr ""

#: ../../building.rst:396
msgid "GTK_RESPONSE_CANCEL, -6"
msgstr ""

#: ../../building.rst:397
msgid "GTK_RESPONSE_YES, -8"
msgstr ""

#: ../../building.rst:398
msgid "GTK_RESPONSE_NO, -9"
msgstr ""

#: ../../building.rst:400
msgid ""
"There is no easy way to unit test a subclassed view, so please don't "
"subclass views, there's really no need to."
msgstr ""

#: ../../building.rst:403
msgid ""
"In the glade file, every input widget should define which handler is "
"activated on which signal.  The generic Presenter class offers generic "
"callbacks which cover the most common cases."
msgstr ""

#: ../../building.rst:407
msgid ""
"GtkEntry (one-line text entry) will handle the ``changed`` signal, with "
"either ``on_text_entry_changed`` or ``on_unique_text_entry_changed``."
msgstr ""

#: ../../building.rst:409
msgid ""
"GtkTextView: associate it to a GtkTextBuffer. To handle the ``changed`` "
"signal on the GtkTextBuffer, we have to define a handler which invokes "
"the generic ``on_textbuffer_changed``, the only role for this function is"
" to pass our generic handler the name of the model attribute that "
"receives the change. This is a workaroud for an `unresolved bug in GTK "
"<http://stackoverflow.com/questions/32106765/>`_."
msgstr ""

#: ../../building.rst:415
msgid ""
"GtkComboBox with translated texts can't be easily handled from the glade "
"file, so we don't even try.  Use the ``init_translatable_combo`` method "
"of the generic ``GenericEditorView`` class, but please invoke it from the"
" **presenter**."
msgstr ""

#: ../../building.rst:420
msgid ""
"The **Model** is just an object with known attributes. In this "
"interaction, the **model** is just a passive data container, it does "
"nothing more than to let the **presenter** modify it."
msgstr ""

#: ../../building.rst:424
msgid "The subclassed **Presenter** defines and implements:"
msgstr ""

#: ../../building.rst:426
msgid ""
"``widget_to_field_map``, a dictionary associating widget names to name of"
" model attributes,"
msgstr ""

#: ../../building.rst:428 ../../extending.rst:24
msgid ""
"``view_accept_buttons``, the list of widget names which, if activated by "
"the user, mean that the view should be closed,"
msgstr ""

#: ../../building.rst:430 ../../extending.rst:26
msgid "all needed callbacks,"
msgstr ""

#: ../../building.rst:431 ../../extending.rst:27
msgid "optionally, it plays the **model** role, too."
msgstr ""

#: ../../building.rst:433
msgid ""
"The **presenter** continuously updates the **model** according to changes"
" in the **view**. If the **model** corresponds to a database object, the "
"**presenter** commits all **model** updates to the database when the "
"**view** is closed successfully, or rolls them back if the **view** is "
"canceled. (this behaviour is influenced by the parameter ``do_commit``)"
msgstr ""

#: ../../building.rst:439
msgid ""
"If the **model** is something else, then the **presenter** will do "
"something else."
msgstr ""

#: ../../building.rst:444
msgid ""
"A well behaved **presenter** uses the **view** api to query the values "
"inserted by the user or to forcibly set widget statuses. Please do not "
"learn from the practice of our misbehaving presenters, some of which "
"directly handle fields of ``view.widgets``. By doing so, these presenters"
" prevents us from writing unit tests."
msgstr ""

#: ../../building.rst:450
msgid ""
"The base class for the presenter, ``GenericEditorPresenter`` defined in "
"``bauble.editor``, implements many useful generic callbacks.  There is a "
"``MockView`` class, that you can use when writing tests for your "
"presenters."
msgstr ""

#: ../../building.rst:455
msgid "Examples"
msgstr ""

#: ../../building.rst:457
msgid ""
"``Contact`` and ``ContactPresenter`` are implemented following the above "
"lines.  The view is defined in the ``contact.glade`` file."
msgstr ""

#: ../../building.rst:460
msgid ""
"A good example of Presenter/View pattern (no model) is given by the "
"connection manager."
msgstr ""

#: ../../building.rst:463 ../../extending.rst:39
msgid ""
"We use the same architectural pattern for non-database interaction, by "
"setting the presenter also as model. We do this, for example, for the "
"JSON export dialog box. The following command will give you a list of "
"``GenericEditorView`` instantiations::"
msgstr ""

#: ../../building.rst:471 ../../extending.rst:50
msgid "Extending Ghini with Plugins"
msgstr ""

#: ../../building.rst:473 ../../extending.rst:52
msgid ""
"Nearly everything about Ghini is extensible through plugins. Plugins can "
"create tables, define custom searchs, add menu items, create custom "
"commands and more."
msgstr ""

#: ../../building.rst:477 ../../extending.rst:56
msgid ""
"To create a new plugin you must extend the ``bauble.pluginmgr.Plugin`` "
"class."
msgstr ""

#: ../../building.rst:480 ../../extending.rst:59
msgid ""
"The ``Tag`` plugin is a good minimal example, even if the ``TagItemGUI`` "
"falls outside the Model-View-Presenter architectural pattern."
msgstr ""

#: ../../building.rst:484 ../../devdl.rst:347
msgid "Plugins structure"
msgstr ""

#: ../../building.rst:486 ../../devdl.rst:349
msgid ""
"Ghini is a framework for handling collections, and is distributed along "
"with a set of plugins making Ghini a botanical collection manager. But "
"Ghini stays a framework and you could in theory remove all plugins we "
"distribute and write your own, or write your own plugins that extend or "
"complete the current Ghini behaviour."
msgstr ""

#: ../../building.rst:492 ../../devdl.rst:355
msgid ""
"Once you have selected and opened a database connection, you land in the "
"Search window. The Search window is an interaction between two objects: "
"SearchPresenter (SP) and SearchView (SV)."
msgstr ""

#: ../../building.rst:496 ../../devdl.rst:359
msgid ""
"SV is what you see, SP holds the program status and handles the requests "
"you express through SV. Handling these requests affect the content of SV "
"and the program status in SP."
msgstr ""

#: ../../building.rst:500 ../../devdl.rst:363
msgid ""
"The search results shown in the largest part of SV are rows, objects that"
" are instances of classes registered in a plugin."
msgstr ""

#: ../../building.rst:503 ../../devdl.rst:366
msgid ""
"Each of these classes must implement an amount of functions in order to "
"properly behave within the Ghini framework. The Ghini framework reserves "
"space to pluggable classes."
msgstr ""

#: ../../building.rst:507 ../../devdl.rst:370
msgid ""
"SP knows of all registered (plugged in) classes, they are stored in a "
"dictionary, associating a class to its plugin implementation.  SV has a "
"slot (a gtk.Box) where you can add elements. At any time, at most only "
"one element in the slot is visible."
msgstr ""

#: ../../building.rst:512 ../../devdl.rst:375
msgid ""
"A plugin defines one or more plugin classes. A plugin class plays the "
"role of a partial presenter (pP - plugin presenter) as it implement the "
"callbacks needed by the associated partial view fitting in the slot (pV -"
" plugin view), and the MVP pattern is completed by the parent presenter "
"(SP), again acting as model. To summarize and complete:"
msgstr ""

#: ../../building.rst:518 ../../devdl.rst:381
msgid "SP acts as model,"
msgstr ""

#: ../../building.rst:519 ../../devdl.rst:382
msgid "the pV partial view is defined in a glade file."
msgstr ""

#: ../../building.rst:520 ../../devdl.rst:383
msgid "the callbacks implemented by pP are referenced by the glade file."
msgstr ""

#: ../../building.rst:521 ../../devdl.rst:384
msgid "a context menu for the SP row,"
msgstr ""

#: ../../building.rst:522 ../../devdl.rst:385
msgid "a children property."
msgstr ""

#: ../../building.rst:524 ../../devdl.rst:387
msgid "when you register a plugin class, the SP:"
msgstr ""

#: ../../building.rst:526 ../../devdl.rst:389
msgid "adds the pV in the slot and makes it non-visible."
msgstr ""

#: ../../building.rst:527 ../../devdl.rst:390
msgid "adds an instance of pP in the registered plugin classes."
msgstr ""

#: ../../building.rst:528 ../../devdl.rst:391
msgid "tells the pP that the SP is the model."
msgstr ""

#: ../../building.rst:529 ../../devdl.rst:392
msgid "connects all callbacks from pV to pP."
msgstr ""

#: ../../building.rst:531 ../../devdl.rst:394
msgid ""
"when an element in pV triggers an action in pP, the pP can forward the "
"action to SP and can request SP that it updates the model and refreshes "
"the view."
msgstr ""

#: ../../building.rst:535 ../../devdl.rst:398
msgid ""
"When the user selects a row in SP, SP hides everything in the pluggable "
"slot and shows only the single pV relative to the type of the selected "
"row, and asks the pP to refresh the pV with whatever is relative to the "
"selected row."
msgstr ""

#: ../../building.rst:539 ../../devdl.rst:402
msgid ""
"Apart from setting the visibility of the various pV, nothing needs be "
"disabled nor removed: an invisible pV cannot trigger events!"
msgstr ""

#: ../../building.rst:543
msgid "bug solving workflow"
msgstr ""

#: ../../building.rst:546
msgid "normal development workflow"
msgstr ""

#: ../../building.rst:548
msgid ""
"while using the software, you notice a problem, or you get an idea of "
"something that could be better, you think about it good enough in order "
"to have a very clear idea of what it really is, that you noticed. you "
"open an issue and describe the problem. someone might react with hints."
msgstr ""

#: ../../building.rst:552
msgid "you open the issues site and choose one you want to tackle."
msgstr ""

#: ../../building.rst:553
msgid ""
"assign the issue to yourself, this way you are informing the world that "
"you have the intention to work at it. someone might react with hints."
msgstr ""

#: ../../building.rst:555
msgid ""
"optionally fork the repository in your account and preferably create a "
"branch, clearly associated to the issue."
msgstr ""

#: ../../building.rst:557
msgid ""
"write unit tests and commit them to your branch (please do not push "
"failing unit tests to github, run ``nosetests`` locally first)."
msgstr ""

#: ../../building.rst:559
msgid ""
"write more unit tests (ideally, the tests form the complete description "
"of the feature you are adding or correcting)."
msgstr ""

#: ../../building.rst:561
msgid ""
"make sure the feature you are adding or correcting is really completely "
"described by the unit tests you wrote."
msgstr ""

#: ../../building.rst:563
msgid ""
"make sure your unit tests are atomic, that is, that you test variations "
"on changes along one single variable. do not give complex input to unit "
"tests or tests that do not fit on one screen (25 lines of code)."
msgstr ""

#: ../../building.rst:566
msgid "write the code that makes your tests succeed."
msgstr ""

#: ../../building.rst:567
msgid "update the i18n files (run ``./scripts/i18n.sh``)."
msgstr ""

#: ../../building.rst:568
msgid ""
"whenever possible, translate the new strings you put in code or glade "
"files."
msgstr ""

#: ../../building.rst:570
msgid "commit your changes."
msgstr ""

#: ../../building.rst:571
msgid "push to github."
msgstr ""

#: ../../building.rst:572
msgid "open a pull request."
msgstr ""

#: ../../building.rst:575
msgid "publishing to production"
msgstr ""

#: ../../building.rst:577
msgid ""
"open the pull request page using as base a production line ``ghini-x.y``,"
" compared to ``ghini-x.y-dev``."
msgstr ""

#: ../../building.rst:579
msgid "make sure a ``bump`` commit is included in the differences."
msgstr ""

#: ../../building.rst:580
msgid "it should be possible to automatically merge the branches."
msgstr ""

#: ../../building.rst:581
msgid "create the new pull request, call it as “publish to the production line”."
msgstr ""

#: ../../building.rst:582
msgid "you possibly need wait for travis-ci to perform the checks."
msgstr ""

#: ../../building.rst:583
msgid "merge the changes."
msgstr ""

#: ../../building.rst:584
msgid "tell the world about it: on facebook, the google group, linkedin, ..."
msgstr ""

#: ../../building.rst:587
msgid "closing step"
msgstr ""

#: ../../building.rst:589
msgid ""
"review this workflow. consider this as a guideline, to yourself and to "
"your colleagues. please help make it better and matching the practice."
msgstr ""

#: ../../db-prepare.rst:2
msgid "Preparing a Database"
msgstr ""

#: ../../db-prepare.rst:5
msgid "SQLite - the easy choice"
msgstr ""

#: ../../db-prepare.rst:7
msgid "there's nothing you need prepare if you are using SQLite."
msgstr ""

#: ../../db-prepare.rst:10
msgid "PostgreSQL - scalable choice"
msgstr ""

#: ../../db-prepare.rst:12
msgid "allow network connections"
msgstr ""

#: ../../db-prepare.rst:14
msgid "create the bauble main user"
msgstr ""

#: ../../devdl.rst:2
msgid "Downloading the source"
msgstr ""

#: ../../devdl.rst:4
msgid ""
"The Ghini source can be downloaded from our source repository on `github "
"<http://github.com/Ghini/ghini.desktop>`_."
msgstr ""

#: ../../devdl.rst:7
msgid ""
"If you want a particular version of Ghini, we release and maintain "
"versions into branches. You should ``git checkout`` the branch "
"corresponding to the version of your choice. Branch names for Ghini "
"versions are of the form ``bauble-x.y``, where x.y can be 1.0, for "
"example. Our workflow is to commit to the `master` development branch or "
"to a `patch` branch and to include the commits into a `release` branch "
"when ready."
msgstr ""

#: ../../devdl.rst:14
msgid ""
"To check out the most recent code from the source repository you will "
"need to install the `Git <http://www.git.org>`_ version control system. "
"Git is incuded in all reasonable Linux distributions and can be installed"
" on all current operating systems."
msgstr ""

#: ../../devdl.rst:19
msgid ""
"Once you have installed Git you can checkout the latest Ghini code with "
"the following command::"
msgstr ""

#: ../../devdl.rst:24
msgid ""
"For more information about other available code branches go to "
"`ghini.desktop on github <http://www.github.com/Ghini/ghini.desktop>`_."
msgstr ""

#: ../../devdl.rst:34
msgid ""
"A bauble production line is a branch. Currently there is only one "
"production line, that is bauble-1.0.  In perspective, we will have "
"several one, each in use by one or more gardens."
msgstr ""

#: ../../devdl.rst:38
msgid ""
"As long as we have only one production line, I keep working on the master"
" branch, unless I later realize the work is going to take longer than one"
" or two days."
msgstr ""

#: ../../devdl.rst:43
msgid "batches of simple issues"
msgstr ""

#: ../../devdl.rst:45
msgid ""
"For issues that can be managed in one or two commits, and as long as "
"there's no other activity on the repository, work on the master branch, "
"accumulate issue-solving commits, finally merge master into the "
"production line bauble-1.0."
msgstr ""

#: ../../devdl.rst:53
msgid ""
"When facing a single larger issue, create a branch tag, and follow the "
"workflow described at"
msgstr ""

#: ../../devdl.rst:64
msgid ""
"work on the new branch. When ready, go to github, merge the branch with "
"master, solve conflicts where necessary, delete the temporary branch."
msgstr ""

#: ../../devdl.rst:67
msgid "when ready for publication, merge master into the production line."
msgstr ""

#: ../../devdl.rst:93
msgid ""
"To update the ``po`` filese relative to the documentation, you need a up-"
"to-date checkout of both projects. The root directory of the ghini"
".desktop-docs.i18n project contains a script with an all telling name::"
msgstr ""

#: ../../editing.rst:4
msgid "Editing and Inserting Data"
msgstr ""

#: ../../editing.rst:6
msgid ""
"The main way that we add or change information in Ghini is by using the "
"editors.  Each basic type of data has its own editor.  For example there "
"is a Family editor, a Genus editor, an Accession editor, etc."
msgstr ""

#: ../../editing.rst:10
msgid ""
"To create a new record click on the :menuselection:`Insert` menu on the "
"menubar and then select the type of record your would like to create.  "
"This opens a new blank editor for the type."
msgstr ""

#: ../../editing.rst:14
msgid ""
"To edit an existing record in the database right click on an item in the "
"search results and select :menuselection:`Edit` from the popup menu.  "
"This opens an editor that allows you to change the values on the record "
"that you selected."
msgstr ""

#: ../../editing.rst:19
msgid ""
"Most types also have children which you can add by right clicking on the "
"parent and selecting \"Add ???...\" on the context menu.  For example, a "
"Family has Genus children: you can add a Genus to a Family by right "
"clicking on a Family and selecting \"Add genus\"."
msgstr ""

#: ../../editing.rst:26
msgid "Notes"
msgstr ""

#: ../../editing.rst:27
msgid ""
"Almost all of the editors in Ghini have a *Notes* tab which should work "
"the same regardless of which editor you are using."
msgstr ""

#: ../../editing.rst:30
msgid ""
"If you enter a web address in a note then the link shows up in the Links "
"box when the item your are editing is selected in the search results."
msgstr ""

#: ../../editing.rst:33
msgid ""
"You can browse the notes for an item in the database using the Notes box "
"at the bottom of the screen.  The Notes box is desensitized if the "
"selected item does not have any notes."
msgstr ""

#: ../../editing.rst:39 ../../searching.rst:44
msgid "Family"
msgstr ""

#: ../../editing.rst:40
msgid "The Family editor allows you to add or change a botanical family."
msgstr ""

#: ../../editing.rst:42
msgid ""
"The *Family* field on the editor lets you change the epithet of the "
"family. The Family field is required."
msgstr ""

#: ../../editing.rst:45
msgid ""
"The *Qualifier* field lets you change the family qualifier.  The value "
"can either be *sensu lato*, *sensu stricto*, or nothing."
msgstr ""

#: ../../editing.rst:48
msgid ""
"*Synonyms* allow you to add other families that are synonyms with the "
"family you are currently editing.  To add a new synonyms type in a family"
" name in the entry.  You must select a family name from the list of "
"completions. Once you have selcted a family name that you want to add as "
"a synonym click on the Add button next to the synonym list and the "
"software adds the selected synonym to the list.  To remove a synonym, "
"select the synonym from the list and click on the Remove button."
msgstr ""

#: ../../editing.rst:56 ../../editing.rst:91 ../../editing.rst:115
msgid "To cancel your changes without saving then click on the *Cancel* button."
msgstr ""

#: ../../editing.rst:58
msgid "To save the family you are working on then click *OK*."
msgstr ""

#: ../../editing.rst:60
msgid ""
"To save the family you are working on and add a genus to it then click on"
" the *Add Genera* button."
msgstr ""

#: ../../editing.rst:63
msgid ""
"To add another family when you are finished editing the current one click"
" on the *Next* button on the bottom.  This saves the current family and "
"opens a new blank family editor."
msgstr ""

#: ../../editing.rst:69 ../../searching.rst:45
msgid "Genus"
msgstr ""

#: ../../editing.rst:71
msgid "The Genus editor allows you to add or change a botanical genus."
msgstr ""

#: ../../editing.rst:73
msgid ""
"The *Family* field on the genus editor allows you to choose the family "
"for the genus.  When you begin type a family name it will show a list of "
"families to choose from.  The family name must already exist in the "
"database before you can set it as the family for the genus."
msgstr ""

#: ../../editing.rst:78
msgid "The *Genus* field allows you to set the genus for this entry."
msgstr ""

#: ../../editing.rst:80
msgid ""
"The *Author* field allows you to set the name or abbreviation of the "
"author(s) for the genus."
msgstr ""

#: ../../editing.rst:83
msgid ""
"*Synonyms* allow you to add other genera that are synonyms with the genus"
" you are currently editing.  To add a new synonyms type in a genus name "
"in the entry.  You must select a genus name from the list of completions."
"  Once you have selcted a genus name that you want to add as a synonym "
"click on the Add button next to the synonym list and it will add the "
"selected synonym to the list.  To remove a synonym select the synonym "
"from the list and click on the Remove button."
msgstr ""

#: ../../editing.rst:93
msgid "To save the genus you are working on then click *OK*."
msgstr ""

#: ../../editing.rst:95
msgid ""
"To save the genus you are working on and add a species to it then click "
"on the *Add Species* button."
msgstr ""

#: ../../editing.rst:98
msgid ""
"To add another genus when you are finished editing the current one click "
"on the *Next* button on the bottom.  This will save the current genus and"
" open a new blank genus editor."
msgstr ""

#: ../../editing.rst:104
msgid "Species/Taxon"
msgstr ""

#: ../../editing.rst:106
msgid ""
"For historical reasons called a `species`, but by this we mean a `taxon` "
"at rank `species` or lower.  It represents a unique name in the database."
"  The species editor allows you to construct the name as well as "
"associate metadata with the taxon such as its distribution, synonyms and "
"other information."
msgstr ""

#: ../../editing.rst:112
msgid ""
"The *Infraspecific parts* in the species editor allows you to specify the"
" `taxon` further than at `species` rank."
msgstr ""

#: ../../editing.rst:117
msgid "To save the species you are working on then click *OK*."
msgstr ""

#: ../../editing.rst:119
msgid ""
"To save the species you are working on and add an accession to it then "
"click on the *Add Accession* button."
msgstr ""

#: ../../editing.rst:122
msgid ""
"To add another species when you are finished editing the current one "
"click on the *Next* button on the bottom.  This will save the current "
"species and open a new blank species editor."
msgstr ""

#: ../../editing.rst:127
msgid "Accessions"
msgstr ""

#: ../../editing.rst:129
msgid ""
"The Accession editor allows us to add an accession to a species.  In "
"Ghini an accession represents a group of plants or clones.  The accession"
" would refer maybe a group of seed or cuttings from a species.  A plant "
"would be an individual from that accesssion, i.e. a specific plant in a "
"specific location."
msgstr ""

#: ../../editing.rst:136
msgid "Accession Source"
msgstr ""

#: ../../editing.rst:137
msgid ""
"The source of the accessions lets you add more information about where "
"this accession came from.  At the moment the type of the source can be "
"either a Collection or a Donation."
msgstr ""

#: ../../editing.rst:143 ../../searching.rst:53
msgid "Collection"
msgstr ""

#: ../../editing.rst:144
msgid "A Collection."
msgstr ""

#: ../../editing.rst:148
msgid "Donation"
msgstr ""

#: ../../editing.rst:149
msgid "A Donation."
msgstr ""

#: ../../editing.rst:154 ../../searching.rst:50
msgid "Plant"
msgstr ""

#: ../../editing.rst:155
msgid "The Plant editor."
msgstr ""

#: ../../editing.rst:158
msgid "Creating multiple plants"
msgstr ""

#: ../../editing.rst:159
msgid ""
"You can create multiple Plants by using ranges in the code entry. This is"
" only allowed when creating new plants and it is not possible when "
"editing existing Plants in the database."
msgstr ""

#: ../../editing.rst:163
msgid ""
"For example the range, 3-5 will create plant with code 3,4,5.  The range "
"1,4-7,25 will create plants with codes 1,4,5,6,7,25."
msgstr ""

#: ../../editing.rst:166
msgid ""
"When you enter the range in the plant code entry the entry will turn blue"
" to indicate that you are now creating multiple plants.  Any fields that "
"are set while in this mode will be copied to all the plants that are "
"created."
msgstr ""

#: ../../editing.rst:174
msgid "Pictures"
msgstr ""

#: ../../editing.rst:176
msgid ""
"Just as almost all objects in the Ghini database can have *Notes* "
"associated to them, Plants can have *Pictures*: next to the tab for "
"Notes, the Plants editor contains an extra tab called \"Pictures\". You "
"can associate as many pictures as you might need to a plant."
msgstr ""

#: ../../editing.rst:181
msgid ""
"When you associate a picture to a plant, the file is copied in the "
"*pictures* folder, and a miniature (500x500) is generated and copied in "
"the `thumbnails` folder inside of the pictures folder."
msgstr ""

#: ../../editing.rst:185
msgid ""
"As of Ghini-1.0.62, Pictures are not kept in the database. To ensure "
"pictures are available on all terminals where you have installed and "
"configured Ghini, you can use a file sharing service like Copy or "
"Dropbox. The personal choice of the writer of this document is to use "
"Copy, because it offers much more space and because of its \"Fair "
"Storage\" policy."
msgstr ""

#: ../../editing.rst:191
msgid ""
"Remember that you have configured the pictures root folder when you "
"specified the details of your database connection. Again, you should make"
" sure that the pictures root folder is shared with your file sharing "
"service of choice."
msgstr ""

#: ../../editing.rst:196
msgid ""
"When a Plant in the current selection is highlighted, its pictures are "
"displayed in the pictures pane, the pane left of the information pane. "
"When an accession in the selection is highlighted, any picture associated"
" to the plants in the highlighted accession are displayed in the pictures"
" pane."
msgstr ""

#: ../../editing.rst:202
msgid "Locations"
msgstr ""

#: ../../editing.rst:203
msgid "The Location editor"
msgstr ""

#: ../../editing.rst:206
msgid "danger zone"
msgstr ""

#: ../../editing.rst:208
msgid ""
"The location editor contains an initially hidden section named *danger "
"zone*. The widgets contained in this section allow the user to merge the "
"current location into a different location, letting the user correct "
"spelling mistakes or implement policy changes."
msgstr ""

#: ../../extending.rst:4
msgid ""
"The user interface is built according to the Model-View-Presenter "
"architectural pattern.  In theory, but also in the practice of all new "
"parts of the software:"
msgstr ""

#: ../../extending.rst:8
msgid ""
"The **view** is described as part of a **glade** file. This includes the "
"signal-callback associations. The base class is ``GenericEditorView`` "
"defined in ``bauble.editor``. Create an instance of the base class, "
"passing it the **glade** file name and the root widget name, then handle "
"the instance to the **presenter** constructor."
msgstr ""

#: ../../extending.rst:14
msgid ""
"The **model** simply follows the sqlalchemy practices. The **presenter** "
"continuously updates it according to changes in the **view**. The "
"**presenter** commits all **model** updates to the database if the "
"**view** is closed successfully, or rolls them back if the **view** is "
"canceled."
msgstr ""

#: ../../extending.rst:20
msgid "The subclassed **presenter** defines and implements:"
msgstr ""

#: ../../extending.rst:22
msgid ""
"``widget_to_field_map``, the association from widget name to name of "
"model attribute,"
msgstr ""

#: ../../extending.rst:29
msgid ""
"A well behaved **presenter** uses the **view** api to query the values "
"inserted by the user or to forcibly set widget statuses. Please do not "
"learn from the practice in our older presenters, most of which directly "
"handle widgets, something that prevents us from writing unit tests."
msgstr ""

#: ../../extending.rst:34
msgid ""
"There is no way to unit test a subclassed view, so please don't subclass "
"views."
msgstr ""

#: ../../extending.rst:36
msgid ""
"The base class for the presenter, ``GenericEditorPresenter`` defined in "
"``bauble.editor``, implements many useful generic callbacks."
msgstr ""

#: ../../extending.rst:46
msgid ""
"An other good example of Presenter/View pattern (no model) is given by "
"the connection manager."
msgstr ""

#: ../../goal.rst:2
msgid "Ghini's goals and highlights"
msgstr ""

#: ../../goal.rst:4
msgid ""
"Should you use this software? This question is for you to answer. We "
"trust that if you manage a botanic collection, you will find Ghini overly"
" useful and we hope that this page will convince you about it."
msgstr ""

#: ../../goal.rst:8
msgid ""
"This page shows how Ghini makes software meet the needs of a botanic "
"garden."
msgstr ""

#: ../../goal.rst:11
msgid "Botanic Garden"
msgstr "Jardín Botánico"

#: ../../goal.rst:13
msgid ""
"According to the Wikipedia, »A botanic(al) garden is a garden dedicated "
"to the collection, cultivation and display of a wide range of plants "
"labelled with their botanical names«, and still according to the "
"Wikipedia, »a garden is a planned space, usually outdoors, set aside for "
"the display, cultivation, and enjoyment of plants and other forms of "
"nature.«"
msgstr ""

#: ../../goal.rst:19
msgid ""
"So we have in a botanic garden both the physical space, the garden, as "
"its dynamic, the activities to which the garden is dedicated, activities "
"which makes us call the garden a botanic garden."
msgstr ""

#: ../../goal.rst:25
msgid "**the physical garden**"
msgstr "**el jardín en cuanto jardín**"

#: ../../goal.rst:29
msgid "**collection related activities in the garden**"
msgstr "**actividades del jardín, relacionadas a la colección**"

#: ../../goal.rst:32
msgid "Botanic Garden Software"
msgstr "Software para Jardines Botánicos"

#: ../../goal.rst:34
msgid ""
"At the other end of our reasoning we have the application program Ghini, "
"and again quoting the Wikipedia, »an application program is a computer "
"program designed to perform a group of coordinated functions, tasks, or "
"activities for the benefit of the user«, or, in short, »designed to help "
"people perform an activity«."
msgstr ""

#: ../../goal.rst:40
msgid ""
"Data and algorithms within Ghini have been designed to represent the "
"physical space and the dynamic of a botanic garden."
msgstr ""

#: ../../goal.rst:45 ../../searching.rst:158
msgid "**core structure of Ghini's database**"
msgstr "**la estructura esencial de la base de datos Ghini**"

#: ../../goal.rst:47
msgid ""
"The central element in Ghini's point of view is the ``Accession``. "
"Following its links to other database objects lets us better understand "
"the structure:"
msgstr ""
"El elemento central de la base de datos Ghini es la ``Accession`` (Accesión). "
"Seguir los enlaces a las otras tabelas de la base de datos nos permite "
"entender mejor su estructura:"

#: ../../goal.rst:50
msgid ""
"An ``Accession`` represents the action of receiving plant material in the"
" garden. As such, ``Accession`` is an abstract concept, it links physical"
" living ``Plantings`` —groups of plants placed each at a ``Location`` in "
"the garden— to the corresponding ``Species``. An ``Accession`` has zero "
"or more ``Plantings`` associated to it (0..n), and it is at all times "
"connected to exactly 1 ``Species``. Each ``Planting`` belongs to exactly "
"one ``Accession``, each ``Species`` may have multiple ``Accessions`` "
"relating to it."
msgstr ""
"Una ``Accession`` representa el haber recibido material botánico en el"
" jardín. Por eso, ``Accession`` es un concepto abstracto, conecta las"
" ``Plantings`` vivas —grupos de plantas puestas en la misma ``Location`` en "
"el jardín— a la ``Species`` correspondiente. A una ``Accession`` se le asocian cero "
"o más (0..n) ``Plantings``, y en todo momento está asociada a exactamente una "
"``Species``. Cada ``Planting`` pertenece a exactamente "
"una ``Accession``, cada ``Species`` puede tener cero o más ``Accessions``."

#: ../../goal.rst:59
msgid ""
"An ``Accession`` stays in the database even if all of its ``Plantings`` "
"have been removed, sold, or have died. Identifying the ``Species`` of an "
"``Accession`` consistently connects all its ``Plantings`` to the "
"``Species``."
msgstr ""
"Una ``Accession`` permanece en la base de datos aunque todas sus "
"``Planting`` hayan sido removidas, vendida, o se hayan muerto. Al individuar "
"la ``Species`` de una ``Accession`` se conecta en manera consistente todas "
"sus ``Planting`` a la misma ``Species``."

#: ../../goal.rst:64
msgid ""
"``Propagations`` and ``Contacts`` provide plant material for the garden; "
"this information is optional and smaller collectors might prefer to leave"
" this aside. A ``Propagation`` trial may be unsuccessful, most of the "
"time it will result in exactly one accession, but it may also produce "
"slightly different taxa, so the database allows for zero  or more "
"``Accessions`` per ``Propagation`` (0..n). Also a ``Contact`` may provide"
" zero or more ``Accessions`` (0..n)."
msgstr ""

#: ../../goal.rst:71
msgid ""
"Specialists may formulate their opinion about the ``Species`` to which an"
" ``Accession`` belongs, by providing a ``Verification``, signing it, and "
"stating the applicable level of confidence."
msgstr ""
"Especialistas pueden exprimir una opinión sobre la ``Especie`` a que "
"pertenece una ``Accesión``, formulando una ``Verificación``, poniendo su "
"firma, y afirmando el nivel de confianza a aplicar."

#: ../../goal.rst:75
msgid ""
"If an ``Accession`` was obtained in the garden nursery from a successful "
"``Propagation``, the ``Propagation`` links the ``Accession`` and all of "
"its ``Plantings`` to a single parent ``Planting``, the seed or the "
"vegetative parent."
msgstr ""

#: ../../goal.rst:80
msgid ""
"Even after the above explanation, new users generally still ask why they "
"need pass through an ``Accession`` screen while all they want is to "
"insert a ``Plant`` in the collection, and again: what is this "
"\"accession\" thing anyway?  Most discussions on the net don't make the "
"concept any clearer. One of our users gave an example which I'm glad to "
"include in Ghini's documentation."
msgstr ""

#: ../../goal.rst
msgid "use case"
msgstr ""

#: ../../goal.rst:87
msgid ""
"At the beginning of 2007 we got five seedlings of *Heliconia longa* (a "
"plant ``Species``) from our neighbour (the ``Contact`` source). Since it "
"was the first acquisition of the year, we named them 2007.0001 (we gave "
"them a single unique ``Accession`` code, with quantity 5) and we planted "
"them all together at one ``Location`` as a single ``Planting``, also with"
" quantity 5."
msgstr ""

#: ../../goal.rst:95
msgid ""
"At the time of writing, nine years later, ``Accession`` 2007.0001 has 6 "
"distinct ``Plantings``, each at a different ``Locations`` in our garden, "
"obtained vegetatively (asexually) from the original 5 plants. Our only "
"intervention was splitting, moving, and of course writing this "
"information in the database. Total plant quantity is above 40."
msgstr ""

#: ../../goal.rst:102
msgid ""
"New ``Plantings`` obtained by (assisted) sexual ``Propagation`` come in "
"our database under different ``Accession`` codes, where our garden is the"
" ``Contact`` source and where we know which of our ``Plantings`` is the "
"seed parent."
msgstr ""

#: ../../goal.rst:107
msgid "the above three cases translate into several short usage stories:"
msgstr ""

#: ../../goal.rst:109
msgid ""
"activate the menu Insert → Accession, verify the existence and "
"correctness of the ``Species`` *Heliconia longa*, specify the initial "
"quantity of the ``Accession``; add its ``Planting`` at the desired "
"``Location``."
msgstr ""

#: ../../goal.rst:113
msgid ""
"edit ``Planting`` to correct the amount of living plants — repeat this as"
" often as necessary."
msgstr ""

#: ../../goal.rst:115
msgid ""
"edit ``Planting`` to split it at separate ``Locations`` — this produces a"
" different ``Planting`` under the same ``Accession``."
msgstr ""

#: ../../goal.rst:117
msgid "edit ``Planting`` to add a (seed) ``Propagation``."
msgstr ""

#: ../../goal.rst:118
msgid "edit ``Planting`` to update the status of the ``Propagation``."
msgstr ""

#: ../../goal.rst:119
msgid ""
"activate the menu Insert → Accession to associate an accession to a "
"successful ``Propagation`` trial; add the ``Planting`` at the desired "
"``Location``."
msgstr ""

#: ../../goal.rst:123
msgid ""
"In particular the ability to split a ``Planting`` at several different "
"``Locations`` and to keep all uniformly associated to one ``Species``, or"
" the possibility to keep information about ``Plantings`` that have been "
"removed from the collection, help justify the presence of the "
"``Accession`` abstraction level."
msgstr ""

#: ../../goal.rst:131
msgid "Our User Stories section contains details about the above, and more."
msgstr ""

#: ../../goal.rst:136 ../../peptalk.rst:2
msgid "Highlights"
msgstr ""

#: ../../goal.rst:137 ../../peptalk.rst:3
msgid "not-so-brief list of highlights, meant to whet your appetite."
msgstr ""

#: ../../goal.rst:140 ../../peptalk.rst:6
msgid "taxonomic information"
msgstr "información taxonómica"

#: ../../goal.rst:142 ../../peptalk.rst:8
msgid ""
"When you first start Ghini, and connect to a database, Ghini will "
"initialize the database not only with all tables it needs to run, but it "
"will also populate the taxon tables for ranks family and genus, using the"
" data from the “RBG Kew's Family and Genera list from Vascular Plant "
"Families and Genera compiled by R. K. Brummitt and published by the Royal"
" Botanic Gardens, Kew in 1992”.  In 2015 we have reviewed the data "
"regarding the Orchidaceae, using “Tropicos, botanical information system "
"at the Missouri Botanical Garden - www.tropicos.org” as a source."
msgstr ""

#: ../../goal.rst:152 ../../peptalk.rst:18
msgid "importing data"
msgstr "importar data"

#: ../../goal.rst:154 ../../peptalk.rst:20
msgid ""
"Ghini will let you import any data you put in an intermediate json "
"format. What you import will complete what you already have in the "
"database. If you need help, you can ask some Ghini professional to help "
"you transform your data into Ghini's intermediate json format."
msgstr ""

#: ../../goal.rst:160 ../../peptalk.rst:26
msgid "synonyms"
msgstr "sinónimos"

#: ../../goal.rst:162 ../../peptalk.rst:28
msgid ""
"Ghini will allow you define synonyms for species, genera, families. Also "
"this information can be represented in its intermediate json format and "
"be imported in an existing Ghini database."
msgstr ""

#: ../../goal.rst:167 ../../peptalk.rst:33
msgid "scientific responsible"
msgstr ""

#: ../../goal.rst:169 ../../peptalk.rst:35
msgid ""
"Ghini implements the concept of 'accession', intermediate between "
"physical plant (or a group thereof) and abstract taxon. Each accession "
"can associate the same plants to different taxa, if two taxonomists do "
"not agree on the identification: each taxonomist can have their say and "
"do not need overwrite each other's work. All verifications can be found "
"back in the database, with timestamp and signature."
msgstr ""

#: ../../goal.rst:177 ../../peptalk.rst:43
msgid "helps off-line identification"
msgstr "facilita la identificación 'off-line'"

#: ../../goal.rst:179 ../../peptalk.rst:45
msgid ""
"Ghini allows you associate pictures to physical plants, this can help "
"recognize the plant in case a sticker is lost, or help taxonomic "
"identification if a taxonomist is not available at all times."
msgstr ""

#: ../../goal.rst:184 ../../peptalk.rst:50
msgid "exports and reports"
msgstr "exportación e informes"

#: ../../goal.rst:186 ../../peptalk.rst:52
msgid ""
"Ghini will let you export a report in whatever textual format you need. "
"It uses a powerful templating engine named 'mako', which will allow you "
"export the data in a selection to whatever format you need. Once "
"installed, a couple of examples are available in the mako subdirectory."
msgstr ""

#: ../../goal.rst:192 ../../peptalk.rst:58
msgid "annotate your info"
msgstr ""

#: ../../goal.rst:194 ../../peptalk.rst:60
msgid ""
"You can associate notes to plants, accessions, species, .... Notes can be"
" categorized and used in searches or reports."
msgstr ""

#: ../../goal.rst:198 ../../peptalk.rst:64
msgid "garden or herbarium"
msgstr "jardines o herbarios"

#: ../../goal.rst:200 ../../peptalk.rst:66
msgid "Management of plant locations."
msgstr ""

#: ../../goal.rst:203 ../../peptalk.rst:69
msgid "database history"
msgstr "historial de la base de datos"

#: ../../goal.rst:205 ../../peptalk.rst:71
msgid ""
"All changes in the database is stored in the database, as history log. "
"All changes are 'signed' and time-stamped.  Ghini makes it easy to "
"retrieve the list of all changes in the last working day or week, or in "
"any specific period in the past."
msgstr ""

#: ../../goal.rst:211 ../../peptalk.rst:77
msgid "simple and powerful search"
msgstr "búsquedas sencillas o complejas"

#: ../../goal.rst:213 ../../peptalk.rst:79
msgid ""
"Ghini allows you search the database using simple keywords, e.g.: the "
"name of the location or a genus name, or you can write more complex "
"queries, which do not reach the complexity of SQL but allow you a decent "
"level of detail localizing your data."
msgstr ""

#: ../../goal.rst:219 ../../peptalk.rst:85
msgid "database agnostic"
msgstr "en su propia base de datos"

#: ../../goal.rst:221 ../../peptalk.rst:87
msgid ""
"Ghini is not a database management system, so it does not reinvent the "
"wheel. It works storing its data in a SQL database, and it will connect "
"to any database management system which accepts a SQLAlchemy connector. "
"This means any reasonably modern database system and includes MySQL, "
"PostgreSQL, Oracle. It can also work with sqlite, which, for single user "
"purposes is quite sufficient and efficient. If you connect Ghini to a "
"real database system, you can consider making the database part of a LAMP"
" system (Linux-Apache-MySQL-Php) and include your live data on your "
"institution web site."
msgstr ""

#: ../../goal.rst:232 ../../peptalk.rst:98
msgid "language agnostic"
msgstr "en su propio idioma"

#: ../../goal.rst:234 ../../peptalk.rst:100
msgid ""
"The program was born in English and all its technical and user "
"documentation is still only in that language, but the program itself has "
"been translated and can be used in various other languages, including "
"Spanish (86%), Portuguese (100%), French (42%), to name some Southern "
"American languages, as well as Swedish (100%) and Czech (100%)."
msgstr ""

#: ../../goal.rst:241 ../../peptalk.rst:107
msgid "platform agnostic"
msgstr "en su propia plataforma software"

#: ../../goal.rst:243 ../../peptalk.rst:109
msgid ""
"Installing Ghini on Windows is an easy and linear process, it will not "
"take longer than 10 minutes. Ghini was born on Linux and installing it on"
" ubuntu, fedora or debian is consequently even easier. MacOSX being based"
" on unix, it is possible to successfully run the Linux installation "
"procedure on any recent Apple computer, after a few preparation steps."
msgstr ""

#: ../../goal.rst:250 ../../peptalk.rst:116
msgid "easily updated"
msgstr "facil puesta al día"

#: ../../goal.rst:252 ../../peptalk.rst:118
msgid ""
"The installation process will produce an updatable installation, where "
"updating it will take less than one minute. Depending on the amount of "
"feedback we receive, we will produce updates every few days or once in a "
"while."
msgstr ""

#: ../../goal.rst:258 ../../peptalk.rst:124
msgid "unit tested"
msgstr "garantizado por pruebas unitarias"

#: ../../goal.rst:260 ../../peptalk.rst:126
msgid ""
"Ghini is continuously and extensively unit tested, something that makes "
"regression of functionality close to impossible. Every update is "
"automatically quality checked, on the Travis Continuous Integration "
"service. Integration of TravisCI with the github platform will make it "
"difficult for us to release anything which has a single failing unit "
"test."
msgstr ""

#: ../../goal.rst:266 ../../peptalk.rst:132
msgid ""
"Most changes and additions we make, come with some extra unit test, which"
" defines the behaviour and will make any undesired change easily visible."
msgstr ""

#: ../../goal.rst:270 ../../peptalk.rst:136
msgid "customizable/extensible"
msgstr ""

#: ../../goal.rst:272 ../../peptalk.rst:138
msgid ""
"Ghini is extensible through plugins and can be customized to suit the "
"needs of the institution."
msgstr ""

#: ../../imex.rst:2
msgid "Importing and Exporting Data"
msgstr ""

#: ../../imex.rst:4
msgid ""
"Although Ghini can be extended through plugins to support alternate "
"import and export formats, by default it can only import and export comma"
" seperated values files or CSV."
msgstr ""

#: ../../imex.rst:8
msgid ""
"There is some support for exporting to the Access for Biological "
"Collections Data it is limited."
msgstr ""

#: ../../imex.rst:11
msgid ""
"There is also limited support for exporting to an XML format that more or"
" less reflects exactly the tables and row of the database."
msgstr ""

#: ../../imex.rst:14
msgid "Exporting ABCD and XML will not be covered here."
msgstr ""

#: ../../imex.rst:16
msgid ""
"Importing files will most likely destroy any data you have in the "
"database so make sure you have backed up your data."
msgstr ""

#: ../../imex.rst:20
msgid "Importing from CSV"
msgstr "Importar desde CSV"

#: ../../imex.rst:21
msgid ""
"In general it is best to only import CSV files into Ghini that were "
"previously exported from Ghini. It is possible to import any CSV file but"
" that is more advanced that this doc will cover."
msgstr ""

#: ../../imex.rst:25
msgid ""
"To import CSV files into Ghini select "
":menuselection:`Tools-->Export-->Comma Seperated Values` from the menu."
msgstr ""

#: ../../imex.rst:29
msgid ""
"After clicking OK on the dialog that ask if you are sure you know what "
"you're doing a file chooser will open.  In the file chooser select the "
"files you want to import."
msgstr ""

#: ../../imex.rst:35
msgid "Exporting to CSV"
msgstr ""

#: ../../imex.rst:37
msgid ""
"To export the Ghini data to CSV select "
":menuselection:`Tools-->Export-->Comma Seperated Values` from the menu."
msgstr ""

#: ../../imex.rst:40
msgid ""
"This tool will ask you to select a directory to export the CSV data. All "
"of the tables in Ghini will be exported to files in the format "
"tablename.txt where tablename is the name of the table where the data was"
" exported from."
msgstr ""

#: ../../imex.rst:46
msgid "Importing from JSON"
msgstr ""

#: ../../imex.rst:48
msgid ""
"This is *the* way to import data into an existing database, without "
"destroying previous content. A typical example of this functionality "
"would be importing your digital collection into a fresh, just initialized"
" Ghini database. Converting a database into bauble json interchange "
"format is beyond the scope of this manual, please contact one of the "
"authors if you need any further help."
msgstr ""

#: ../../imex.rst:55
msgid ""
"Using the Ghini json interchange format, you can import data which you "
"have exported from a different Ghini installation."
msgstr ""

#: ../../imex.rst:59
msgid "Exporting to JSON"
msgstr ""

#: ../../imex.rst:61
msgid "This feature is still under development."
msgstr ""

#: ../../imex.rst:65
msgid ""
"when you activate this export tool, you are given the choice to specify "
"what to export. You can use the current selection to limit the span of "
"the export, or you can start at the complete content of a domain, to be "
"chosen among Species, Accession, Plant."
msgstr ""

#: ../../imex.rst:70
msgid ""
"Exporting *Species* will only export the complete taxonomic information "
"in your database. *Accession* will export all your accessions plus all "
"the taxonomic information it refers to: unreferred to taxa will not be "
"exported. *Plant* will export all living plants (some accession might not"
" be included), all referred to locations and taxa."
msgstr ""

#: ../../index.rst:2
msgid "Documentation for Ghini 1.0"
msgstr "Documentación de Ghini 1.0"

#: ../../index.rst:8
msgid ""
"Ghini is an application for managing botanical specimen collections. With"
" it you can create a searchable database of plant records."
msgstr ""

#: ../../index.rst:11
msgid ""
"It is `open <http://www.opensource.org>`_ and `free "
"<http://www.fsf.org>`_ and is released under the `GNU Public License "
"<http://www.fsf.org/licensing/licenses/gpl.html>`_"
msgstr ""

#: ../../index.rst:17
msgid "Statements"
msgstr ""

#: ../../index.rst:26
msgid "Installing Ghini"
msgstr "Instalar Ghini"

#: ../../index.rst:35
msgid "Using Ghini"
msgstr "Utilizar Ghini"

#: ../../index.rst:51
msgid "Administration"
msgstr ""

#: ../../index.rst:60
msgid "Ghini Development"
msgstr "Desarrollo de Ghini"

#: ../../index.rst:69
msgid "Supporting Ghini"
msgstr "Apoyar Ghini"

#: ../../index.rst:73
msgid ""
"If you're using Ghini, or if you feel like helping its development "
"anyway, please consider `donating <https://pledgie.com/campaigns/29188>`_"
msgstr ""

#: ../../installing.rst:2
msgid "Installation"
msgstr "Instalación"

#: ../../installing.rst:4
msgid ""
"ghini.desktop is a cross-platform program and it will run on unix "
"machines like GNU/Linux and MacOSX, as well as on Windows."
msgstr ""

#: ../../installing.rst:7
msgid ""
"To install Ghini first requires that you install its dependencies that "
"cannot be installed automatically.  These include virtualenv, PyGTK and "
"pip. Python and GTK+, you probably already have. As long as you have "
"these packages installed then Ghini should be able to install the rest of"
" its dependencies by itself."
msgstr ""

#: ../../installing.rst:13
msgid ""
"If you follow these installation steps, you will end with Ghini running "
"within a Python virtual environment, all Python dependencies installed "
"locally, non conflicting with any other Python program you may have on "
"your system."
msgstr ""

#: ../../installing.rst:18
msgid ""
"if you later choose to remove Ghini, you simply remove the virtual "
"environment, which is a directory, with all of its content."
msgstr ""

#: ../../installing.rst:23
msgid "Installing on GNU/Linux"
msgstr "Instalación en GNU/Linux"

#: ../../installing.rst:25
msgid "Open a shell terminal window, and follow these instructions."
msgstr "Abra una ventana de terminal, y siga las instrucciones siguientes."

#: ../../installing.rst:29
msgid ""
"You can study the script to see what steps if runs for you. In short it "
"will install dependencies which can't be satisfied in a virtual "
"environment, then it will create a virtual environment named ``ghide``, "
"use git to download the sources to a directory named "
"``~/Local/github/Ghini/ghini.desktop``, and connect this git checkout to "
"the ``ghini-1.0`` branch (this you can consider a production line), it "
"then builds ghini, downloading all remaining dependencies in the virtual "
"environment, and finally it creates a startup script. If you have "
"``sudo`` permissions, it will be placed in ``/usr/local/bin``, otherwise "
"in your ``~/bin`` folder. Again if you"
msgstr ""

#: ../../installing.rst:43
msgid ""
"To run a script, first make sure you note down the name of the directory "
"to which you have downloaded the script, then you open a terminal window "
"and in that window you type `bash` followed by a space and the complete "
"name of the script including directory name, and hit on the enter key."
msgstr ""

#: ../../installing.rst:49
msgid "Download the `devinstall.sh` script and run it::"
msgstr ""

#: ../../installing.rst:53
msgid ""
"Please note that the script will not help you install any extra database "
"connector. This is not strictly necessary and you can do it at any later "
"step."
msgstr ""

#: ../../installing.rst:56
msgid "If the script ends without error, you can now start ghini::"
msgstr ""

#: ../../installing.rst:60
msgid "or update ghini to the latest released production patch::"
msgstr ""

#: ../../installing.rst:64
msgid ""
"The same script you can use to switch to a different production line. At "
"the moment it's just `ghini-1.0` and `ghini-1.1`."
msgstr ""

#: ../../installing.rst:67
msgid ""
"on Unity, open a terminal, start ghini, its icon will show up in the "
"launcher, you can now `lock to launcher` it."
msgstr ""

#: ../../installing.rst:70
msgid ""
"If you would like to use the default `SQLite <http://sqlite.org/>`_ "
"database or you don't know what this means then you can skip this step. "
"If you would like to use a database backend other than the default SQLite"
" backend then you will also need to install a database connector."
msgstr ""

#: ../../installing.rst:75
msgid ""
"If you would like to use a `PostgreSQL <http://www.postgresql.org>`_ "
"database then activate the virtual environment and install psycopg2 with "
"the following commands::"
msgstr ""

#: ../../installing.rst:82
msgid ""
"You might need solve dependencies. How to do so, depends on which "
"GNU/Linux flavour you are using. Check with your distribution "
"documentation."
msgstr ""

#: ../../installing.rst:86 ../../installing.rst:139 ../../installing.rst:293
#: ../../installing.rst:329
msgid "Next..."
msgstr ""

#: ../../installing.rst:87 ../../installing.rst:140 ../../installing.rst:294
#: ../../installing.rst:330
msgid ":ref:`connecting`."
msgstr ""

#: ../../installing.rst:90
msgid "Installing on MacOSX"
msgstr ""

#: ../../installing.rst:92
msgid ""
"Being MacOSX a unix environment, most things will work the same as on "
"GNU/Linux (sort of)."
msgstr ""

#: ../../installing.rst:95
msgid ""
"Last time we tested, some of the dependencies could not be installed on "
"MacOSX 10.5 and we assume similar problems would also show on older OSX "
"versions.  Ghini has been successfully tested with 10.7, 10.9 and 10.12."
msgstr ""

#: ../../installing.rst:99
msgid ""
"First of all, you need things which are an integral part of a unix "
"environment, but which are missing in a off-the-shelf mac:"
msgstr ""

#: ../../installing.rst:102
msgid ""
"developers tools: xcode. check the wikipedia page for the version "
"supported on your mac."
msgstr ""

#: ../../installing.rst:104
msgid "package manager: homebrew (tigerbrew for older OSX versions)."
msgstr ""

#: ../../installing.rst:106
msgid "with the above installed, open a terminal window and run::"
msgstr ""

#: ../../installing.rst:110
msgid ""
"make sure you understand the problems it reports, and correct them. pygtk"
" will need xquartz and brew will not solve the dependency automatically. "
"either install xquartz using brew or the way you prefer::"
msgstr ""

#: ../../installing.rst:116
msgid "then install the remaining dependencies::"
msgstr ""

#: ../../installing.rst:121
msgid "follow all instructions on how to activate what you have installed."
msgstr ""

#: ../../installing.rst:125
msgid ""
"On OSX 10.12, ``brew`` reports that ``gettext`` is already installed, but"
" then it won't let us find it. A solution is to run the following line::"
msgstr ""

#: ../../installing.rst:131
msgid ""
"Before we can run ``devinstall.sh`` as on GNU/Linux, we still need "
"installing a couple of python packages, globally. Do this::"
msgstr ""

#: ../../installing.rst:136
msgid ""
"The rest is just as on a normal unix machine. Read the above GNU/Linux "
"instructions, follow them, enjoy."
msgstr ""

#: ../../installing.rst:143
msgid "Installing on Windows"
msgstr ""

#: ../../installing.rst:145
msgid ""
"The current maintainer of ghini.desktop has no interest in learning how "
"to produce Windows installers, so the Windows installation is here "
"reduced to the same installation procedure as on Unix (GNU/Linux and "
"MacOSX)."
msgstr ""

#: ../../installing.rst:149
msgid ""
"Please report any trouble. Help with packaging will be very welcome, in "
"particular by other Windows users."
msgstr ""

#: ../../installing.rst:152
msgid ""
"The steps described here instruct you on how to install Git, Gtk, Python,"
" and the python database connectors. With this environment correctly set "
"up, the Ghini installation procedure runs as on GNU/Linux. The concluding"
" steps are again Windows specific."
msgstr ""

#: ../../installing.rst:157
msgid ""
"Ghini has been tested with and is known to work on W-XP, W-7 and W-8. "
"Although it should work fine on other versions Windows it has not been "
"thoroughly tested."
msgstr ""

#: ../../installing.rst:161
msgid ""
"Direct download links are given for all needed components. They have been"
" tested in September 2015, but things change with time. If any of the "
"direct download links stops working, please ring the bell, so we can "
"update the information here."
msgstr ""

#: ../../installing.rst:172
msgid "The installation steps on Windows:"
msgstr ""

#: ../../installing.rst:174
msgid ""
"download and install ``git`` (comes with a unix-like ``sh`` and includes "
"``vi``) from::"
msgstr ""

#: ../../installing.rst:177
msgid "https://git-scm.com/download/win"
msgstr ""

#: ../../installing.rst:179
msgid "`Direct link to download git`_"
msgstr ""

#: ../../installing.rst:181
msgid ""
"all default options are fine, except we need git to be executable from "
"the command prompt:"
msgstr ""

#: ../../installing.rst:186
msgid "download and install Python 2.x (32bit) from::"
msgstr ""

#: ../../installing.rst:188
msgid "http://www.python.org"
msgstr ""

#: ../../installing.rst:190
msgid "`Direct link to download Python`_"
msgstr ""

#: ../../installing.rst:192
msgid ""
"Ghini has been developed and tested using Python 2.x.  It will definitely"
" **not** run on Python 3.x.  If you are interested in helping port to "
"Python 3.x, please contact the Ghini maintainers."
msgstr ""

#: ../../installing.rst:196
msgid "when installing Python, do put Python in the PATH:"
msgstr ""

#: ../../installing.rst:200
msgid ""
"download ``pygtk`` from the following source. (this requires 32bit "
"python). be sure you download the \"all in one\" version::"
msgstr ""

#: ../../installing.rst:203
msgid "http://ftp.gnome.org/pub/GNOME/binaries/win32/pygtk/"
msgstr ""

#: ../../installing.rst:205
msgid "`Direct link to download PyGTK`_"
msgstr ""

#: ../../installing.rst:207
msgid "make a complete install, selecting everything:"
msgstr ""

#: ../../installing.rst:211
msgid ""
"(Windows 8.x) please consider this additional step. It is possibly "
"necessary to avoid the following error on Windows 8.1 installations::"
msgstr ""

#: ../../installing.rst:218
msgid "If you skip this step and can confirm you get the error, please inform us."
msgstr ""

#: ../../installing.rst:220
msgid "You can download lxml from::"
msgstr ""

#: ../../installing.rst:224
msgid "Remember you need the 32 bit version, for Python 2.7."
msgstr ""

#: ../../installing.rst:226
msgid "`Direct link to download lxml`_"
msgstr ""

#: ../../installing.rst:228
msgid ""
"(optional) download and install a database connector other than "
"``sqlite3``."
msgstr ""

#: ../../installing.rst:231
msgid ""
"On Windows, it is NOT easy to install ``psycopg2`` from sources, using "
"pip, so \"avoid the gory details\" and use a pre-compiled pagkage from:"
msgstr ""

#: ../../installing.rst:234
msgid "http://initd.org/psycopg/docs/install.html"
msgstr ""

#: ../../installing.rst:236
msgid "`Direct link to download psycopg2`_"
msgstr ""

#: ../../installing.rst:238
msgid "**REBOOT**"
msgstr ""

#: ../../installing.rst:240
msgid "hey, this is Windows, you need to reboot for changes to take effect!"
msgstr ""

#: ../../installing.rst:242
msgid "download and run (from ``\\system32\\cmd.exe``) the batch file:"
msgstr ""

#: ../../installing.rst:244
msgid "https://raw.githubusercontent.com/Ghini/ghini.desktop/master/scripts/devinstall.bat"
msgstr ""

#: ../../installing.rst:246
msgid ""
"right before you hit the enter key to run the script, your screen might "
"look like something like this:"
msgstr ""

#: ../../installing.rst:251
msgid ""
"this will pull the ``ghini.desktop`` repository on github to your home "
"directory, under ``Local\\github\\Ghini``, checkout the ``ghini-1.0`` "
"production line, create a virtual environment and install ghini into it."
msgstr ""

#: ../../installing.rst:255
msgid ""
"you can also run ``devinstall.bat`` passing it as argument the numerical "
"part of the production line you want to follow."
msgstr ""

#: ../../installing.rst:258
msgid ""
"this is the last installation step that depends, heavily, on a working "
"internet connection."
msgstr ""

#: ../../installing.rst:261
msgid ""
"the operation can take several minutes to complete, depending on the "
"speed of your internet connection."
msgstr ""

#: ../../installing.rst:264
msgid ""
"the last installation step creates the Ghini group and shortcuts in the "
"Windows Start Menu, for all users. To do so, you need run a script with "
"administrative rights. The script is called ``devinstall-finalize.bat``, "
"it is right in your HOME folder, and has been created at the previous "
"step."
msgstr ""

#: ../../installing.rst:270
msgid ""
"right-click on it, select run as administrator, confirm you want it to "
"make changes to your computer. These changes are in the Start Menu only: "
"create the Ghini group, place the Ghini shortcut."
msgstr ""

#: ../../installing.rst:274
msgid ""
"download the batch file you will use to stay up-to-date with the "
"production line you chose to follow:"
msgstr ""

#: ../../installing.rst:277
msgid ""
"https://raw.githubusercontent.com/Ghini/ghini.desktop/master/scripts"
"/ghini-update.bat"
msgstr ""

#: ../../installing.rst:279
msgid ""
"if you are on a recent Ghini installation, each time you start the "
"program, Ghini will check on the development site and alert you of any "
"newer ghini release within your chosen production line."
msgstr ""

#: ../../installing.rst:283
msgid ""
"any time you want to update your installation, just start the command "
"prompt and run ``ghini-update.bat``"
msgstr ""

#: ../../installing.rst:286
msgid ""
"If you would like to generate and print PDF reports using Ghini's default"
" report generator then you will need to download and install `Apache FOP "
"<http://xmlgraphics.apache.org/fop/>`_. After extracting the FOP archive "
"you will need to include the directory you extracted to in your PATH."
msgstr ""

#: ../../installing.rst:299
msgid "Troubleshooting"
msgstr ""

#: ../../installing.rst:301
msgid "any error related to lxml."
msgstr ""

#: ../../installing.rst:303
msgid ""
"In order to be able to compile lxml, you have to install a C compiler (on"
" GNU/Linux this would be the ``gcc`` package) and Cython (a Python "
"specialization, that gets compiled into C code. Note: Cython is not "
"CPython)."
msgstr ""

#: ../../installing.rst:308
msgid ""
"However, It should not be necessary to compile anything, and ``pip`` "
"should be able to locate the binary modules in the online libraries."
msgstr ""

#: ../../installing.rst:311
msgid "For some reason, this is not the case on Windows 8.1."
msgstr ""

#: ../../installing.rst:313
msgid "https://pypi.python.org/pypi/lxml/3.4.4"
msgstr ""

#: ../../installing.rst:315
msgid "Please report any other trouble related to the installation of lxml."
msgstr ""

#: ../../installing.rst:317
msgid "Couldn't install gdata."
msgstr ""

#: ../../installing.rst:319
msgid ""
"For some reason the Google's gdata package lists itself in the Python "
"Package Index but doesn't work properly with the easy_install command.  "
"You can download the latest gdata package from:"
msgstr ""

#: ../../installing.rst:324
msgid "http://code.google.com/p/gdata-python-client/downloads/list"
msgstr ""

#: ../../installing.rst:326
msgid ""
"Unzip it and run ``python setup.py installw`` in the folder you unzip it "
"to."
msgstr ""

#: ../../propagations.rst:4
msgid "Dealing with Propagations"
msgstr ""

#: ../../propagations.rst:6
msgid ""
"Ghini offers the possibility to associate Propagations trials to Plants "
"and to document their treatments and results. Treatments are integral "
"parts of the description of a Propagation trial. If a Propagation trial "
"is successful, Ghini lets you associate it to a new Accession. You can "
"only associate one Accession to a Propagation Trial."
msgstr ""

#: ../../propagations.rst:12
msgid "Here we describe how you use this part of the interface."
msgstr ""

#: ../../propagations.rst:15
msgid "Creating a Propagation"
msgstr ""

#: ../../propagations.rst:17
msgid ""
"A Propagation (trial) is obtained from a Plant. Ghini reflects this in "
"its interface: you select a plant, open the Plant Editor on it, activate "
"the Propagation Tab, click on Add."
msgstr ""

#: ../../propagations.rst:21
msgid ""
"When you do the above, you get a Propagation Editor window. Ghini does "
"not consider Propagation trials as independent entities. As a result, "
"Ghini treats the Propagation Editor as a special editor window, which you"
" can only reach from the Plant Editor."
msgstr ""

#: ../../propagations.rst:26
msgid ""
"For a new Propagation, you select the type of propagation (this becomes "
"an immutable property of the propagation) then insert the data describing"
" it."
msgstr ""

#: ../../propagations.rst:29
msgid ""
"You will be able to edit the propagation data via the same path: select a"
" plant, open the Plant Editor, identify the propagation you want to edit,"
" click on the corresponding Edit button. You will be able to edit all "
"properties of an existing Propagation trial, except its type."
msgstr ""

#: ../../propagations.rst:34
msgid ""
"In the case of a seed propagation trial, you have a pollen parent, and a "
"seed parent. You should always associate the Propagation trial to the "
"seed parent."
msgstr ""

#: ../../propagations.rst:38
msgid ""
"In Ghini-1.0 you specify the pollen parent plant in the \"Notes\" field, "
"while Ghini-1.1 has a (relation) field for it. According to ITF2, there "
"might be cases in seed propagation trials where it is not known which "
"Plant plays which role. Again, in Ghini-1.0 you should use a note to "
"indicate whether this is the case, Ghini-1.1 has a (boolean) field "
"indicating whether this is the case."
msgstr ""

#: ../../propagations.rst:47
msgid "Using a Propagation"
msgstr ""

#: ../../propagations.rst:49
msgid "A Propagation trial may be successful and result in a new Accession."
msgstr ""

#: ../../propagations.rst:51
msgid ""
"Ghini helps you reflect this in the database: create a new Accession, "
"immediately switch to the Source tab and select \"Garden Propagation\" in"
" the (admittedly somewhat misleading) Contact field."
msgstr ""

#: ../../propagations.rst:55
msgid ""
"Start typing the plant number and a list of matching plants with "
"propagation trials will appear for you to select from."
msgstr ""

#: ../../propagations.rst:58
msgid ""
"Select the plant, and the list of accessed and unaccessed propagation "
"trials will appear in the lower half of the window."
msgstr ""

#: ../../propagations.rst:61
msgid ""
"Select a still unaccessed propagation trial from the list and click on Ok"
" to complete the operation."
msgstr ""

#: ../../propagations.rst:64
msgid ""
"Using the data from the Propagation trial, Ghini completes some of the "
"fields in the General tab: Taxon name, Type of material, and possibly "
"Provenance. You will be able to edit these fields, but please note that "
"the software will not prevent introducing conceptual inconsistencies in "
"your database."
msgstr ""

#: ../../propagations.rst:70
msgid "You can associate a Propagation trial to only one Accession."
msgstr ""

#: ../../report.rst:2
msgid "Generating reports"
msgstr ""

#: ../../report.rst:4
msgid ""
"A database without exporting facilities is of little use. Ghini lets you "
"export your data in table format (open them in your spreadsheet editor of"
" choice), as labels (to be printed or engraved), as html pages or pdf or "
"postscript documents."
msgstr ""

#: ../../report.rst:9
msgid "This page describes the two tools Ghini offers for these tasks."
msgstr ""

#: ../../report.rst:12
msgid "Using the Mako Report Formatter"
msgstr ""

#: ../../report.rst:14
msgid ""
"The Mako report formatter uses the Mako template language for generating "
"reports. More information about Mako and its language can be found at "
"`makotemplates.org <http://www.makotemplates.org>`_."
msgstr ""

#: ../../report.rst:18
msgid ""
"The Mako templating system should already be installed on your computer "
"if Ghini is installed."
msgstr ""

#: ../../report.rst:21
msgid ""
"Creating reports with Mako is similar in the way that you would create a "
"web page from a template.  It is much simpler than the XSL Formatter(see "
"below) and should be relatively easy to create template for anyone with a"
" little but of programming experience."
msgstr ""

#: ../../report.rst:26
msgid ""
"The template generator will use the same file extension as the template "
"which should indicate the type of output the template with create.  For "
"example, to generate an HTML page from your template you should name the "
"template something like `report.html`.  If the template will generate a "
"comma seperated value file you should name the template `report.csv`."
msgstr ""

#: ../../report.rst:33
msgid ""
"The template will receive a variable called `values` which will contain "
"the list of values in the current search."
msgstr ""

#: ../../report.rst:36
msgid ""
"The type of each value in `values` will be the same as the search domain "
"used in the search query.  For more information on search domains see "
":ref:`search-domains`."
msgstr ""

#: ../../report.rst:40
msgid ""
"If the query does not have a search domain then the values could all be "
"of a different type and the Mako template should prepared to handle them."
msgstr ""

#: ../../report.rst:46
msgid "Using the XSL Report Formatter"
msgstr ""

#: ../../report.rst:48
msgid ""
"The XSL report formatter requires an XSL to PDF renderer to convert the "
"data to a PDF file. Apache FOP is is a free and open-source XSL->PDF "
"renderer and is recommended."
msgstr ""

#: ../../report.rst:52
msgid ""
"If using Linux, Apache FOP should be installable using your package "
"manager.  On Debian/Ubuntu it is installable as ``fop`` in Synaptic or "
"using the following command::"
msgstr ""

#: ../../report.rst:60
msgid "Installing Apache FOP on Windows"
msgstr ""

#: ../../report.rst:62
msgid ""
"You have two options for installing FOP on Windows. The easiest way is to"
" download the prebuilt `ApacheFOP-0.95-1-setup.exe "
"<http://code.google.com/p/apache-fop-"
"installer/downloads/detail?name=ApacheFOP-0.95-1-setup.exe&can=2&q=#makechanges>`_"
" installer."
msgstr ""

#: ../../report.rst:65
msgid ""
"Alternatively you can download the `archive "
"<http://www.apache.org/dist/xmlgraphics/fop/binaries/>`_.  After "
"extracting the archive you must add the directory you extracted the "
"archive to to your PATH environment variable."
msgstr ""

#: ../../searching.rst:4
msgid "Searching in Ghini"
msgstr ""

#: ../../searching.rst:6
msgid ""
"Searching allows you to view, browse and create reports from your data. "
"You can perform searches by either entering the queries in the main "
"search entry or by using the Query Builder to create the queries for you."
" The results of Ghini searches are listed in the main window."
msgstr ""

#: ../../searching.rst:13
msgid "Search Strategies"
msgstr ""

#: ../../searching.rst:15
msgid "Ghini offers four distinct search strategies:"
msgstr ""

#: ../../searching.rst:17
msgid "by value — in all domains;"
msgstr ""

#: ../../searching.rst:18
msgid "by expression — in a few implicit fields in one explicit domain;"
msgstr ""

#: ../../searching.rst:19
msgid "by query — in one domain;"
msgstr ""

#: ../../searching.rst:20
msgid "by binomial name — only searches the Species domain."
msgstr ""

#: ../../searching.rst:22
msgid ""
"All search strategies —with the notable exception of the binomial name "
"search— are case insensitive."
msgstr ""

#: ../../searching.rst:27
msgid "Search by Value"
msgstr ""

#: ../../searching.rst:29
msgid ""
"Search by value is the simplest way to search. You enter one or more "
"strings and see what matches. The result includes objects of any type "
"(domain) where one or more of its fields contain one or more of the "
"search strings."
msgstr ""

#: ../../searching.rst:33
msgid ""
"You don't specify the search domain, all are included, nor do you "
"indicate which fields you want to match, this is implicit in the search "
"domain."
msgstr ""

#: ../../searching.rst:36
msgid ""
"The following table helps you understand the results and guides you in "
"formulating your searches."
msgstr ""

#: ../../searching.rst:40
msgid "search domain overview"
msgstr ""

#: ../../searching.rst:42
msgid "name and shorthands"
msgstr ""

#: ../../searching.rst:42
msgid "field"
msgstr ""

#: ../../searching.rst:42
msgid "result type"
msgstr ""

#: ../../searching.rst:44
msgid "family, fam"
msgstr ""

#: ../../searching.rst:44
msgid "epithet (family)"
msgstr ""

#: ../../searching.rst:45
msgid "genus, gen"
msgstr ""

#: ../../searching.rst:45
msgid "epithet (genus)"
msgstr ""

#: ../../searching.rst:46
msgid "species, sp"
msgstr ""

#: ../../searching.rst:46
msgid "epithet (sp) **×**"
msgstr ""

#: ../../searching.rst:46 ../../searching.rst:47
msgid "Species"
msgstr ""

#: ../../searching.rst:47
msgid "vernacular, common, vern"
msgstr ""

#: ../../searching.rst:47 ../../searching.rst:48 ../../searching.rst:52
#: ../../searching.rst:54
msgid "name"
msgstr ""

#: ../../searching.rst:48
msgid "geography, geo"
msgstr ""

#: ../../searching.rst:48
msgid "Geography"
msgstr ""

#: ../../searching.rst:49
msgid "accession, acc"
msgstr ""

#: ../../searching.rst:49
msgid "code"
msgstr ""

#: ../../searching.rst:49
msgid "Accession"
msgstr ""

#: ../../searching.rst:50
msgid "planting, plant"
msgstr ""

#: ../../searching.rst:50
msgid "code **×**"
msgstr ""

#: ../../searching.rst:51
msgid "location, loc"
msgstr ""

#: ../../searching.rst:51
msgid "code, name"
msgstr ""

#: ../../searching.rst:51
msgid "Location"
msgstr ""

#: ../../searching.rst:52
msgid "contact, person, org, source"
msgstr ""

#: ../../searching.rst:52
msgid "Contact"
msgstr ""

#: ../../searching.rst:53
msgid "collection, col, coll"
msgstr ""

#: ../../searching.rst:53
msgid "locale"
msgstr ""

#: ../../searching.rst:54
msgid "tag, tags"
msgstr ""

#: ../../searching.rst:54
msgid "Tag"
msgstr ""

#: ../../searching.rst:57
msgid ""
"Examples of searching by value would be: Maxillaria, Acanth, 2008.1234, "
"2003.2.1, indica."
msgstr ""

#: ../../searching.rst:60
msgid ""
"Unless explicitly quoted, spaces separate search strings. For example if "
"you search for ``Block 10`` then Ghini will search for the strings Block "
"and 10 and return all the results that match either of these strings. If "
"you want to search for Block 10 as one whole string then you should quote"
" the string like ``\"Block 10\"``."
msgstr ""

#: ../../searching.rst:66
msgid "× Composite Primary Keys"
msgstr ""

#: ../../searching.rst:69
msgid ""
"A **species** epithet means little without the corresponding genus, "
"likewise a **planting** code is unique only within the accession to which"
" it belongs.  In database theory terminology, epithet and code are not "
"sufficient to form a **primary key** for respectively species and "
"planting. These domains need a **composite** primary key."
msgstr ""

#: ../../searching.rst:76
msgid ""
"Search by value lets you look for **plantings** by their complete "
"planting code, which includes the accession code. Taken together, "
"Accession code and Planting code do provide a **composite primary key** "
"for plantings.  For **species**, we have introduced the binomial search, "
"described below."
msgstr ""

#: ../../searching.rst:84
msgid "Search by Expression"
msgstr ""

#: ../../searching.rst:86
msgid ""
"Searching with expression gives you a little more control over what you "
"are searching for. You narrow the search down to a specific domain, the "
"software defines which fields to search within the domain you specified."
msgstr ""

#: ../../searching.rst:90
msgid ""
"An expression is built as ``<domain> <operator> <value>``. For example "
"the search: ``gen=Maxillaria`` would return all the genera that match the"
" name Maxillaria. In this case the domain is ``gen``, the operator is "
"``=`` and the value is ``Maxillaria``."
msgstr ""

#: ../../searching.rst:95
msgid ""
"The above search domain overview table tells you the names of the search "
"domains, and, per search domain, which fields are searched."
msgstr ""

#: ../../searching.rst:98
#, python-format
msgid ""
"The search string ``loc like block%`` would return all the Locations for "
"which name or code start with \"block\".  In this case the domain is "
"``loc`` (a shorthand for ``location``), the operator is ``like`` (this "
"comes from SQL and allows for \"fuzzy\" searching), the value is "
"``block%``, the implicitly matched fields are ``name`` and ``code``.  The"
" percent sign is used as a wild card so if you search for ``block%`` then"
" it searches for all values that start with max.  If you search for "
"``%10`` it searches for all values that end in ``10``.  The string "
"``%ck%10`` would search for all value that contain ``ck`` and end in "
"``10``."
msgstr ""

#: ../../searching.rst:108
msgid "When a query takes ages to complete"
msgstr ""

#: ../../searching.rst:111
msgid ""
"You give a query, it takes time to compute, the result contains "
"unreasonably many entries.  This happens when you intend to use a "
"strategy, but your strings do not form a valid expression.  In this case "
"Ghini falls back to *search by value*. For example the search string "
"``gen lik maxillaria`` will search for the strings ``gen``, ``lik``, and "
"``maxillaria``, returning all that match at least one of the three "
"criteria."
msgstr ""

#: ../../searching.rst:120
msgid "Binomial search"
msgstr ""

#: ../../searching.rst:122
msgid ""
"You can also perform a search in the database if you know the species, "
"just by placing a few initial letters of genus and species epithets in "
"the search engine, correctly capitalized, i.e.: **Genus epithet** with "
"one leading capital letter, **Species epithet** all lowercase."
msgstr ""

#: ../../searching.rst:127
msgid "This way you can perform the search ``So ha``."
msgstr ""

#: ../../searching.rst:129
msgid "These would be the initials for Solanum hayesii, or Solanum havanense."
msgstr ""

#: ../../searching.rst:131
msgid ""
"Binomial search comes to compensate the limited usefulness of the above "
"search by expression when trying to look for a species."
msgstr ""

#: ../../searching.rst:134
msgid ""
"It is the correct capitalization **Xxxx xxxx** that informs the software "
"of your intention to perform a binomial search.  The software's second "
"guess will be a search by value, which will possibly result in far more "
"matches than you had expected."
msgstr ""

#: ../../searching.rst:139
msgid ""
"The similar request ``so ha`` will return, in a fresh install, over 3000 "
"objects, starting at Family \"Acalyp(**ha**)ceae\", ending at Geography "
"\"Western (**So**)uth America\"."
msgstr ""

#: ../../searching.rst:145
msgid "Search by Query"
msgstr ""

#: ../../searching.rst:147
msgid ""
"Queries allow the most control over searching. With queries you can "
"search across relations, specific columns, combine search criteria using "
"boolean operators like ``and``, ``or``, ``not`` (and their shorthands "
"``&&``, ``||``, ``!``), enclose them in parentheses, and more."
msgstr ""

#: ../../searching.rst:152
msgid ""
"Please contact the authors if you want more information, or if you "
"volunteer to document this more thoroughly.  In the meanwhile you may "
"start familiarizing yourself with the core structure of Ghini's database."
msgstr ""

#: ../../searching.rst:160
msgid "A few examples:"
msgstr ""

#: ../../searching.rst:162
msgid "plantings of family Fabaceae in location Block 10::"
msgstr ""

#: ../../searching.rst:166
msgid "locations that contain no plants::"
msgstr ""

#: ../../searching.rst:170
msgid ""
"accessions associated to a species of known binomial name (e.g.: "
"Mangifera indica)::"
msgstr ""

#: ../../searching.rst:174
msgid "accessions we propagated in the year 2016::"
msgstr ""

#: ../../searching.rst:178
msgid "accessions we modified in the last three days::"
msgstr ""

#: ../../searching.rst:182
msgid ""
"Searching with queries requires some knowledge of a little syntax and an "
"idea of the extensive Ghini database table structure. Both you acquire "
"with practice, and with the help of the Query Builder."
msgstr ""

#: ../../searching.rst:188
msgid "The Query Builder"
msgstr ""

#: ../../searching.rst:190
msgid ""
"Ghini offers a Query Builder, that helps you build complex search queries"
" through a point and click interface.  To open the Query Builder click "
"the |querybuilder| icon to the left of the search entry or select "
":menuselection:`Tools-->Query Builder` from the menu."
msgstr ""

#: ../../searching.rst:199
msgid ""
"A window will show up, which will lead you through all steps necessary to"
" construct a correct query that is understood by Ghini's Query Search "
"Strategy."
msgstr ""

#: ../../searching.rst:208
msgid ""
"First of all you indicate the search domain, this will allow the Query "
"Builder complete its graphical user interface, then you add as many "
"logical clauses as you need, connecting them with a ``and`` or ``or`` "
"binary operator."
msgstr ""

#: ../../searching.rst:213
msgid ""
"Each clause is formed of three parts: a property that can be reached from"
" the starting search domain, a comparison operator that you select from "
"the drop-down list, a value that you can either type or select from the "
"list of valid values for the field."
msgstr ""

#: ../../searching.rst:218
msgid ""
"Add as many search properties as you need, by clicking on the plus sign. "
"Select and/or next to the property name to choose how the clauses will be"
" combined in the search query."
msgstr ""

#: ../../searching.rst:222
msgid "When you are done building your query click OK to perform the search."
msgstr ""

#: ../../searching.rst:226
msgid "Query Grammar"
msgstr ""

#: ../../searching.rst:228
msgid ""
"For those who don't fear a bit of formal precision, the following BNF "
"code gives you a rather precise idea of the grammar implemented by the "
"Query Search Strategy.  Some grammatical categories are informally "
"defined; any missing ones are left to your fertile imagination; literals "
"are included in single quotes; the grammar is mostly case insensitive, "
"unless otherwise stated::"
msgstr ""

#: ../../searching.rst:291
msgid ""
"Please be aware that Ghini's Query language is quite a bit more complex "
"than what the Query Builder can produce: Queries you can build with the "
"Query Builder form a proper subset of the queries recognized by the "
"software::"
msgstr ""

#: ../../started.rst:2
msgid "Initial Configuration"
msgstr ""

#: ../../started.rst:4
msgid ""
"After a successful installation, more complex organizations will need "
"configure their database, and configure Ghini according to their database"
" configuration. This page focuses on this task. If you don't know what "
"this is about, please do read the part relative to SQLite."
msgstr ""

#: ../../started.rst:12
msgid "Should you SQLite?"
msgstr ""

#: ../../started.rst:14
msgid ""
"Is this the first time you use Ghini, are you going to work in a stand-"
"alone setting, you have not the faintest idea how to manage a database "
"management system? If you answered yes to any of the previous, you "
"probably better stick with SQLite, the easy, fast, zero-administration "
"file-based database."
msgstr ""

#: ../../started.rst:20
msgid ""
"With SQLite, you do not need any preparation and you can continue with "
"`connecting`_."
msgstr ""

#: ../../started.rst:23
msgid ""
"On the other hand, if you want to connect more than one bauble "
"workstation to the same database, or if you want to make your data "
"available for other clients, as could be a web server in a LAMP setting, "
"you should consider keeping your database in a database management system"
" like `PostgreSQL <http://www.postgresql.org>`_ or `MySQL/MariaDB "
"<https://mariadb.org/>`_, both supported by Ghini."
msgstr ""

#: ../../started.rst:30
msgid ""
"When connecting to a database server as one of the above, you have to "
"manually create: at least one bauble user, the database you want bauble "
"to use, and to give at lest one bauble user full permissions on its "
"database. When this is done, Ghini will be able to proceed, creating the "
"tables and importing the default data set.  The process is database-"
"dependent and it falls beyond the scope of this manual."
msgstr ""

#: ../../started.rst:37
msgid ""
"If you already got the chills or sick at your stomach, no need to worry, "
"just stick with SQLite, you do not miss on features nor performance."
msgstr ""

#: ../../started.rst:43
msgid "Connecting to a database"
msgstr ""

#: ../../started.rst:45
msgid ""
"When you start Ghini the first thing that comes up is the connection "
"dialog."
msgstr ""

#: ../../started.rst:48
msgid ""
"Quite obviously, if this is the first time you start Ghini, you have no "
"connections yet and Ghini will alert you about it."
msgstr ""

#: ../../started.rst:53
msgid ""
"This alert will show at first activation and also in the future if your "
"connections list becomes empty. As it says: click on **Add** to create "
"your first connection."
msgstr ""

#: ../../started.rst:59
msgid ""
"Just insert a name for your connection, something meaningful you "
"associate with the collection to be represented in the database (for "
"example: “my home garden”), and click on **OK**. You will be back to the "
"previous screen, but your connection name will be selected and the "
"Connection Details will have expanded."
msgstr ""

#: ../../started.rst:67
msgid "**specify the connection details**"
msgstr ""

#: ../../started.rst:69
msgid ""
"If you do not know what to do here, Ghini will help you stay safe. "
"Activate the **Use default locations** check box and create your first "
"connection by clicking on **Connect**."
msgstr ""

#: ../../started.rst:72
msgid ""
"You may safely skip the remainder of this section for the time being and "
"continue reading to the following section."
msgstr ""

#: ../../started.rst:75
msgid "**fine-tune the connection details**"
msgstr ""

#: ../../started.rst:77
msgid ""
"By default Ghini uses the file-based SQLite database.  During the "
"installation process you had the choice (and you still have after "
"installation), to add database connectors other than the default SQLite."
msgstr ""

#: ../../started.rst:81
msgid ""
"In this example, Ghini can connect to SQLite, PostgreSQL and MySQL, but "
"no connector is available for Oracle or MS SQL Server."
msgstr ""

#: ../../started.rst:86
msgid ""
"If you use SQLite, all you really need specify is the connection name. If"
" you let Ghini use the default filename then Ghini creates a database "
"file with the same name as the connection and ``.db`` extension, and a "
"pictures folder with the same name and no extension, both in "
"``~/.bauble`` on Linux/MacOSX or in ``AppData\\Roaming\\Bauble`` on "
"Windows."
msgstr ""

#: ../../started.rst:92
msgid ""
"Still with SQLite, you might have received or downloaded a bauble "
"database, and you want to connect to it. In this case you do not let "
"Ghini use the default filename, but you browse in your computer to the "
"location where you saved the Ghini SQLite database file."
msgstr ""

#: ../../started.rst:97
msgid ""
"If you use a different database connector, the dialog box will look "
"different and it will offer you the option to fine tune all parameters "
"needed to connect to the database of your choice."
msgstr ""

#: ../../started.rst:101
msgid ""
"If you are connecting to an existing database you can continue to :ref"
":`editing-and-inserting-data` and subsequently :ref:`searching-in-"
"bauble`, otherwise read on to the following section on initializing a "
"database for Ghini."
msgstr ""

#: ../../started.rst:106
msgid ""
"If you plan to associate pictures to plants, specify also the *pictures "
"root* folder. The meaning of this is explained in further detail at :ref"
":`plant-pictures` in :ref:`editing-and-inserting-data`."
msgstr ""

#: ../../started.rst:113
msgid "Initialize a database"
msgstr ""

#: ../../started.rst:115
msgid ""
"First time you open a connection to a database which had never been seen "
"by Ghini before, Ghini will first display an alert:"
msgstr ""

#: ../../started.rst:120
msgid "immediately followed by a question:"
msgstr ""

#: ../../started.rst:124
msgid ""
"Be careful when manually specifying the connection parameters: the values"
" you have entered may refer to an existing database, not intended for use"
" with Ghini. By letting Ghini initialize a database, the database will be"
" emptied and all of its content be lost."
msgstr ""

#: ../../started.rst:129
msgid ""
"If you are sure you want to create a database at this connection then "
"select \"Yes\". Ghini will then start creating the database tables and "
"importing the default data. This can take a minute or two so while all of"
" the default data is imported into the database so be patient."
msgstr ""

#: ../../started.rst:134
msgid ""
"Once your database has been created, configured, initialized, you are "
"ready to start :ref:`editing-and-inserting-data` and subsequently :ref"
":`searching-in-bauble`."
msgstr ""

#: ../../statements.rst:2
msgid "Mission & Vision"
msgstr ""

#: ../../statements.rst:4
msgid ""
"Here we state who we are, what we think of our work, what you can expect "
"of this project."
msgstr ""

#: ../../statements.rst:8
msgid "Who is behind Ghini"
msgstr ""

#: ../../statements.rst:10
msgid ""
"Ghini started as a one-man project, by Brett Adams. He started this "
"software as Bauble, for and at the Belize Botanical Garden, and later on "
"adapted it to the needs of a couple of other users who asked him. Brett "
"made Bauble a commons, by releasing it under a GPL license."
msgstr ""

#: ../../statements.rst:15
msgid ""
"After some years of stagnation Mario Frasca took responsibility of "
"updating Bauble, rebranded it to Ghini, in honour of Luca Ghini, started "
"adocating, travelling, distributing, developing, documenting it, and it "
"is now Mario Frasca writing this, enhancing the software, looking for "
"users, requesting feedback..."
msgstr ""

#: ../../statements.rst:21
msgid ""
"So currently behind Ghini there's not only one developer, but much more "
"importantly, a small but growing global users community."
msgstr ""

#: ../../statements.rst:24
msgid ""
"Translations are provided by volunteers who mostly stay behind the "
"scenes, translating a couple of missing terms or sentences, and "
"disappearing again."
msgstr ""

#: ../../statements.rst:27
msgid ""
"To make things clearer when we speak of Ghini, but should—and in this "
"document we will—indicate whether it's Ghini(the software), or Ghini(the "
"people), unless obviously we mean both things."
msgstr ""

#: ../../statements.rst:32
msgid "Mission"
msgstr ""

#: ../../statements.rst:34
msgid ""
"The Mission Statement is a purpose, it defines the rationale of an entity"
" and is specific and true. For Ghini, the Mission Statement sets out the "
"social order to which Ghini is committed, the needs that are satisfied "
"with Ghini(the software) and with the services of Ghini(the people), the "
"market in which Ghini develops and its intended public image."
msgstr ""

#: ../../statements.rst:40
msgid "access to software"
msgstr ""

#: ../../statements.rst:41
msgid "access to development"
msgstr ""

#: ../../statements.rst:42
msgid "bundling resources"
msgstr ""

#: ../../statements.rst:43
msgid "open source"
msgstr ""

#: ../../statements.rst:44
msgid "open data"
msgstr ""

#: ../../statements.rst:45
msgid "community forming"
msgstr ""

#: ../../statements.rst:48
msgid "Vision"
msgstr ""

#: ../../statements.rst:50
msgid ""
"The Vision serves to indicate the way ahead and projects a future image "
"of what we want our organization to be, in a realistic and attractive "
"way.  It serves as motivation because it visualizes the challenge and "
"direction of necessary changes in order to grow and prosper."
msgstr ""

#: ../../statements.rst:55
msgid "by the year 2020"
msgstr ""

#: ../../statements.rst:56
msgid "reference point"
msgstr ""

#: ../../statements.rst:57
msgid "community"
msgstr ""

#: ../../statements.rst:58
msgid "development"
msgstr ""

#: ../../statements.rst:59
msgid "integration with web portal"
msgstr ""

#: ../../statements.rst:60
msgid "geographic information"
msgstr ""

#: ../../tagging.rst:2
msgid "Tagging"
msgstr ""

#: ../../tagging.rst:4
msgid ""
"Tagging is an easy way to give context to an object or create a "
"collection of object that you want to recall later. For example if you "
"want to collect a bunch of plants that you later want to create a report "
"from you can tag them with the string \"for that report i was thinking "
"about\". You can then select \"for that report i was thinking about\" "
"from the tags menu to show you all the objects you tagged."
msgstr ""

#: ../../tagging.rst:11
msgid ""
"Tagging can be done two ways. By selecting one or more items in the "
"search results and pressing Ctrl-T or by selecting "
":menuselection:`Tag-->Tag Selection` from the menu. If you have selected "
"multiple items then only that tags that are common to all the selected "
"items will have a check next to it."
msgstr ""

#: ../../users.rst:2
msgid "Managing Users"
msgstr ""

#: ../../users.rst:4
msgid "The Ghini users plugin is only available on PostgreSQL based databases."
msgstr ""

#: ../../users.rst:7
msgid ""
"The Ghini User's Plugin will allow you to create and manage the "
"permissions of users for your Ghini database."
msgstr ""

#: ../../users.rst:11
msgid "Creating Users"
msgstr ""

#: ../../users.rst:12
msgid "To create a new user..."
msgstr ""

#: ../../users.rst:16
msgid "Permissions"
msgstr ""

#: ../../users.rst:17
msgid "Ghini allows read, write and execute permissions."
msgstr ""

#: ../../user_stories.rst:3
msgid "representing the planned space"
msgstr ""

#: ../../user_stories.rst:5
msgid ""
"Botanic gardens are mostly organized in beds and greenhouses, and larger "
"beds are probably organized in smaller sections, while greenhouses might "
"be organized in tables, shelves, walls."
msgstr ""

#: ../../user_stories.rst:9
msgid ""
"In the above software view on garden data, the numeric indications at "
"either end of the line connecting ``Location`` and ``Planting`` tells us "
"that every ``Planting`` can only belong to exactly one (1) ``Location``, "
"while every ``Location`` may contain zero or more (0..n) ``Plantings``."
msgstr ""

#: ../../user_stories.rst:14
msgid ""
"A consequence of this constraint in the database is that your database "
"needs ``Locations`` in order to place ``Plants`` in the garden, so a good"
" practice is to start by entering a database ``Location`` for every "
"physical bed section, greenhouse table, or whatever might be the basic "
"location unit in your garden."
msgstr ""

#: ../../user_stories.rst:21
msgid "accepting a plant in the collection"
msgstr ""

#: ../../user_stories.rst:23
msgid ""
"When a plant (or a group of genetically identical plants) enters the "
"collection,"
msgstr ""

#: ../../user_stories.rst:26
msgid "building the history of a living plant"
msgstr ""

#: ../../user_stories.rst:29
msgid "managing contacts"
msgstr ""

#: ../../user_stories.rst:32
msgid "adding a taxonomist's opinion"
msgstr ""

#: ../../user_stories.rst:35
msgid "reproducing plants"
msgstr ""

#: ../../user_stories.rst:38
msgid "updating taxonomy tree"
msgstr ""

#: ../../user_stories.rst:41
msgid "producing report"
msgstr ""

#: ../../user_stories.rst:44
msgid "engraving labels"
msgstr ""

#~ msgid "helping bauble development"
#~ msgstr ""

#~ msgid ""
#~ "use the software, note the things "
#~ "you don't like, open issue for "
#~ "each of them. a developer will "
#~ "react."
#~ msgstr ""

#~ msgid ""
#~ "if you have an idea of what "
#~ "you miss in the software but can't"
#~ " quite formalize it into separate "
#~ "issues, you could consider hiring a "
#~ "professional. this is the best way "
#~ "to make sure that something happens "
#~ "quickly on Ghini. do make sure the"
#~ " developer opens issues and publishes "
#~ "their contribution on github."
#~ msgstr ""

#~ msgid ""
#~ "translate! any help with translations "
#~ "will be welcome, so please do! you"
#~ " can do this without installing "
#~ "anything on your computer, just using"
#~ " the on-line translation service "
#~ "offered by http://hosted.weblate.org/"
#~ msgstr ""

#~ msgid ""
#~ "fork the respository, choose an issue,"
#~ " solve it, open a pull request. "
#~ "see the `bug solving workflow`_ below."
#~ msgstr ""

#~ msgid ""
#~ "write unit tests and commit them "
#~ "to your branch (do not commit "
#~ "failing unit tests to the ``master`` "
#~ "branch)."
#~ msgstr ""

#~ msgid ""
#~ "open the pull request page using "
#~ "as base the production line, compared"
#~ " to ``master``."
#~ msgstr ""

#~ msgid "Ghini's goal"
#~ msgstr ""

#~ msgid ""
#~ "An ``Accession`` may be obtained from"
#~ " an external ``Contact``, or be the"
#~ " result of a garden ``Propagation``.  "
#~ "This information is optional.  A "
#~ "successful ``Propagation`` trial can only "
#~ "result in one accession (0..1), while"
#~ " a ``Contact`` may provide multiple "
#~ "``Accessions`` (0..n)."
#~ msgstr ""

#~ msgid ""
#~ "At the beginning of 2007 we got"
#~ " five seedlings of *Heliconia longa* "
#~ "(a plant ``Species``) from our neighbour"
#~ " (the ``Contact`` source). Since it "
#~ "was the first acquisition of the "
#~ "year, we named them 2007.0001 (we "
#~ "gave them a single unique ``Accession``"
#~ " code) and we planted them all "
#~ "together at one ``Location`` as a "
#~ "single ``Planting`` with quantity 5."
#~ msgstr ""

#~ msgid ""
#~ "At the time of writing, nine years"
#~ " later, ``Accession`` 2007.0001 has 6 "
#~ "distinct ``Plantings``, each at a "
#~ "different ``Locations`` in our garden, "
#~ "obtained vegetatively (asexually) from the "
#~ "original 5 plants. Our only intervention"
#~ " was splitting, moving, and of course"
#~ " writing this information in the "
#~ "database."
#~ msgstr ""

#~ msgid ""
#~ "The same script you can use to "
#~ "switch to a different production line,"
#~ " but at the moment there's only "
#~ "`ghini-1.0`."
#~ msgstr ""

#~ msgid ""
#~ "Three are three types of search "
#~ "strategies available in Ghini. Considering "
#~ "the search stragety types available in"
#~ " Ghini, sorted in increasing complexity:"
#~ " you can search by value, expression"
#~ " or query."
#~ msgstr ""

#~ msgid ""
#~ "Searching by query, the most complex "
#~ "and powerful, is assisted by the "
#~ "Query Builder, described below."
#~ msgstr ""

#~ msgid ""
#~ "All searches are case insensitive so "
#~ "searching for Maxillaria and maxillaria "
#~ "will return the same results."
#~ msgstr ""

#~ msgid ""
#~ "Search by value is the simplest "
#~ "way to search. You just type in"
#~ " a string and see what matches. "
#~ "Which fields/columns are search for your"
#~ " string depends on how the different"
#~ " plugins are configured. For example, "
#~ "by default the PlantPlugin search the"
#~ " family name, the genus name, the "
#~ "species and infraspecific species names, "
#~ "vernacular names and geography. So if"
#~ " you want to search in the "
#~ "notes field of any of these types"
#~ " then searching by value is not "
#~ "the search you're looking for."
#~ msgstr ""

#~ msgid ""
#~ "Examples of searching by value would "
#~ "be: Maxillaria, Acanth, 2008.1234, 2003.2.1"
#~ msgstr ""

#~ msgid ""
#~ "Search string are separated by spaces."
#~ " For example if you enter the "
#~ "search string ``Block 10`` then Ghini"
#~ " will search for the strings Block"
#~ " and 10 and return all the "
#~ "results that match either of these "
#~ "strings. If you want to search for"
#~ " Block 10 as a while string "
#~ "then you should quote the string "
#~ "like ``\"Block 10\"``."
#~ msgstr ""

#~ msgid ""
#~ "Searching with expression gives you a"
#~ " little more control over what you"
#~ " are searching for. It can narrow "
#~ "the search down to a specific "
#~ "domain. Expression consist of a domain,"
#~ " an operator and a value. For "
#~ "example the search: ``gen=Maxillaria`` would"
#~ " return all the genera that match "
#~ "the name Maxillaria. In this case "
#~ "the domain is gen, the operator is"
#~ " = and the value is Maxillaria."
#~ msgstr ""

#~ msgid ""
#~ "The search string ``gen like max%`` "
#~ "would return all the genera whose "
#~ "names start with \"Max\". In this "
#~ "case the domain again is gen, the"
#~ " operator is like, which allows for"
#~ " \"fuzzy\" searching and the value is"
#~ " max%. The percent sign is used "
#~ "as a wild card so if you "
#~ "search for max% then it search for"
#~ " all value that start with max. "
#~ "If you search for %max it searches"
#~ " for all values that end in "
#~ "max. The string %max%a would search "
#~ "for all value that contain max and"
#~ " end in a."
#~ msgstr ""

#~ msgid ""
#~ "For more information about the different"
#~ " search domain and their short-hand"
#~ " aliases, see search-domains_ ."
#~ msgstr ""

#~ msgid ""
#~ "If expression are invalid they are "
#~ "usually used as search by value "
#~ "searchs. For example the search string"
#~ " ``gen=`` will execute a search by"
#~ " value for the string gen and "
#~ "the search string ``gen like`` will "
#~ "search for the string gen and the"
#~ " string like."
#~ msgstr ""

#~ msgid ""
#~ "Queries allow the most control over "
#~ "searching. With queries you can search"
#~ " across relations, specific columns and "
#~ "join search using boolean operators like"
#~ " AND and OR."
#~ msgstr ""

#~ msgid "An example of a query would be::"
#~ msgstr ""

#~ msgid ""
#~ "This query would return all the "
#~ "plants whose family are Fabaceae and "
#~ "are located in Block 10."
#~ msgstr ""

#~ msgid ""
#~ "Searching with queries usually requires "
#~ "some knowledge of the Ghini internals"
#~ " and database table layouts."
#~ msgstr ""

#~ msgid "A couple of useful examples:"
#~ msgstr ""

#~ msgid "Which locations are in use::"
#~ msgstr ""

#~ msgid "Which genera are associated to at least one accession::"
#~ msgstr ""

#~ msgid "Domains"
#~ msgstr ""

#~ msgid ""
#~ "The following are the common search "
#~ "domain and the columns they search "
#~ "by default. The default columns are "
#~ "used when searching by value and "
#~ "expression. The queries do not use "
#~ "the default columns."
#~ msgstr ""

#~ msgid "family, fam: Search :class:`bauble.plugins.plants.Family`"
#~ msgstr ""

#~ msgid "genus, gen: Search :class:`bauble.plugins.plants.Genus`"
#~ msgstr ""

#~ msgid "species, sp: Search :class:`bauble.plugins.plants.Species`"
#~ msgstr ""

#~ msgid "geography: Search :class:`bauble.plugins.plants.Geography`"
#~ msgstr ""

#~ msgid "acc: Search :class:`bauble.plugins.garden.Accession`"
#~ msgstr ""

#~ msgid "plant: Search :class:`bauble.plugins.garden.Plant`"
#~ msgstr ""

#~ msgid "location, loc: Search :class:`bauble.plugins.garden.Location`"
#~ msgstr ""

#~ msgid ""
#~ "The Query Builder helps you build "
#~ "complex search queries through a point"
#~ " and click interface.  To open the"
#~ " Query Builder click the to the "
#~ "left of the search entry or select"
#~ " :menuselection:`Tools-->Query Builder` from the"
#~ " menu."
#~ msgstr ""

#~ msgid ""
#~ "The Query Builder composes a query "
#~ "that will be understood by the "
#~ "Query Search Strategy described above. "
#~ "You can use the Query Builder to"
#~ " get a feeling of correct queries "
#~ "before you start typing them by "
#~ "hand, something that you might prefer"
#~ " if you are a fast typer."
#~ msgstr ""

#~ msgid ""
#~ "After opening the Query Builder you "
#~ "must select a search domain.  The "
#~ "search domain will determine the type"
#~ " of data that is returned and "
#~ "the properties that you can search."
#~ msgstr ""

#~ msgid ""
#~ "The search domain is similar to a"
#~ " table in the database and the "
#~ "properties would be the columns on "
#~ "the table.  Often the table/domain and"
#~ " properties/columns are the same but "
#~ "not always."
#~ msgstr ""

#~ msgid ""
#~ "Once a search domain is selected "
#~ "you can then select a property of"
#~ " the domain to compare values to."
#~ "  The search operator can then be "
#~ "changed for how you want to make"
#~ " the search comparison.  Finally you "
#~ "must enter a value to compare to"
#~ " the search property."
#~ msgstr ""

#~ msgid ""
#~ "If the search property you have "
#~ "selected can only have specific values"
#~ " then a list of possible values "
#~ "will be provided for you to choose"
#~ " from."
#~ msgstr ""

#~ msgid ""
#~ "If multiple search properties are "
#~ "necessary then clicking on the plus "
#~ "sign will add more search properties."
#~ "  Select And/Or next to the property"
#~ " name choose how the properties will"
#~ " be combined in the search query."
#~ msgstr ""

